### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
  commentId: T:SuperOffice.CRM.Administration.IUserCredentialPlugin
  id: IUserCredentialPlugin
  parent: SuperOffice.CRM.Administration
  children:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers(System.String)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup(System.String)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetSupportedChangePasswordTypes(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordLegal(SuperOffice.CRM.Administration.SoUser,System.String,System.String@)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.SendChangePasswordEmail(SuperOffice.CRM.Rows.CredentialsRow)
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  langs:
  - csharp
  - vb
  name: IUserCredentialPlugin
  nameWithType: IUserCredentialPlugin
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin
  type: Interface
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: >-
    Interface implemented by UserCredential Plug-ins, responsible for adding credentials 

    to a user.  Adding a new user from a plugin will use the <xref href="SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32%2cSystem.String%2cSystem.String)" data-throw-if-not-resolved="false"></xref> 

    method to create a new person and consequent default values will be used to create 

    the user.  The credentials will finally be mapped to the user
  example: []
  syntax:
    content: public interface IUserCredentialPlugin
    content.vb: Public Interface IUserCredentialPlugin
  extensionMethods:
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Administration.IUserCredentialPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(System.String)
  id: FindGroups(System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: FindGroups(string)
  nameWithType: IUserCredentialPlugin.FindGroups(string)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: >-
    Get user groups holding users.  This method is only relevant if the CredentialType 

    control is of type link.  There will allways be at least one groups even if the 

    underlying provider does not support groups.
  example: []
  syntax:
    content: UserCredentialGroup[] FindGroups(string searchString)
    parameters:
    - id: searchString
      type: System.String
      description: Partly name of domain group.
    return:
      type: SuperOffice.CRM.Administration.UserCredentialGroup[]
      description: ''
    content.vb: Function FindGroups(searchString As String) As UserCredentialGroup()
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups*
  nameWithType.vb: IUserCredentialPlugin.FindGroups(String)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups(String)
  name.vb: FindGroups(String)
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup(System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup(System.String)
  id: GetCredentialUsersInGroup(System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetCredentialUsersInGroup(string)
  nameWithType: IUserCredentialPlugin.GetCredentialUsersInGroup(string)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup(string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: Get credential users within a user group
  example: []
  syntax:
    content: UserCredentialList GetCredentialUsersInGroup(string groupName)
    parameters:
    - id: groupName
      type: System.String
      description: Name of user group needed to discover the users.
    return:
      type: SuperOffice.CRM.Administration.UserCredentialList
      description: ''
    content.vb: Function GetCredentialUsersInGroup(groupName As String) As UserCredentialList
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup*
  nameWithType.vb: IUserCredentialPlugin.GetCredentialUsersInGroup(String)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup(String)
  name.vb: GetCredentialUsersInGroup(String)
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers(System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers(System.String)
  id: FindCredentialUsers(System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: FindCredentialUsers(string)
  nameWithType: IUserCredentialPlugin.FindCredentialUsers(string)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers(string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: Find users mathcing the partial name.
  example: []
  syntax:
    content: UserCredentialList FindCredentialUsers(string searchString)
    parameters:
    - id: searchString
      type: System.String
      description: Partly name of the user group
    return:
      type: SuperOffice.CRM.Administration.UserCredentialList
      description: ''
    content.vb: Function FindCredentialUsers(searchString As String) As UserCredentialList
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers*
  nameWithType.vb: IUserCredentialPlugin.FindCredentialUsers(String)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers(String)
  name.vb: FindCredentialUsers(String)
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
  id: CreatePerson(System.Int32,System.String,System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: CreatePerson(int, string, string)
  nameWithType: IUserCredentialPlugin.CreatePerson(int, string, string)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(int, string, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: Create Person and return person id of the person created
  example: []
  syntax:
    content: Person CreatePerson(int contactId, string value, string displayValue)
    parameters:
    - id: contactId
      type: System.Int32
      description: Contact id for the person to create.
    - id: value
      type: System.String
      description: >-
        This is the actuall value of the credentials.  This will typically be the 

        password or teh users SID in active directory.
    - id: displayValue
      type: System.String
      description: >-
        The value displayed to the user. this will typically be the users 

        login name in active directory.
    return:
      type: SuperOffice.CRM.Entities.Person
      description: Primary key of the person created
    content.vb: Function CreatePerson(contactId As Integer, value As String, displayValue As String) As Person
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson*
  nameWithType.vb: IUserCredentialPlugin.CreatePerson(Integer, String, String)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(Integer, String, String)
  name.vb: CreatePerson(Integer, String, String)
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  id: CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: CanChangePassword(CredentialsRow)
  nameWithType: IUserCredentialPlugin.CanChangePassword(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: Is this plugin able to change password for the current credential
  remarks: True if the plugin is able to change password.
  example: []
  syntax:
    content: bool CanChangePassword(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: Information about the credential.
    return:
      type: System.Boolean
    content.vb: Function CanChangePassword(row As CredentialsRow) As Boolean
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetSupportedChangePasswordTypes(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetSupportedChangePasswordTypes(SuperOffice.CRM.Rows.CredentialsRow)
  id: GetSupportedChangePasswordTypes(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetSupportedChangePasswordTypes(CredentialsRow)
  nameWithType: IUserCredentialPlugin.GetSupportedChangePasswordTypes(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetSupportedChangePasswordTypes(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: >-
    Returns a list of the types of password changes that is allowed for this credential.

    Returns empty array if no type is supported.
  example: []
  syntax:
    content: ChangePasswordType[] GetSupportedChangePasswordTypes(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
    return:
      type: SuperOffice.Data.ChangePasswordType[]
      description: ''
    content.vb: Function GetSupportedChangePasswordTypes(row As CredentialsRow) As ChangePasswordType()
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetSupportedChangePasswordTypes*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  id: ChangePassword(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: ChangePassword(CredentialsRow, string, string)
  nameWithType: IUserCredentialPlugin.ChangePassword(CredentialsRow, string, string)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow, string, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: Changes the account password from the old password to the new password.
  example: []
  syntax:
    content: void ChangePassword(CredentialsRow row, string oldPassword, string newPassword)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: Information about the credential.
    - id: oldPassword
      type: System.String
      description: The old password to change from.  This must be the current calid password.
    - id: newPassword
      type: System.String
      description: The new password to change to.
    content.vb: Sub ChangePassword(row As CredentialsRow, oldPassword As String, newPassword As String)
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword*
  nameWithType.vb: IUserCredentialPlugin.ChangePassword(CredentialsRow, String, String)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword(SuperOffice.CRM.Rows.CredentialsRow, String, String)
  name.vb: ChangePassword(CredentialsRow, String, String)
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.SendChangePasswordEmail(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.SendChangePasswordEmail(SuperOffice.CRM.Rows.CredentialsRow)
  id: SendChangePasswordEmail(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: SendChangePasswordEmail(CredentialsRow)
  nameWithType: IUserCredentialPlugin.SendChangePasswordEmail(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.SendChangePasswordEmail(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: Send an email the user cna use to change password.
  example: []
  syntax:
    content: void SendChangePasswordEmail(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: ''
    content.vb: Sub SendChangePasswordEmail(row As CredentialsRow)
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.SendChangePasswordEmail*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  id: CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: CanValidatePassword(CredentialsRow)
  nameWithType: IUserCredentialPlugin.CanValidatePassword(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: Is the plugin able to validfate the password.
  example: []
  syntax:
    content: bool CanValidatePassword(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: Information about the credential.
    return:
      type: System.Boolean
      description: True if it is possible to validate the password.
    content.vb: Function CanValidatePassword(row As CredentialsRow) As Boolean
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  id: IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow,System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: IsPasswordValid(CredentialsRow, string)
  nameWithType: IUserCredentialPlugin.IsPasswordValid(CredentialsRow, string)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: Check if password is valid.
  example: []
  syntax:
    content: bool IsPasswordValid(CredentialsRow row, string password)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: Information about the credential.
    - id: password
      type: System.String
      description: The password to check if if it is valid (e.g. that means that this is the current password.)
    return:
      type: System.Boolean
      description: True if the right password is passed in.
    content.vb: Function IsPasswordValid(row As CredentialsRow, password As String) As Boolean
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid*
  nameWithType.vb: IUserCredentialPlugin.IsPasswordValid(CredentialsRow, String)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid(SuperOffice.CRM.Rows.CredentialsRow, String)
  name.vb: IsPasswordValid(CredentialsRow, String)
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordLegal(SuperOffice.CRM.Administration.SoUser,System.String,System.String@)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordLegal(SuperOffice.CRM.Administration.SoUser,System.String,System.String@)
  id: IsPasswordLegal(SuperOffice.CRM.Administration.SoUser,System.String,System.String@)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: IsPasswordLegal(SoUser, string, out string)
  nameWithType: IUserCredentialPlugin.IsPasswordLegal(SoUser, string, out string)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordLegal(SuperOffice.CRM.Administration.SoUser, string, out string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: >-
    Check if a password is legal meaning it comply with the configured password policy for this provider.

    Implementations must return true if there is no policy checks to be done.
  example: []
  syntax:
    content: bool IsPasswordLegal(SoUser user, string password, out string reason)
    parameters:
    - id: user
      type: SuperOffice.CRM.Administration.SoUser
    - id: password
      type: System.String
    - id: reason
      type: System.String
    return:
      type: System.Boolean
      description: ''
    content.vb: Function IsPasswordLegal(user As SoUser, password As String, reason As String) As Boolean
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordLegal*
  nameWithType.vb: IUserCredentialPlugin.IsPasswordLegal(SoUser, String, String)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordLegal(SuperOffice.CRM.Administration.SoUser, String, String)
  name.vb: IsPasswordLegal(SoUser, String, String)
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  id: UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow,System.String,System.String,System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: UpdateCredentialsRow(CredentialsRow, string, string, string)
  nameWithType: IUserCredentialPlugin.UpdateCredentialsRow(CredentialsRow, string, string, string)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow, string, string, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: Update credential row.
  example: []
  syntax:
    content: void UpdateCredentialsRow(CredentialsRow row, string associateName, string value, string displayValue)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: The credentials row to apply the values on.
    - id: associateName
      type: System.String
      description: SuperOffice user-name of the user.
    - id: value
      type: System.String
      description: >-
        This is the actuall value of the credentials.  This will typically be the 

        password or teh users SID in active directory.
    - id: displayValue
      type: System.String
      description: >-
        The value displayed to the user. this will typically be the users 

        login name in active directory.
    content.vb: Sub UpdateCredentialsRow(row As CredentialsRow, associateName As String, value As String, displayValue As String)
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow*
  nameWithType.vb: IUserCredentialPlugin.UpdateCredentialsRow(CredentialsRow, String, String, String)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow(SuperOffice.CRM.Rows.CredentialsRow, String, String, String)
  name.vb: UpdateCredentialsRow(CredentialsRow, String, String, String)
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  id: GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetValue(CredentialsRow)
  nameWithType: IUserCredentialPlugin.GetValue(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: Get value (key) to the user in the foreign system.  This can also be the password.
  example: []
  syntax:
    content: string GetValue(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: The credential row to get the value from.
    return:
      type: System.String
      description: >-
        This is the actuall value of the credentials.  This will typically be 

        the password or teh users SID in active directory.
    content.vb: Function GetValue(row As CredentialsRow) As String
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  id: GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetDisplayValue(CredentialsRow)
  nameWithType: IUserCredentialPlugin.GetDisplayValue(CredentialsRow)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue(SuperOffice.CRM.Rows.CredentialsRow)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: Get the display value of the user.
  example: []
  syntax:
    content: string GetDisplayValue(CredentialsRow row)
    parameters:
    - id: row
      type: SuperOffice.CRM.Rows.CredentialsRow
      description: The credential row to get the value from.
    return:
      type: System.String
      description: >-
        The value displayed to the user. this will typically be the users 

        login name in active directory.
    content.vb: Function GetDisplayValue(row As CredentialsRow) As String
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  id: GetDefaultPriority(SuperOffice.License.UserType,System.Int32)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: GetDefaultPriority(UserType, int)
  nameWithType: IUserCredentialPlugin.GetDefaultPriority(UserType, int)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType, int)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: Get default priority for plugin.  Highest number will be the default plugin.  Password will by default be 0 as a base-line
  example: []
  syntax:
    content: int GetDefaultPriority(UserType userType, int personId)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
      description: Type of user
    - id: personId
      type: System.Int32
      description: PersonId if the user type is a person
    return:
      type: System.Int32
      description: ''
    content.vb: Function GetDefaultPriority(userType As UserType, personId As Integer) As Integer
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority*
  nameWithType.vb: IUserCredentialPlugin.GetDefaultPriority(UserType, Integer)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority(SuperOffice.License.UserType, Integer)
  name.vb: GetDefaultPriority(UserType, Integer)
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  id: AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: AddDefaultCredentialsToUser(SoUser)
  nameWithType: IUserCredentialPlugin.AddDefaultCredentialsToUser(SoUser)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser(SuperOffice.CRM.Administration.SoUser)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  syntax:
    content: void AddDefaultCredentialsToUser(SoUser user)
    parameters:
    - id: user
      type: SuperOffice.CRM.Administration.SoUser
    content.vb: Sub AddDefaultCredentialsToUser(user As SoUser)
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  id: CanHandle(SuperOffice.License.UserType)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: CanHandle(UserType)
  nameWithType: IUserCredentialPlugin.CanHandle(UserType)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle(SuperOffice.License.UserType)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: Check if the plugin can handle credentials for <xref href="SuperOffice.License.UserType" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: bool CanHandle(UserType userType)
    parameters:
    - id: userType
      type: SuperOffice.License.UserType
      description: ''
    return:
      type: System.Boolean
      description: True if the plugin can handle the <code class="paramref">userType</code>
    content.vb: Function CanHandle(userType As UserType) As Boolean
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
  id: Description
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: IUserCredentialPlugin.Description
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
  type: Property
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: >-
    Description of the authentication type.  This value is used in a list of 

    authentication providers that can be choosen by an end user and should be 

    a fairly describtive text.  This will typically be SuperOffice is responsible 

    for username and password for a password scenario.
  example: []
  syntax:
    content: string Description { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Description As String
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.Description*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
  id: DisplayType
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: DisplayType
  nameWithType: IUserCredentialPlugin.DisplayType
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
  type: Property
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: >-
    The name of the credentials to be displayed in the user interface.  

    This will typically be Password for user-name/password scenarios and 

    Active Directoru User for AD integration.
  example: []
  syntax:
    content: string DisplayType { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property DisplayType As String
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
  id: ControlType
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: ControlType
  nameWithType: IUserCredentialPlugin.ControlType
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
  type: Property
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: Type of control used to display the value.
  example: []
  syntax:
    content: CredentialControlType ControlType { get; }
    parameters: []
    return:
      type: SuperOffice.Data.CredentialControlType
    content.vb: ReadOnly Property ControlType As CredentialControlType
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
  id: IsUserNameSupported
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: IsUserNameSupported
  nameWithType: IUserCredentialPlugin.IsUserNameSupported
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
  type: Property
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: Does this plugin support the associate user name field?
  example: []
  syntax:
    content: bool IsUserNameSupported { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsUserNameSupported As Boolean
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported*
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
  commentId: P:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
  id: CanCreatePerson
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  langs:
  - csharp
  - vb
  name: CanCreatePerson
  nameWithType: IUserCredentialPlugin.CanCreatePerson
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
  type: Property
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Administration
  summary: Can the plugin create a person (that can be the bases for a user)
  example: []
  syntax:
    content: bool CanCreatePerson { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property CanCreatePerson As Boolean
  overload: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson*
references:
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
  commentId: M:SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
  parent: SuperOffice.CRM.Administration.IUserCredentialPlugin
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_CreatePerson_System_Int32_System_String_System_String_
  name: CreatePerson(int, string, string)
  nameWithType: IUserCredentialPlugin.CreatePerson(int, string, string)
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(int, string, string)
  nameWithType.vb: IUserCredentialPlugin.CreatePerson(Integer, String, String)
  fullName.vb: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(Integer, String, String)
  name.vb: CreatePerson(Integer, String, String)
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
    name: CreatePerson
    isExternal: true
    href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_CreatePerson_System_Int32_System_String_System_String_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson(System.Int32,System.String,System.String)
    name: CreatePerson
    isExternal: true
    href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_CreatePerson_System_Int32_System_String_System_String_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.CRM.Administration
  commentId: N:SuperOffice.CRM.Administration
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.CRM.Administration
  nameWithType: SuperOffice.CRM.Administration
  fullName: SuperOffice.CRM.Administration
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Administration
    name: Administration
    isExternal: true
    href: SuperOffice.CRM.Administration.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Administration
    name: Administration
    isExternal: true
    href: SuperOffice.CRM.Administration.html
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<IUserCredentialPlugin, To>(IUserCredentialPlugin)
  nameWithType: EnumUtil.MapEnums<IUserCredentialPlugin, To>(IUserCredentialPlugin)
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Administration.IUserCredentialPlugin, To>(SuperOffice.CRM.Administration.IUserCredentialPlugin)
  nameWithType.vb: EnumUtil.MapEnums(Of IUserCredentialPlugin, To)(IUserCredentialPlugin)
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Administration.IUserCredentialPlugin, To)(SuperOffice.CRM.Administration.IUserCredentialPlugin)
  name.vb: MapEnums(Of IUserCredentialPlugin, To)(IUserCredentialPlugin)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(SuperOffice.CRM.Administration.IUserCredentialPlugin)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
    name: IUserCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
    name: IUserCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(SuperOffice.CRM.Administration.IUserCredentialPlugin)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
    name: IUserCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
    name: IUserCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html
  - name: )
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<IUserCredentialPlugin, To>(IUserCredentialPlugin)
  nameWithType: Converters.MapEnums<IUserCredentialPlugin, To>(IUserCredentialPlugin)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Administration.IUserCredentialPlugin, To>(SuperOffice.CRM.Administration.IUserCredentialPlugin)
  nameWithType.vb: Converters.MapEnums(Of IUserCredentialPlugin, To)(IUserCredentialPlugin)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Administration.IUserCredentialPlugin, To)(SuperOffice.CRM.Administration.IUserCredentialPlugin)
  name.vb: MapEnums(Of IUserCredentialPlugin, To)(IUserCredentialPlugin)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.CRM.Administration.IUserCredentialPlugin)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
    name: IUserCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
    name: IUserCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.CRM.Administration.IUserCredentialPlugin)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
    name: IUserCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
    name: IUserCredentialPlugin
    isExternal: true
    href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html
  - name: )
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin
  commentId: T:SuperOffice.CRM.Administration.IUserCredentialPlugin
  parent: SuperOffice.CRM.Administration
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html
  name: IUserCredentialPlugin
  nameWithType: IUserCredentialPlugin
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  href: EnumUtil.html
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_FindGroups_System_String_
  name: FindGroups
  nameWithType: IUserCredentialPlugin.FindGroups
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindGroups
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: SuperOffice.CRM.Administration.UserCredentialGroup[]
  isExternal: true
  href: SuperOffice.CRM.Administration.UserCredentialGroup.html
  name: UserCredentialGroup[]
  nameWithType: UserCredentialGroup[]
  fullName: SuperOffice.CRM.Administration.UserCredentialGroup[]
  nameWithType.vb: UserCredentialGroup()
  fullName.vb: SuperOffice.CRM.Administration.UserCredentialGroup()
  name.vb: UserCredentialGroup()
  spec.csharp:
  - uid: SuperOffice.CRM.Administration.UserCredentialGroup
    name: UserCredentialGroup
    isExternal: true
    href: SuperOffice.CRM.Administration.UserCredentialGroup.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.CRM.Administration.UserCredentialGroup
    name: UserCredentialGroup
    isExternal: true
    href: SuperOffice.CRM.Administration.UserCredentialGroup.html
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_GetCredentialUsersInGroup_System_String_
  name: GetCredentialUsersInGroup
  nameWithType: IUserCredentialPlugin.GetCredentialUsersInGroup
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetCredentialUsersInGroup
- uid: SuperOffice.CRM.Administration.UserCredentialList
  commentId: T:SuperOffice.CRM.Administration.UserCredentialList
  parent: SuperOffice.CRM.Administration
  isExternal: true
  href: SuperOffice.CRM.Administration.UserCredentialList.html
  name: UserCredentialList
  nameWithType: UserCredentialList
  fullName: SuperOffice.CRM.Administration.UserCredentialList
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_FindCredentialUsers_System_String_
  name: FindCredentialUsers
  nameWithType: IUserCredentialPlugin.FindCredentialUsers
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.FindCredentialUsers
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_CreatePerson_System_Int32_System_String_System_String_
  name: CreatePerson
  nameWithType: IUserCredentialPlugin.CreatePerson
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CreatePerson
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: SuperOffice.CRM.Entities.Person
  commentId: T:SuperOffice.CRM.Entities.Person
  parent: SuperOffice.CRM.Entities
  isExternal: true
  href: SuperOffice.CRM.Entities.Person.html
  name: Person
  nameWithType: Person
  fullName: SuperOffice.CRM.Entities.Person
- uid: SuperOffice.CRM.Entities
  commentId: N:SuperOffice.CRM.Entities
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.CRM.Entities
  nameWithType: SuperOffice.CRM.Entities
  fullName: SuperOffice.CRM.Entities
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Entities
    name: Entities
    isExternal: true
    href: SuperOffice.CRM.Entities.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Entities
    name: Entities
    isExternal: true
    href: SuperOffice.CRM.Entities.html
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_CanChangePassword_SuperOffice_CRM_Rows_CredentialsRow_
  name: CanChangePassword
  nameWithType: IUserCredentialPlugin.CanChangePassword
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanChangePassword
- uid: SuperOffice.CRM.Rows.CredentialsRow
  commentId: T:SuperOffice.CRM.Rows.CredentialsRow
  parent: SuperOffice.CRM.Rows
  isExternal: true
  href: SuperOffice.CRM.Rows.CredentialsRow.html
  name: CredentialsRow
  nameWithType: CredentialsRow
  fullName: SuperOffice.CRM.Rows.CredentialsRow
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: SuperOffice.CRM.Rows
  commentId: N:SuperOffice.CRM.Rows
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.CRM.Rows
  nameWithType: SuperOffice.CRM.Rows
  fullName: SuperOffice.CRM.Rows
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Rows
    name: Rows
    isExternal: true
    href: SuperOffice.CRM.Rows.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Rows
    name: Rows
    isExternal: true
    href: SuperOffice.CRM.Rows.html
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetSupportedChangePasswordTypes*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetSupportedChangePasswordTypes
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_GetSupportedChangePasswordTypes_SuperOffice_CRM_Rows_CredentialsRow_
  name: GetSupportedChangePasswordTypes
  nameWithType: IUserCredentialPlugin.GetSupportedChangePasswordTypes
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetSupportedChangePasswordTypes
- uid: SuperOffice.Data.ChangePasswordType[]
  isExternal: true
  name: ChangePasswordType[]
  nameWithType: ChangePasswordType[]
  fullName: SuperOffice.Data.ChangePasswordType[]
  nameWithType.vb: ChangePasswordType()
  fullName.vb: SuperOffice.Data.ChangePasswordType()
  name.vb: ChangePasswordType()
  spec.csharp:
  - uid: SuperOffice.Data.ChangePasswordType
    name: ChangePasswordType
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.Data.ChangePasswordType
    name: ChangePasswordType
    isExternal: true
  - name: (
  - name: )
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_ChangePassword_SuperOffice_CRM_Rows_CredentialsRow_System_String_System_String_
  name: ChangePassword
  nameWithType: IUserCredentialPlugin.ChangePassword
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.ChangePassword
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.SendChangePasswordEmail*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.SendChangePasswordEmail
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_SendChangePasswordEmail_SuperOffice_CRM_Rows_CredentialsRow_
  name: SendChangePasswordEmail
  nameWithType: IUserCredentialPlugin.SendChangePasswordEmail
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.SendChangePasswordEmail
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_CanValidatePassword_SuperOffice_CRM_Rows_CredentialsRow_
  name: CanValidatePassword
  nameWithType: IUserCredentialPlugin.CanValidatePassword
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanValidatePassword
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_IsPasswordValid_SuperOffice_CRM_Rows_CredentialsRow_System_String_
  name: IsPasswordValid
  nameWithType: IUserCredentialPlugin.IsPasswordValid
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordValid
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordLegal*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordLegal
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_IsPasswordLegal_SuperOffice_CRM_Administration_SoUser_System_String_System_String__
  name: IsPasswordLegal
  nameWithType: IUserCredentialPlugin.IsPasswordLegal
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsPasswordLegal
- uid: SuperOffice.CRM.Administration.SoUser
  commentId: T:SuperOffice.CRM.Administration.SoUser
  parent: SuperOffice.CRM.Administration
  isExternal: true
  href: SuperOffice.CRM.Administration.SoUser.html
  name: SoUser
  nameWithType: SoUser
  fullName: SuperOffice.CRM.Administration.SoUser
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_UpdateCredentialsRow_SuperOffice_CRM_Rows_CredentialsRow_System_String_System_String_System_String_
  name: UpdateCredentialsRow
  nameWithType: IUserCredentialPlugin.UpdateCredentialsRow
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.UpdateCredentialsRow
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_GetValue_SuperOffice_CRM_Rows_CredentialsRow_
  name: GetValue
  nameWithType: IUserCredentialPlugin.GetValue
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetValue
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_GetDisplayValue_SuperOffice_CRM_Rows_CredentialsRow_
  name: GetDisplayValue
  nameWithType: IUserCredentialPlugin.GetDisplayValue
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDisplayValue
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_GetDefaultPriority_SuperOffice_License_UserType_System_Int32_
  name: GetDefaultPriority
  nameWithType: IUserCredentialPlugin.GetDefaultPriority
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.GetDefaultPriority
- uid: SuperOffice.License.UserType
  commentId: T:SuperOffice.License.UserType
  parent: SuperOffice.License
  isExternal: true
  name: UserType
  nameWithType: UserType
  fullName: SuperOffice.License.UserType
- uid: SuperOffice.License
  commentId: N:SuperOffice.License
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.License
  nameWithType: SuperOffice.License
  fullName: SuperOffice.License
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.License
    name: License
    isExternal: true
    href: SuperOffice.License.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.License
    name: License
    isExternal: true
    href: SuperOffice.License.html
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_AddDefaultCredentialsToUser_SuperOffice_CRM_Administration_SoUser_
  name: AddDefaultCredentialsToUser
  nameWithType: IUserCredentialPlugin.AddDefaultCredentialsToUser
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.AddDefaultCredentialsToUser
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_CanHandle_SuperOffice_License_UserType_
  name: CanHandle
  nameWithType: IUserCredentialPlugin.CanHandle
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanHandle
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.Description*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_Description
  name: Description
  nameWithType: IUserCredentialPlugin.Description
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.Description
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_DisplayType
  name: DisplayType
  nameWithType: IUserCredentialPlugin.DisplayType
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.DisplayType
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_ControlType
  name: ControlType
  nameWithType: IUserCredentialPlugin.ControlType
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.ControlType
- uid: SuperOffice.Data.CredentialControlType
  commentId: T:SuperOffice.Data.CredentialControlType
  parent: SuperOffice.Data
  isExternal: true
  href: SuperOffice.Data.CredentialControlType.html
  name: CredentialControlType
  nameWithType: CredentialControlType
  fullName: SuperOffice.Data.CredentialControlType
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Data
    name: Data
    isExternal: true
    href: SuperOffice.Data.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Data
    name: Data
    isExternal: true
    href: SuperOffice.Data.html
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_IsUserNameSupported
  name: IsUserNameSupported
  nameWithType: IUserCredentialPlugin.IsUserNameSupported
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.IsUserNameSupported
- uid: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson*
  commentId: Overload:SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
  isExternal: true
  href: SuperOffice.CRM.Administration.IUserCredentialPlugin.html#SuperOffice_CRM_Administration_IUserCredentialPlugin_CanCreatePerson
  name: CanCreatePerson
  nameWithType: IUserCredentialPlugin.CanCreatePerson
  fullName: SuperOffice.CRM.Administration.IUserCredentialPlugin.CanCreatePerson
