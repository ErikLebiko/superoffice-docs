### YamlMime:ManagedReference
items:
- uid: SuperOffice.SoContext
  commentId: T:SuperOffice.SoContext
  id: SoContext
  parent: SuperOffice
  children:
  - SuperOffice.SoContext.#ctor
  - SuperOffice.SoContext.CloseCurrentSession
  - SuperOffice.SoContext.CurrentIdentity
  - SuperOffice.SoContext.CurrentPrincipal
  - SuperOffice.SoContext.CurrentRealPrincipal
  - SuperOffice.SoContext.IsAuthenticated
  - SuperOffice.SoContext.IsUdefAvailable
  - SuperOffice.SoContext.SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0)
  - SuperOffice.SoContext.SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String)
  - SuperOffice.SoContext.SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String,System.Boolean)
  - SuperOffice.SoContext.ToString
  langs:
  - csharp
  - vb
  name: SoContext
  nameWithType: SoContext
  fullName: SuperOffice.SoContext
  type: Class
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: Class holding context information about the currently logged on user.
  example:
  - >-
    Log in and get the users home country:

    <pre><code class="lang-csharp">SoSession session = SoSession.Authenticate("user", "password");

    int countryId = SoContext.CurrentPrincipal.HomeCountryId;

    session.Close();</code></pre>
  syntax:
    content: public sealed class SoContext
    content.vb: Public NotInheritable Class SoContext
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  extensionMethods:
  - SuperOffice.SoContext.EnumUtil.MapEnums``2
  - SuperOffice.SoContext.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  - SuperOffice.SoContext.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.SoContext)
  - SuperOffice.SoContext.SuperOffice.Util.ObjectExtensions.GraphCopy``1
- uid: SuperOffice.SoContext.SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String)
  commentId: M:SuperOffice.SoContext.SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String)
  id: SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String)
  parent: SuperOffice.SoContext
  langs:
  - csharp
  - vb
  name: SpawnThread<TArgument>(AsyncOperation<TArgument>, TArgument, string)
  nameWithType: SoContext.SpawnThread<TArgument>(AsyncOperation<TArgument>, TArgument, string)
  fullName: SuperOffice.SoContext.SpawnThread<TArgument>(SuperOffice.Threading.AsyncOperation<TArgument>, TArgument, string)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: Spawn a new thread in the same <xref href="SuperOffice.SoContext" data-throw-if-not-resolved="false"></xref> as the currently executed thread.
  remarks: >-
    If the number of threads currently executing in parallel is less then the currently 

    configured maximum allowed threads for parallel execution, a thread is spawned.  If 

    the number of threads exceeds this limitation, the current thread is blocked until 

    the number of threads currently executing in parallel is less then the currently 

    configured maximum allowed threads for parallel execution.

    <p>Maximum parallel connections are read from the <xref href="SuperOffice.Configuration.ConfigFile.Threading.MaxParellalThreads" data-throw-if-not-resolved="false"></xref>

    property of the configuration file</p>
  example:
  - >-
    The method implementing the asynchronous operation needs to implement the delegate <xref href="System.ComponentModel.AsyncOperation" data-throw-if-not-resolved="false"></xref>:

    <pre><code class="lang-csharp">private void MyAsyncOperation(AsyncContext context, object argument)

    {
    	// Do some stuff...
    }</code></pre>

    The argument passed to the method is an optional argument selected when spawning off the asynchronous task:

    <pre><code class="lang-csharp">AsyncContext ctx = ThreadManager.SpawnThread(new AsyncOperation(MyAsyncOperation), argument, "MyThread");</code></pre>
  syntax:
    content: public static AsyncContext SpawnThread<TArgument>(AsyncOperation<TArgument> asyncOperation, TArgument argument, string threadName)
    parameters:
    - id: asyncOperation
      type: SuperOffice.Threading.AsyncOperation{{TArgument}}
      description: Operation executed in the new thread.
    - id: argument
      type: '{TArgument}'
      description: Argument passed to the operation executing the thread.
    - id: threadName
      type: System.String
      description: Thread name, for debugging purposes
    typeParameters:
    - id: TArgument
    return:
      type: SuperOffice.Threading.AsyncContext
      description: Information about the async operation.
    content.vb: Public Shared Function SpawnThread(Of TArgument)(asyncOperation As AsyncOperation(Of TArgument), argument As TArgument, threadName As String) As AsyncContext
  overload: SuperOffice.SoContext.SpawnThread*
  nameWithType.vb: SoContext.SpawnThread(Of TArgument)(AsyncOperation(Of TArgument), TArgument, String)
  fullName.vb: SuperOffice.SoContext.SpawnThread(Of TArgument)(SuperOffice.Threading.AsyncOperation(Of TArgument), TArgument, String)
  name.vb: SpawnThread(Of TArgument)(AsyncOperation(Of TArgument), TArgument, String)
- uid: SuperOffice.SoContext.SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0)
  commentId: M:SuperOffice.SoContext.SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0)
  id: SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0)
  parent: SuperOffice.SoContext
  langs:
  - csharp
  - vb
  name: SpawnThread<TArgument>(AsyncOperation<TArgument>, TArgument)
  nameWithType: SoContext.SpawnThread<TArgument>(AsyncOperation<TArgument>, TArgument)
  fullName: SuperOffice.SoContext.SpawnThread<TArgument>(SuperOffice.Threading.AsyncOperation<TArgument>, TArgument)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: Spawn a new thread in the same <xref href="SuperOffice.SoContext" data-throw-if-not-resolved="false"></xref> as the currently executed thread.
  remarks: >-
    If the number of threads currently executing in parallel is less then the currently 

    configured maximum allowed threads for parallel execution, a thread is spawned.  If 

    the number of threads exceeds this limitation, the current thread is blocked until 

    the number of threads currently executing in parallel is less then the currently 

    configured maximum allowed threads for parallel execution.

    <p>Maximum parallel connections are read from the <xref href="SuperOffice.Configuration.ConfigFile.Threading.MaxParellalThreads" data-throw-if-not-resolved="false"></xref>

    property of the configuration file</p>
  example:
  - >-
    The method implementing the asynchronous operation needs to implement the delegate <xref href="System.ComponentModel.AsyncOperation" data-throw-if-not-resolved="false"></xref>:

    <pre><code class="lang-csharp">private void MyAsyncOperation(AsyncContext context, object argument)

    {
    	// Do some stuff...
    }</code></pre>

    The argument passed to the method is an optional argument selected when spawning off the asynchronous task:

    <pre><code class="lang-csharp">AsyncContext ctx = ThreadManager.SpawnThread(new AsyncOperation(MyAsyncOperation), argument );</code></pre>
  syntax:
    content: public static AsyncContext SpawnThread<TArgument>(AsyncOperation<TArgument> asyncOperation, TArgument argument)
    parameters:
    - id: asyncOperation
      type: SuperOffice.Threading.AsyncOperation{{TArgument}}
      description: Operation executed in the new thread.
    - id: argument
      type: '{TArgument}'
      description: Argument passed to the operation executing the thread.
    typeParameters:
    - id: TArgument
    return:
      type: SuperOffice.Threading.AsyncContext
      description: Information about the async operation.
    content.vb: Public Shared Function SpawnThread(Of TArgument)(asyncOperation As AsyncOperation(Of TArgument), argument As TArgument) As AsyncContext
  overload: SuperOffice.SoContext.SpawnThread*
  nameWithType.vb: SoContext.SpawnThread(Of TArgument)(AsyncOperation(Of TArgument), TArgument)
  fullName.vb: SuperOffice.SoContext.SpawnThread(Of TArgument)(SuperOffice.Threading.AsyncOperation(Of TArgument), TArgument)
  name.vb: SpawnThread(Of TArgument)(AsyncOperation(Of TArgument), TArgument)
- uid: SuperOffice.SoContext.SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String,System.Boolean)
  commentId: M:SuperOffice.SoContext.SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String,System.Boolean)
  id: SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String,System.Boolean)
  parent: SuperOffice.SoContext
  langs:
  - csharp
  - vb
  name: SpawnThread<TArgument>(AsyncOperation<TArgument>, TArgument, string, bool)
  nameWithType: SoContext.SpawnThread<TArgument>(AsyncOperation<TArgument>, TArgument, string, bool)
  fullName: SuperOffice.SoContext.SpawnThread<TArgument>(SuperOffice.Threading.AsyncOperation<TArgument>, TArgument, string, bool)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: Spawn a new thread in the same <xref href="SuperOffice.SoContext" data-throw-if-not-resolved="false"></xref> as the currently executed thread.
  remarks: >-
    If the number of threads currently executing in parallel is less then the currently 

    configured maximum allowed threads for parallel execution, a thread is spawned.  If 

    the number of threads exceeds this limitation, the current thread is blocked until 

    the number of threads currently executing in parallel is less then the currently 

    configured maximum allowed threads for parallel execution.

    <p>Maximum parallel connections are read from the <xref href="SuperOffice.Configuration.ConfigFile.Threading.MaxParellalThreads" data-throw-if-not-resolved="false"></xref>

    property of the configuration file</p>
  example:
  - >-
    The method implementing the asynchronous operation needs to implement the delegate <xref href="System.ComponentModel.AsyncOperation" data-throw-if-not-resolved="false"></xref>:

    <pre><code class="lang-csharp">private void MyAsyncOperation(AsyncContext context, object argument)

    {
    	// Do some stuff...
    }</code></pre>

    The argument passed to the method is an optional argument selected when spawning off the asynchronous task:

    <pre><code class="lang-csharp">AsyncContext ctx = ThreadManager.SpawnThread(new AsyncOperation(MyAsyncOperation), argument );</code></pre>
  syntax:
    content: public static AsyncContext SpawnThread<TArgument>(AsyncOperation<TArgument> asyncOperation, TArgument argument, string threadName, bool breakOnError)
    parameters:
    - id: asyncOperation
      type: SuperOffice.Threading.AsyncOperation{{TArgument}}
      description: Operation executed in the new thread.
    - id: argument
      type: '{TArgument}'
      description: Argument passed to the operation executing the thread.
    - id: threadName
      type: System.String
      description: Thread name, for debugging purposes
    - id: breakOnError
      type: System.Boolean
      description: Shall the attached debugger break on errors executing the thread.
    typeParameters:
    - id: TArgument
    return:
      type: SuperOffice.Threading.AsyncContext
      description: Information about the async operation.
    content.vb: Public Shared Function SpawnThread(Of TArgument)(asyncOperation As AsyncOperation(Of TArgument), argument As TArgument, threadName As String, breakOnError As Boolean) As AsyncContext
  overload: SuperOffice.SoContext.SpawnThread*
  nameWithType.vb: SoContext.SpawnThread(Of TArgument)(AsyncOperation(Of TArgument), TArgument, String, Boolean)
  fullName.vb: SuperOffice.SoContext.SpawnThread(Of TArgument)(SuperOffice.Threading.AsyncOperation(Of TArgument), TArgument, String, Boolean)
  name.vb: SpawnThread(Of TArgument)(AsyncOperation(Of TArgument), TArgument, String, Boolean)
- uid: SuperOffice.SoContext.CloseCurrentSession
  commentId: M:SuperOffice.SoContext.CloseCurrentSession
  id: CloseCurrentSession
  parent: SuperOffice.SoContext
  langs:
  - csharp
  - vb
  name: CloseCurrentSession()
  nameWithType: SoContext.CloseCurrentSession()
  fullName: SuperOffice.SoContext.CloseCurrentSession()
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: >-
    Close any open session.

    Does nothing if the current session is already closed.
  remarks: Will no longer throw an exception if called twice.
  example: []
  syntax:
    content: public static void CloseCurrentSession()
    content.vb: Public Shared Sub CloseCurrentSession()
  overload: SuperOffice.SoContext.CloseCurrentSession*
- uid: SuperOffice.SoContext.ToString
  commentId: M:SuperOffice.SoContext.ToString
  id: ToString
  parent: SuperOffice.SoContext
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SoContext.ToString()
  fullName: SuperOffice.SoContext.ToString()
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: >-
    If there is a valid principal, return his ToString() - generally for debug purposes. An empty string

    is returned if there is no valid principal (_currentPrincipal returned null).
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: Current principal's ToString, or string.Empty if the current <xref href="SuperOffice.Security.Principal.SoPrincipal" data-throw-if-not-resolved="false"></xref> is null
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: SuperOffice.SoContext.ToString*
- uid: SuperOffice.SoContext.#ctor
  commentId: M:SuperOffice.SoContext.#ctor
  id: '#ctor'
  parent: SuperOffice.SoContext
  langs:
  - csharp
  - vb
  name: SoContext()
  nameWithType: SoContext.SoContext()
  fullName: SuperOffice.SoContext.SoContext()
  type: Constructor
  assemblies:
  - SoCore
  namespace: SuperOffice
  syntax:
    content: public SoContext()
    content.vb: Public Sub New()
  overload: SuperOffice.SoContext.#ctor*
  nameWithType.vb: SoContext.New()
  fullName.vb: SuperOffice.SoContext.New()
  name.vb: New()
- uid: SuperOffice.SoContext.CurrentPrincipal
  commentId: P:SuperOffice.SoContext.CurrentPrincipal
  id: CurrentPrincipal
  parent: SuperOffice.SoContext
  langs:
  - csharp
  - vb
  name: CurrentPrincipal
  nameWithType: SoContext.CurrentPrincipal
  fullName: SuperOffice.SoContext.CurrentPrincipal
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: Obtain the current principal
  example: []
  syntax:
    content: public static SoPrincipal CurrentPrincipal { get; }
    parameters: []
    return:
      type: SuperOffice.Security.Principal.SoPrincipal
    content.vb: Public Shared ReadOnly Property CurrentPrincipal As SoPrincipal
  overload: SuperOffice.SoContext.CurrentPrincipal*
- uid: SuperOffice.SoContext.CurrentRealPrincipal
  commentId: P:SuperOffice.SoContext.CurrentRealPrincipal
  id: CurrentRealPrincipal
  parent: SuperOffice.SoContext
  langs:
  - csharp
  - vb
  name: CurrentRealPrincipal
  nameWithType: SoContext.CurrentRealPrincipal
  fullName: SuperOffice.SoContext.CurrentRealPrincipal
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: Root principal.  Impersonated users will yield the principal of the user impersonating.
  example: []
  syntax:
    content: public static SoPrincipal CurrentRealPrincipal { get; }
    parameters: []
    return:
      type: SuperOffice.Security.Principal.SoPrincipal
    content.vb: Public Shared ReadOnly Property CurrentRealPrincipal As SoPrincipal
  overload: SuperOffice.SoContext.CurrentRealPrincipal*
- uid: SuperOffice.SoContext.CurrentIdentity
  commentId: P:SuperOffice.SoContext.CurrentIdentity
  id: CurrentIdentity
  parent: SuperOffice.SoContext
  langs:
  - csharp
  - vb
  name: CurrentIdentity
  nameWithType: SoContext.CurrentIdentity
  fullName: SuperOffice.SoContext.CurrentIdentity
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: Obtain the current identity
  example: []
  syntax:
    content: public static ISoIdentity CurrentIdentity { get; }
    parameters: []
    return:
      type: SuperOffice.Security.Principal.ISoIdentity
    content.vb: Public Shared ReadOnly Property CurrentIdentity As ISoIdentity
  overload: SuperOffice.SoContext.CurrentIdentity*
- uid: SuperOffice.SoContext.IsUdefAvailable
  commentId: P:SuperOffice.SoContext.IsUdefAvailable
  id: IsUdefAvailable
  parent: SuperOffice.SoContext
  langs:
  - csharp
  - vb
  name: IsUdefAvailable
  nameWithType: SoContext.IsUdefAvailable
  fullName: SuperOffice.SoContext.IsUdefAvailable
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: Should archive providers add Udefs
  example: []
  syntax:
    content: public static bool IsUdefAvailable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property IsUdefAvailable As Boolean
  overload: SuperOffice.SoContext.IsUdefAvailable*
- uid: SuperOffice.SoContext.IsAuthenticated
  commentId: P:SuperOffice.SoContext.IsAuthenticated
  id: IsAuthenticated
  parent: SuperOffice.SoContext
  langs:
  - csharp
  - vb
  name: IsAuthenticated
  nameWithType: SoContext.IsAuthenticated
  fullName: SuperOffice.SoContext.IsAuthenticated
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice
  summary: True if authenticated
  example: []
  syntax:
    content: public static bool IsAuthenticated { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property IsAuthenticated As Boolean
  overload: SuperOffice.SoContext.IsAuthenticated*
references:
- uid: SuperOffice
  commentId: N:SuperOffice
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice
  nameWithType: SuperOffice
  fullName: SuperOffice
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: SuperOffice.SoContext.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<SoContext, To>(SoContext)
  nameWithType: EnumUtil.MapEnums<SoContext, To>(SoContext)
  fullName: EnumUtil.MapEnums<SuperOffice.SoContext, To>(SuperOffice.SoContext)
  nameWithType.vb: EnumUtil.MapEnums(Of SoContext, To)(SoContext)
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.SoContext, To)(SuperOffice.SoContext)
  name.vb: MapEnums(Of SoContext, To)(SoContext)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(SuperOffice.SoContext)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(SuperOffice.SoContext)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: )
- uid: SuperOffice.SoContext.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<SoContext, To>(SoContext)
  nameWithType: Converters.MapEnums<SoContext, To>(SoContext)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.SoContext, To>(SuperOffice.SoContext)
  nameWithType.vb: Converters.MapEnums(Of SoContext, To)(SoContext)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.SoContext, To)(SuperOffice.SoContext)
  name.vb: MapEnums(Of SoContext, To)(SoContext)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.SoContext)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.SoContext)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: )
- uid: SuperOffice.SoContext.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.SoContext)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  name: AssignByReflection<SoContext>(SoContext, SoContext)
  nameWithType: ObjectExtensions.AssignByReflection<SoContext>(SoContext, SoContext)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.SoContext>(SuperOffice.SoContext, SuperOffice.SoContext)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of SoContext)(SoContext, SoContext)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.SoContext)(SuperOffice.SoContext, SuperOffice.SoContext)
  name.vb: AssignByReflection(Of SoContext)(SoContext, SoContext)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.SoContext,SuperOffice.SoContext)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: <
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: '>'
  - name: (
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: ','
  - name: " "
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.SoContext,SuperOffice.SoContext)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: )
  - name: (
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: ','
  - name: " "
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: )
- uid: SuperOffice.SoContext.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  name: GraphCopy<SoContext>(SoContext)
  nameWithType: ObjectExtensions.GraphCopy<SoContext>(SoContext)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.SoContext>(SuperOffice.SoContext)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of SoContext)(SoContext)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.SoContext)(SuperOffice.SoContext)
  name.vb: GraphCopy(Of SoContext)(SoContext)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(SuperOffice.SoContext)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: <
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: '>'
  - name: (
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(SuperOffice.SoContext)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: )
  - name: (
  - uid: SuperOffice.SoContext
    name: SoContext
    isExternal: true
    href: SuperOffice.SoContext.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  href: EnumUtil.html
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Util
    name: Util
    isExternal: true
    href: SuperOffice.Util.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Util
    name: Util
    isExternal: true
    href: SuperOffice.Util.html
- uid: SuperOffice.SoContext
  commentId: T:SuperOffice.SoContext
  isExternal: true
  href: SuperOffice.SoContext.html
  name: SoContext
  nameWithType: SoContext
  fullName: SuperOffice.SoContext
- uid: SuperOffice.Configuration.ConfigFile.Threading.MaxParellalThreads
  commentId: P:SuperOffice.Configuration.ConfigFile.Threading.MaxParellalThreads
  isExternal: true
  href: SuperOffice.Configuration.ConfigFile.Threading.html#SuperOffice_Configuration_ConfigFile_Threading_MaxParellalThreads
  name: MaxParellalThreads
  nameWithType: ConfigFile.Threading.MaxParellalThreads
  fullName: SuperOffice.Configuration.ConfigFile.Threading.MaxParellalThreads
- uid: System.ComponentModel.AsyncOperation
  commentId: T:System.ComponentModel.AsyncOperation
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.componentmodel.asyncoperation
  name: AsyncOperation
  nameWithType: AsyncOperation
  fullName: System.ComponentModel.AsyncOperation
- uid: SuperOffice.SoContext.SpawnThread*
  commentId: Overload:SuperOffice.SoContext.SpawnThread
  isExternal: true
  href: SuperOffice.SoContext.html#SuperOffice_SoContext_SpawnThread__1_SuperOffice_Threading_AsyncOperation___0____0_System_String_
  name: SpawnThread
  nameWithType: SoContext.SpawnThread
  fullName: SuperOffice.SoContext.SpawnThread
- uid: SuperOffice.Threading.AsyncOperation{{TArgument}}
  commentId: T:SuperOffice.Threading.AsyncOperation{``0}
  parent: SuperOffice.Threading
  definition: SuperOffice.Threading.AsyncOperation`1
  href: SuperOffice.Threading.AsyncOperation-1.html
  name: AsyncOperation<TArgument>
  nameWithType: AsyncOperation<TArgument>
  fullName: SuperOffice.Threading.AsyncOperation<TArgument>
  nameWithType.vb: AsyncOperation(Of TArgument)
  fullName.vb: SuperOffice.Threading.AsyncOperation(Of TArgument)
  name.vb: AsyncOperation(Of TArgument)
  spec.csharp:
  - uid: SuperOffice.Threading.AsyncOperation`1
    name: AsyncOperation
    isExternal: true
    href: SuperOffice.Threading.AsyncOperation-1.html
  - name: <
  - name: TArgument
  - name: '>'
  spec.vb:
  - uid: SuperOffice.Threading.AsyncOperation`1
    name: AsyncOperation
    isExternal: true
    href: SuperOffice.Threading.AsyncOperation-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TArgument
  - name: )
- uid: '{TArgument}'
  commentId: '!:TArgument'
  definition: TArgument
  name: TArgument
  nameWithType: TArgument
  fullName: TArgument
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: SuperOffice.Threading.AsyncContext
  commentId: T:SuperOffice.Threading.AsyncContext
  parent: SuperOffice.Threading
  isExternal: true
  href: SuperOffice.Threading.AsyncContext.html
  name: AsyncContext
  nameWithType: AsyncContext
  fullName: SuperOffice.Threading.AsyncContext
- uid: SuperOffice.Threading.AsyncOperation`1
  commentId: T:SuperOffice.Threading.AsyncOperation`1
  isExternal: true
  href: SuperOffice.Threading.AsyncOperation-1.html
  name: AsyncOperation<TArgument>
  nameWithType: AsyncOperation<TArgument>
  fullName: SuperOffice.Threading.AsyncOperation<TArgument>
  nameWithType.vb: AsyncOperation(Of TArgument)
  fullName.vb: SuperOffice.Threading.AsyncOperation(Of TArgument)
  name.vb: AsyncOperation(Of TArgument)
  spec.csharp:
  - uid: SuperOffice.Threading.AsyncOperation`1
    name: AsyncOperation
    isExternal: true
    href: SuperOffice.Threading.AsyncOperation-1.html
  - name: <
  - name: TArgument
  - name: '>'
  spec.vb:
  - uid: SuperOffice.Threading.AsyncOperation`1
    name: AsyncOperation
    isExternal: true
    href: SuperOffice.Threading.AsyncOperation-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TArgument
  - name: )
- uid: SuperOffice.Threading
  commentId: N:SuperOffice.Threading
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Threading
  nameWithType: SuperOffice.Threading
  fullName: SuperOffice.Threading
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Threading
    name: Threading
    isExternal: true
    href: SuperOffice.Threading.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Threading
    name: Threading
    isExternal: true
    href: SuperOffice.Threading.html
- uid: TArgument
  name: TArgument
  nameWithType: TArgument
  fullName: TArgument
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: SuperOffice.SoContext.CloseCurrentSession*
  commentId: Overload:SuperOffice.SoContext.CloseCurrentSession
  isExternal: true
  href: SuperOffice.SoContext.html#SuperOffice_SoContext_CloseCurrentSession
  name: CloseCurrentSession
  nameWithType: SoContext.CloseCurrentSession
  fullName: SuperOffice.SoContext.CloseCurrentSession
- uid: SuperOffice.Security.Principal.SoPrincipal
  commentId: T:SuperOffice.Security.Principal.SoPrincipal
  parent: SuperOffice.Security.Principal
  isExternal: true
  href: SuperOffice.Security.Principal.SoPrincipal.html
  name: SoPrincipal
  nameWithType: SoPrincipal
  fullName: SuperOffice.Security.Principal.SoPrincipal
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: SuperOffice.SoContext.ToString*
  commentId: Overload:SuperOffice.SoContext.ToString
  isExternal: true
  href: SuperOffice.SoContext.html#SuperOffice_SoContext_ToString
  name: ToString
  nameWithType: SoContext.ToString
  fullName: SuperOffice.SoContext.ToString
- uid: SuperOffice.Security.Principal
  commentId: N:SuperOffice.Security.Principal
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Security.Principal
  nameWithType: SuperOffice.Security.Principal
  fullName: SuperOffice.Security.Principal
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Security
    name: Security
    isExternal: true
    href: SuperOffice.Security.html
  - name: .
  - uid: SuperOffice.Security.Principal
    name: Principal
    isExternal: true
    href: SuperOffice.Security.Principal.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Security
    name: Security
    isExternal: true
    href: SuperOffice.Security.html
  - name: .
  - uid: SuperOffice.Security.Principal
    name: Principal
    isExternal: true
    href: SuperOffice.Security.Principal.html
- uid: SuperOffice.SoContext.#ctor*
  commentId: Overload:SuperOffice.SoContext.#ctor
  isExternal: true
  href: SuperOffice.SoContext.html#SuperOffice_SoContext__ctor
  name: SoContext
  nameWithType: SoContext.SoContext
  fullName: SuperOffice.SoContext.SoContext
  nameWithType.vb: SoContext.New
  fullName.vb: SuperOffice.SoContext.New
  name.vb: New
- uid: SuperOffice.SoContext.CurrentPrincipal*
  commentId: Overload:SuperOffice.SoContext.CurrentPrincipal
  isExternal: true
  href: SuperOffice.SoContext.html#SuperOffice_SoContext_CurrentPrincipal
  name: CurrentPrincipal
  nameWithType: SoContext.CurrentPrincipal
  fullName: SuperOffice.SoContext.CurrentPrincipal
- uid: SuperOffice.SoContext.CurrentRealPrincipal*
  commentId: Overload:SuperOffice.SoContext.CurrentRealPrincipal
  isExternal: true
  href: SuperOffice.SoContext.html#SuperOffice_SoContext_CurrentRealPrincipal
  name: CurrentRealPrincipal
  nameWithType: SoContext.CurrentRealPrincipal
  fullName: SuperOffice.SoContext.CurrentRealPrincipal
- uid: SuperOffice.SoContext.CurrentIdentity*
  commentId: Overload:SuperOffice.SoContext.CurrentIdentity
  isExternal: true
  href: SuperOffice.SoContext.html#SuperOffice_SoContext_CurrentIdentity
  name: CurrentIdentity
  nameWithType: SoContext.CurrentIdentity
  fullName: SuperOffice.SoContext.CurrentIdentity
- uid: SuperOffice.Security.Principal.ISoIdentity
  commentId: T:SuperOffice.Security.Principal.ISoIdentity
  parent: SuperOffice.Security.Principal
  isExternal: true
  href: SuperOffice.Security.Principal.ISoIdentity.html
  name: ISoIdentity
  nameWithType: ISoIdentity
  fullName: SuperOffice.Security.Principal.ISoIdentity
- uid: SuperOffice.SoContext.IsUdefAvailable*
  commentId: Overload:SuperOffice.SoContext.IsUdefAvailable
  isExternal: true
  href: SuperOffice.SoContext.html#SuperOffice_SoContext_IsUdefAvailable
  name: IsUdefAvailable
  nameWithType: SoContext.IsUdefAvailable
  fullName: SuperOffice.SoContext.IsUdefAvailable
- uid: SuperOffice.SoContext.IsAuthenticated*
  commentId: Overload:SuperOffice.SoContext.IsAuthenticated
  isExternal: true
  href: SuperOffice.SoContext.html#SuperOffice_SoContext_IsAuthenticated
  name: IsAuthenticated
  nameWithType: SoContext.IsAuthenticated
  fullName: SuperOffice.SoContext.IsAuthenticated
