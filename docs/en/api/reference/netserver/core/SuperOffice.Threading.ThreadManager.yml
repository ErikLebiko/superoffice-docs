### YamlMime:ManagedReference
items:
- uid: SuperOffice.Threading.ThreadManager
  commentId: T:SuperOffice.Threading.ThreadManager
  id: ThreadManager
  parent: SuperOffice.Threading
  children:
  - SuperOffice.Threading.ThreadManager.BeginIgnoreRowSentry
  - SuperOffice.Threading.ThreadManager.BeginIgnoreSentry
  - SuperOffice.Threading.ThreadManager.BeginPreventParallelism
  - SuperOffice.Threading.ThreadManager.HasReachedMaxThreads
  - SuperOffice.Threading.ThreadManager.IgnoreRowSentry
  - SuperOffice.Threading.ThreadManager.IgnoreSentry
  - SuperOffice.Threading.ThreadManager.Invoke(System.Action[])
  - SuperOffice.Threading.ThreadManager.IsWorkerThread
  - SuperOffice.Threading.ThreadManager.MaxThreads
  - SuperOffice.Threading.ThreadManager.RegisterAsyncContextProvider``2(SuperOffice.Threading.GetThreadState{``0},SuperOffice.Threading.SetThreadState{``0,``1},SuperOffice.Threading.CleanupThreadState{``0,``1})
  - SuperOffice.Threading.ThreadManager.RunningThreadCount
  - SuperOffice.Threading.ThreadManager.SingleThreadMode
  - SuperOffice.Threading.ThreadManager.SpawnThreadOrExecuteSync``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String)
  - SuperOffice.Threading.ThreadManager.SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String,System.Boolean,System.Boolean,System.Boolean)
  - SuperOffice.Threading.ThreadManager.StartNew(System.Action,System.Boolean)
  - SuperOffice.Threading.ThreadManager.StartNew(System.Action,System.String,System.Boolean)
  - SuperOffice.Threading.ThreadManager.StartNew``1(``0,System.Action{``0},System.Boolean)
  - SuperOffice.Threading.ThreadManager.StartNew``1(``0,System.Action{``0},System.String,System.Boolean)
  - SuperOffice.Threading.ThreadManager.WaitForAllOperationsInDatabaseContextToComplete
  - SuperOffice.Threading.ThreadManager.WaitForAllOperationsToComplete
  - SuperOffice.Threading.ThreadManager.WaitForAllOperationsToComplete(System.Int32,System.Boolean)
  - SuperOffice.Threading.ThreadManager.WaitForOperationsToComplete(SuperOffice.Threading.AsyncContext[])
  - SuperOffice.Threading.ThreadManager.WaitForOperationsToComplete(System.Int32,SuperOffice.Threading.AsyncContext[])
  - SuperOffice.Threading.ThreadManager._maxSimultaneousThreads
  - SuperOffice.Threading.ThreadManager._threadOverflows
  - SuperOffice.Threading.ThreadManager._threadOverflowsForced
  langs:
  - csharp
  - vb
  name: ThreadManager
  nameWithType: ThreadManager
  fullName: SuperOffice.Threading.ThreadManager
  type: Class
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: Thread handler for asynchronous operations
  remarks: >-
    Use SpawnThread&lt;TArgument&gt;(AsyncOperation&lt;TArgument&gt;,TArgument) to start a new thread in the same 

    <xref href="SuperOffice.SoContext" data-throw-if-not-resolved="false"></xref> as the current thread.
  example: []
  syntax:
    content: public static class ThreadManager
    content.vb: Public Module ThreadManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: SuperOffice.Threading.ThreadManager._threadOverflows
  commentId: F:SuperOffice.Threading.ThreadManager._threadOverflows
  id: _threadOverflows
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: _threadOverflows
  nameWithType: ThreadManager._threadOverflows
  fullName: SuperOffice.Threading.ThreadManager._threadOverflows
  type: Field
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  syntax:
    content: public static int _threadOverflows
    return:
      type: System.Int32
    content.vb: Public Shared _threadOverflows As Integer
- uid: SuperOffice.Threading.ThreadManager._threadOverflowsForced
  commentId: F:SuperOffice.Threading.ThreadManager._threadOverflowsForced
  id: _threadOverflowsForced
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: _threadOverflowsForced
  nameWithType: ThreadManager._threadOverflowsForced
  fullName: SuperOffice.Threading.ThreadManager._threadOverflowsForced
  type: Field
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  syntax:
    content: public static int _threadOverflowsForced
    return:
      type: System.Int32
    content.vb: Public Shared _threadOverflowsForced As Integer
- uid: SuperOffice.Threading.ThreadManager._maxSimultaneousThreads
  commentId: F:SuperOffice.Threading.ThreadManager._maxSimultaneousThreads
  id: _maxSimultaneousThreads
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: _maxSimultaneousThreads
  nameWithType: ThreadManager._maxSimultaneousThreads
  fullName: SuperOffice.Threading.ThreadManager._maxSimultaneousThreads
  type: Field
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  syntax:
    content: public static int _maxSimultaneousThreads
    return:
      type: System.Int32
    content.vb: Public Shared _maxSimultaneousThreads As Integer
- uid: SuperOffice.Threading.ThreadManager.RegisterAsyncContextProvider``2(SuperOffice.Threading.GetThreadState{``0},SuperOffice.Threading.SetThreadState{``0,``1},SuperOffice.Threading.CleanupThreadState{``0,``1})
  commentId: M:SuperOffice.Threading.ThreadManager.RegisterAsyncContextProvider``2(SuperOffice.Threading.GetThreadState{``0},SuperOffice.Threading.SetThreadState{``0,``1},SuperOffice.Threading.CleanupThreadState{``0,``1})
  id: RegisterAsyncContextProvider``2(SuperOffice.Threading.GetThreadState{``0},SuperOffice.Threading.SetThreadState{``0,``1},SuperOffice.Threading.CleanupThreadState{``0,``1})
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: RegisterAsyncContextProvider<TThreadState, TThreadCleanupState>(GetThreadState<TThreadState>, SetThreadState<TThreadState, TThreadCleanupState>, CleanupThreadState<TThreadState, TThreadCleanupState>)
  nameWithType: ThreadManager.RegisterAsyncContextProvider<TThreadState, TThreadCleanupState>(GetThreadState<TThreadState>, SetThreadState<TThreadState, TThreadCleanupState>, CleanupThreadState<TThreadState, TThreadCleanupState>)
  fullName: SuperOffice.Threading.ThreadManager.RegisterAsyncContextProvider<TThreadState, TThreadCleanupState>(SuperOffice.Threading.GetThreadState<TThreadState>, SuperOffice.Threading.SetThreadState<TThreadState, TThreadCleanupState>, SuperOffice.Threading.CleanupThreadState<TThreadState, TThreadCleanupState>)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: Register methods for passing state from calling thread to created threads.
  example: []
  syntax:
    content: public static void RegisterAsyncContextProvider<TThreadState, TThreadCleanupState>(GetThreadState<TThreadState> getThreadState, SetThreadState<TThreadState, TThreadCleanupState> setThreadState, CleanupThreadState<TThreadState, TThreadCleanupState> cleanupThreadState)
    parameters:
    - id: getThreadState
      type: SuperOffice.Threading.GetThreadState{{TThreadState}}
      description: Method called in calling thread initiating new thread to obtain state that can be passed on to the new thread.
    - id: setThreadState
      type: SuperOffice.Threading.SetThreadState{{TThreadState},{TThreadCleanupState}}
      description: Apply state on new thread.
    - id: cleanupThreadState
      type: SuperOffice.Threading.CleanupThreadState{{TThreadState},{TThreadCleanupState}}
      description: Clean up state applied on new thread, so it can be re-used later.
    typeParameters:
    - id: TThreadState
      description: State passed between calling thread and newly started thread.
    - id: TThreadCleanupState
      description: State pased from initilaizing new thread to clean-up code.
    content.vb: Public Shared Sub RegisterAsyncContextProvider(Of TThreadState, TThreadCleanupState)(getThreadState As GetThreadState(Of TThreadState), setThreadState As SetThreadState(Of TThreadState, TThreadCleanupState), cleanupThreadState As CleanupThreadState(Of TThreadState, TThreadCleanupState))
  overload: SuperOffice.Threading.ThreadManager.RegisterAsyncContextProvider*
  nameWithType.vb: ThreadManager.RegisterAsyncContextProvider(Of TThreadState, TThreadCleanupState)(GetThreadState(Of TThreadState), SetThreadState(Of TThreadState, TThreadCleanupState), CleanupThreadState(Of TThreadState, TThreadCleanupState))
  fullName.vb: SuperOffice.Threading.ThreadManager.RegisterAsyncContextProvider(Of TThreadState, TThreadCleanupState)(SuperOffice.Threading.GetThreadState(Of TThreadState), SuperOffice.Threading.SetThreadState(Of TThreadState, TThreadCleanupState), SuperOffice.Threading.CleanupThreadState(Of TThreadState, TThreadCleanupState))
  name.vb: RegisterAsyncContextProvider(Of TThreadState, TThreadCleanupState)(GetThreadState(Of TThreadState), SetThreadState(Of TThreadState, TThreadCleanupState), CleanupThreadState(Of TThreadState, TThreadCleanupState))
- uid: SuperOffice.Threading.ThreadManager.BeginPreventParallelism
  commentId: M:SuperOffice.Threading.ThreadManager.BeginPreventParallelism
  id: BeginPreventParallelism
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: BeginPreventParallelism()
  nameWithType: ThreadManager.BeginPreventParallelism()
  fullName: SuperOffice.Threading.ThreadManager.BeginPreventParallelism()
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: >-
    Temporary enter a state where all parallel operations started from 

    the current thread is executed syncroniously.  Call using a <code>using (ThreadManager.BeginPreventParallelism()){...}</code> constrinction.
  example: []
  syntax:
    content: >-
      [Obsolete("Incompatible with async/await and not in much use. Planned for removal.")]

      public static ThreadManager.ForceSingleThreadHelper BeginPreventParallelism()
    return:
      type: SuperOffice.Threading.ThreadManager.ForceSingleThreadHelper
      description: Disposable object.
    content.vb: >-
      <Obsolete("Incompatible with async/await and not in much use. Planned for removal.")>

      Public Shared Function BeginPreventParallelism() As ThreadManager.ForceSingleThreadHelper
  overload: SuperOffice.Threading.ThreadManager.BeginPreventParallelism*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Incompatible with async/await and not in much use. Planned for removal.
- uid: SuperOffice.Threading.ThreadManager.IgnoreRowSentry
  commentId: M:SuperOffice.Threading.ThreadManager.IgnoreRowSentry
  id: IgnoreRowSentry
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: IgnoreRowSentry()
  nameWithType: ThreadManager.IgnoreRowSentry()
  fullName: SuperOffice.Threading.ThreadManager.IgnoreRowSentry()
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: Thread-static, principal-independent "should row sentry be ignored if possible"
  example: []
  syntax:
    content: >-
      [Obsolete("Incompatible with async/await. Use SuperOffice.CRM.Security.Sentry.IgnoreRowSentry() instead.")]

      public static bool IgnoreRowSentry()
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Obsolete("Incompatible with async/await. Use SuperOffice.CRM.Security.Sentry.IgnoreRowSentry() instead.")>

      Public Shared Function IgnoreRowSentry() As Boolean
  overload: SuperOffice.Threading.ThreadManager.IgnoreRowSentry*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Incompatible with async/await. Use SuperOffice.CRM.Security.Sentry.IgnoreRowSentry() instead.
- uid: SuperOffice.Threading.ThreadManager.BeginIgnoreRowSentry
  commentId: M:SuperOffice.Threading.ThreadManager.BeginIgnoreRowSentry
  id: BeginIgnoreRowSentry
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: BeginIgnoreRowSentry()
  nameWithType: ThreadManager.BeginIgnoreRowSentry()
  fullName: SuperOffice.Threading.ThreadManager.BeginIgnoreRowSentry()
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  syntax:
    content: >-
      [Obsolete("Incompatible with async/await. Use SuperOffice.CRM.Security.Sentry.BeginIgnoreRowSentry() instead.")]

      public static ThreadManager.IgnoreRowSentryModifier BeginIgnoreRowSentry()
    return:
      type: SuperOffice.Threading.ThreadManager.IgnoreRowSentryModifier
    content.vb: >-
      <Obsolete("Incompatible with async/await. Use SuperOffice.CRM.Security.Sentry.BeginIgnoreRowSentry() instead.")>

      Public Shared Function BeginIgnoreRowSentry() As ThreadManager.IgnoreRowSentryModifier
  overload: SuperOffice.Threading.ThreadManager.BeginIgnoreRowSentry*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Incompatible with async/await. Use SuperOffice.CRM.Security.Sentry.BeginIgnoreRowSentry() instead.
- uid: SuperOffice.Threading.ThreadManager.IgnoreSentry
  commentId: M:SuperOffice.Threading.ThreadManager.IgnoreSentry
  id: IgnoreSentry
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: IgnoreSentry()
  nameWithType: ThreadManager.IgnoreSentry()
  fullName: SuperOffice.Threading.ThreadManager.IgnoreSentry()
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: Thread-static, principal-independent "should sentry be ignored"
  example: []
  syntax:
    content: >-
      [Obsolete("Incompatible with async/await. Use SuperOffice.CRM.Security.Sentry.IgnoreSentry() instead.")]

      public static bool IgnoreSentry()
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <Obsolete("Incompatible with async/await. Use SuperOffice.CRM.Security.Sentry.IgnoreSentry() instead.")>

      Public Shared Function IgnoreSentry() As Boolean
  overload: SuperOffice.Threading.ThreadManager.IgnoreSentry*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Incompatible with async/await. Use SuperOffice.CRM.Security.Sentry.IgnoreSentry() instead.
- uid: SuperOffice.Threading.ThreadManager.BeginIgnoreSentry
  commentId: M:SuperOffice.Threading.ThreadManager.BeginIgnoreSentry
  id: BeginIgnoreSentry
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: BeginIgnoreSentry()
  nameWithType: ThreadManager.BeginIgnoreSentry()
  fullName: SuperOffice.Threading.ThreadManager.BeginIgnoreSentry()
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  syntax:
    content: >-
      [Obsolete("Incompatible with async/await. Use SuperOffice.CRM.Security.Sentry.BeginIgnoreSentry() instead.")]

      public static ThreadManager.IgnoreSentryModifier BeginIgnoreSentry()
    return:
      type: SuperOffice.Threading.ThreadManager.IgnoreSentryModifier
    content.vb: >-
      <Obsolete("Incompatible with async/await. Use SuperOffice.CRM.Security.Sentry.BeginIgnoreSentry() instead.")>

      Public Shared Function BeginIgnoreSentry() As ThreadManager.IgnoreSentryModifier
  overload: SuperOffice.Threading.ThreadManager.BeginIgnoreSentry*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Incompatible with async/await. Use SuperOffice.CRM.Security.Sentry.BeginIgnoreSentry() instead.
- uid: SuperOffice.Threading.ThreadManager.Invoke(System.Action[])
  commentId: M:SuperOffice.Threading.ThreadManager.Invoke(System.Action[])
  id: Invoke(System.Action[])
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: Invoke(params Action[])
  nameWithType: ThreadManager.Invoke(params Action[])
  fullName: SuperOffice.Threading.ThreadManager.Invoke(params System.Action[])
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: Invoke the given actions in parallel, and return when they're all done
  remarks: >-
    No synchronization logic is performed between actions, so they have to either be independent

    or synchronized on their own.

    <p></p>

    Early-out logic handles cases of null, 0, or 1 items in the Action array. If single-thread

    mode is active, actions are called in sequence (in array order).

    <p></p>

    Fully concurrent execution is <b>NOT</b> guaranteed - throttling, thread count limits,

    single-thread mode or other factors (such as hardware!) will influence actual execution

    order and concurrency.

    <p></p>

    The method returns when all actions have been performed.
  example: []
  syntax:
    content: public static void Invoke(params Action[] actions)
    parameters:
    - id: actions
      type: System.Action[]
      description: Array of actions to be performed in parallell
    content.vb: Public Shared Sub Invoke(ParamArray actions As Action())
  overload: SuperOffice.Threading.ThreadManager.Invoke*
  nameWithType.vb: ThreadManager.Invoke(ParamArray Action())
  fullName.vb: SuperOffice.Threading.ThreadManager.Invoke(ParamArray System.Action())
  name.vb: Invoke(ParamArray Action())
- uid: SuperOffice.Threading.ThreadManager.StartNew(System.Action,System.String,System.Boolean)
  commentId: M:SuperOffice.Threading.ThreadManager.StartNew(System.Action,System.String,System.Boolean)
  id: StartNew(System.Action,System.String,System.Boolean)
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: StartNew(Action, string, bool)
  nameWithType: ThreadManager.StartNew(Action, string, bool)
  fullName: SuperOffice.Threading.ThreadManager.StartNew(System.Action, string, bool)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: >-
    Start the given Action in a new thread, and return the corresponding AsynContext so 

    the client can wait for it to complete
  example: []
  syntax:
    content: public static AsyncContext StartNew(Action action, string threadName, bool forceNewThreadCreation = false)
    parameters:
    - id: action
      type: System.Action
      description: Action (method, lambda) to perform
    - id: threadName
      type: System.String
      description: Thread name
    - id: forceNewThreadCreation
      type: System.Boolean
    return:
      type: SuperOffice.Threading.AsyncContext
      description: Async context you can wait for at some later point
    content.vb: Public Shared Function StartNew(action As Action, threadName As String, forceNewThreadCreation As Boolean = False) As AsyncContext
  overload: SuperOffice.Threading.ThreadManager.StartNew*
  nameWithType.vb: ThreadManager.StartNew(Action, String, Boolean)
  fullName.vb: SuperOffice.Threading.ThreadManager.StartNew(System.Action, String, Boolean)
  name.vb: StartNew(Action, String, Boolean)
- uid: SuperOffice.Threading.ThreadManager.StartNew(System.Action,System.Boolean)
  commentId: M:SuperOffice.Threading.ThreadManager.StartNew(System.Action,System.Boolean)
  id: StartNew(System.Action,System.Boolean)
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: StartNew(Action, bool)
  nameWithType: ThreadManager.StartNew(Action, bool)
  fullName: SuperOffice.Threading.ThreadManager.StartNew(System.Action, bool)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: >-
    Start the given Action in a new thread, and return the corresponding AsynContext so 

    the client can wait for it to complete
  example: []
  syntax:
    content: public static AsyncContext StartNew(Action action, bool forceNewThreadCreation = false)
    parameters:
    - id: action
      type: System.Action
      description: Action (method, lambda) to perform
    - id: forceNewThreadCreation
      type: System.Boolean
    return:
      type: SuperOffice.Threading.AsyncContext
      description: Async context you can wait for at some later point
    content.vb: Public Shared Function StartNew(action As Action, forceNewThreadCreation As Boolean = False) As AsyncContext
  overload: SuperOffice.Threading.ThreadManager.StartNew*
  nameWithType.vb: ThreadManager.StartNew(Action, Boolean)
  fullName.vb: SuperOffice.Threading.ThreadManager.StartNew(System.Action, Boolean)
  name.vb: StartNew(Action, Boolean)
- uid: SuperOffice.Threading.ThreadManager.StartNew``1(``0,System.Action{``0},System.String,System.Boolean)
  commentId: M:SuperOffice.Threading.ThreadManager.StartNew``1(``0,System.Action{``0},System.String,System.Boolean)
  id: StartNew``1(``0,System.Action{``0},System.String,System.Boolean)
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: StartNew<T>(T, Action<T>, string, bool)
  nameWithType: ThreadManager.StartNew<T>(T, Action<T>, string, bool)
  fullName: SuperOffice.Threading.ThreadManager.StartNew<T>(T, System.Action<T>, string, bool)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: >-
    Start the given Action in a new thread, and return the corresponding AsynContext so 

    the client can wait for it to complete
  example: []
  syntax:
    content: public static AsyncContext StartNew<T>(T argument, Action<T> action, string threadName, bool forceNewThreadCreation = false)
    parameters:
    - id: argument
      type: '{T}'
      description: Argument passed to the action
    - id: action
      type: System.Action{{T}}
      description: Action (method, lambda) to perform
    - id: threadName
      type: System.String
      description: Thread name
    - id: forceNewThreadCreation
      type: System.Boolean
    typeParameters:
    - id: T
    return:
      type: SuperOffice.Threading.AsyncContext
      description: Async context you can wait for at some later point
    content.vb: Public Shared Function StartNew(Of T)(argument As T, action As Action(Of T), threadName As String, forceNewThreadCreation As Boolean = False) As AsyncContext
  overload: SuperOffice.Threading.ThreadManager.StartNew*
  nameWithType.vb: ThreadManager.StartNew(Of T)(T, Action(Of T), String, Boolean)
  fullName.vb: SuperOffice.Threading.ThreadManager.StartNew(Of T)(T, System.Action(Of T), String, Boolean)
  name.vb: StartNew(Of T)(T, Action(Of T), String, Boolean)
- uid: SuperOffice.Threading.ThreadManager.StartNew``1(``0,System.Action{``0},System.Boolean)
  commentId: M:SuperOffice.Threading.ThreadManager.StartNew``1(``0,System.Action{``0},System.Boolean)
  id: StartNew``1(``0,System.Action{``0},System.Boolean)
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: StartNew<T>(T, Action<T>, bool)
  nameWithType: ThreadManager.StartNew<T>(T, Action<T>, bool)
  fullName: SuperOffice.Threading.ThreadManager.StartNew<T>(T, System.Action<T>, bool)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: >-
    Start the given Action in a new thread, and return the corresponding AsynContext so 

    the client can wait for it to complete
  example: []
  syntax:
    content: public static AsyncContext StartNew<T>(T argument, Action<T> action, bool forceNewThreadCreation = false)
    parameters:
    - id: argument
      type: '{T}'
      description: Argument passed to the action
    - id: action
      type: System.Action{{T}}
      description: Action (method, lambda) to perform
    - id: forceNewThreadCreation
      type: System.Boolean
    typeParameters:
    - id: T
    return:
      type: SuperOffice.Threading.AsyncContext
      description: Async context you can wait for at some later point
    content.vb: Public Shared Function StartNew(Of T)(argument As T, action As Action(Of T), forceNewThreadCreation As Boolean = False) As AsyncContext
  overload: SuperOffice.Threading.ThreadManager.StartNew*
  nameWithType.vb: ThreadManager.StartNew(Of T)(T, Action(Of T), Boolean)
  fullName.vb: SuperOffice.Threading.ThreadManager.StartNew(Of T)(T, System.Action(Of T), Boolean)
  name.vb: StartNew(Of T)(T, Action(Of T), Boolean)
- uid: SuperOffice.Threading.ThreadManager.SpawnThreadOrExecuteSync``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String)
  commentId: M:SuperOffice.Threading.ThreadManager.SpawnThreadOrExecuteSync``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String)
  id: SpawnThreadOrExecuteSync``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String)
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: SpawnThreadOrExecuteSync<TArgument>(AsyncOperation<TArgument>, TArgument, string)
  nameWithType: ThreadManager.SpawnThreadOrExecuteSync<TArgument>(AsyncOperation<TArgument>, TArgument, string)
  fullName: SuperOffice.Threading.ThreadManager.SpawnThreadOrExecuteSync<TArgument>(SuperOffice.Threading.AsyncOperation<TArgument>, TArgument, string)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: >-
    Spawn a new thread in the same <xref href="SuperOffice.SoContext" data-throw-if-not-resolved="false"></xref> as the currently executed thread,

    or if blocked execute code in current thread.


    This method is aimed to be used in critical functions where you want parellism and speed when possible,

    but cannot afford to be blocked by an empty threadpool.
  remarks: >-
    If the number of threads currently executing in parallel is less then the currently 

    configured maximum allowed threads for parallel execution, a thread is spawned.  If 

    the number of threads exceeds this limitation, the current thread is blocked until 

    the number of threads currently executing in parallel is less then the currently 

    configured maximum allowed threads for parallel execution.

    <p>Maximum parallel connections are read from the SuperOffice.Configuration.ConfigFile.Threading.MaxParellelThreads

    property of the configuration file</p>
  example:
  - >-
    The method implementing the asynchronous operation needs to implement the delegate AsyncOperation:

    <pre><code class="lang-csharp">private void MyAsyncOperation(AsyncContext context, object argument)

    {
    	// Do some stuff...
    }</code></pre>

    The argument passed to the method is an optional argument selected when spawning off the asynchronous task:

    <pre><code class="lang-csharp">AsyncContext ctx = ThreadManager.SpawnThreadOrExecuteSync(new AsyncOperation(MyAsyncOperation), argument);</code></pre>
  syntax:
    content: public static AsyncContext SpawnThreadOrExecuteSync<TArgument>(AsyncOperation<TArgument> asyncOperation, TArgument argument, string threadName)
    parameters:
    - id: asyncOperation
      type: SuperOffice.Threading.AsyncOperation{{TArgument}}
      description: Operation executed in the new thread.
    - id: argument
      type: '{TArgument}'
      description: Argument passed to the operation executing the thread.
    - id: threadName
      type: System.String
      description: Thread name. Default null.
    typeParameters:
    - id: TArgument
    return:
      type: SuperOffice.Threading.AsyncContext
      description: Information about the async operation.
    content.vb: Public Shared Function SpawnThreadOrExecuteSync(Of TArgument)(asyncOperation As AsyncOperation(Of TArgument), argument As TArgument, threadName As String) As AsyncContext
  overload: SuperOffice.Threading.ThreadManager.SpawnThreadOrExecuteSync*
  nameWithType.vb: ThreadManager.SpawnThreadOrExecuteSync(Of TArgument)(AsyncOperation(Of TArgument), TArgument, String)
  fullName.vb: SuperOffice.Threading.ThreadManager.SpawnThreadOrExecuteSync(Of TArgument)(SuperOffice.Threading.AsyncOperation(Of TArgument), TArgument, String)
  name.vb: SpawnThreadOrExecuteSync(Of TArgument)(AsyncOperation(Of TArgument), TArgument, String)
- uid: SuperOffice.Threading.ThreadManager.SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:SuperOffice.Threading.ThreadManager.SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String,System.Boolean,System.Boolean,System.Boolean)
  id: SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String,System.Boolean,System.Boolean,System.Boolean)
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: SpawnThread<TArgument>(AsyncOperation<TArgument>, TArgument, string, bool, bool, bool)
  nameWithType: ThreadManager.SpawnThread<TArgument>(AsyncOperation<TArgument>, TArgument, string, bool, bool, bool)
  fullName: SuperOffice.Threading.ThreadManager.SpawnThread<TArgument>(SuperOffice.Threading.AsyncOperation<TArgument>, TArgument, string, bool, bool, bool)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: Spawn a new thread in the same <xref href="SuperOffice.SoContext" data-throw-if-not-resolved="false"></xref> as the currently executed thread.
  remarks: >-
    If the number of threads currently executing in parallel is less then the currently 

    configured maximum allowed threads for parallel execution, a thread is spawned.  If 

    the number of threads exceeds this limitation, the operation will be performed synchronously on the current thread.

    <p>Maximum parallel connections are read from the SuperOffice.Configuration.ConfigFile.Threading.MaxParellelThreads

    property of the configuration file</p>
  example:
  - >-
    The method implementing the asynchronous operation needs to implement the delegate AsyncOperation:

    <pre><code class="lang-csharp">private void MyAsyncOperation(AsyncContext context, object argument)

    {
    	// Do some stuff...
    }</code></pre>

    The argument passed to the method is an optional argument selected when spawning off the asynchronous task:

    <pre><code class="lang-csharp">AsyncContext ctx = ThreadManager.SpawnThread(new AsyncOperation(MyAsyncOperation), argument);</code></pre>
  syntax:
    content: public static AsyncContext SpawnThread<TArgument>(AsyncOperation<TArgument> asyncOperation, TArgument argument, string threadName = null, bool breakOnError = true, bool disableTimeLogging = false, bool forceNewThreadEvenIfAtMax = false)
    parameters:
    - id: asyncOperation
      type: SuperOffice.Threading.AsyncOperation{{TArgument}}
      description: Operation executed in the new thread.
    - id: argument
      type: '{TArgument}'
      description: Argument passed to the operation executing the thread.
    - id: threadName
      type: System.String
      description: Thread name. Default null.
    - id: breakOnError
      type: System.Boolean
      description: Shall the atteched debugger break if there is an error executing the thread. Default true.
    - id: disableTimeLogging
      type: System.Boolean
      description: Disable logging of times on the inner spawned thread. Default false.
    - id: forceNewThreadEvenIfAtMax
      type: System.Boolean
    typeParameters:
    - id: TArgument
    return:
      type: SuperOffice.Threading.AsyncContext
      description: Information about the async operation.
    content.vb: Public Shared Function SpawnThread(Of TArgument)(asyncOperation As AsyncOperation(Of TArgument), argument As TArgument, threadName As String = Nothing, breakOnError As Boolean = True, disableTimeLogging As Boolean = False, forceNewThreadEvenIfAtMax As Boolean = False) As AsyncContext
  overload: SuperOffice.Threading.ThreadManager.SpawnThread*
  nameWithType.vb: ThreadManager.SpawnThread(Of TArgument)(AsyncOperation(Of TArgument), TArgument, String, Boolean, Boolean, Boolean)
  fullName.vb: SuperOffice.Threading.ThreadManager.SpawnThread(Of TArgument)(SuperOffice.Threading.AsyncOperation(Of TArgument), TArgument, String, Boolean, Boolean, Boolean)
  name.vb: SpawnThread(Of TArgument)(AsyncOperation(Of TArgument), TArgument, String, Boolean, Boolean, Boolean)
- uid: SuperOffice.Threading.ThreadManager.WaitForOperationsToComplete(System.Int32,SuperOffice.Threading.AsyncContext[])
  commentId: M:SuperOffice.Threading.ThreadManager.WaitForOperationsToComplete(System.Int32,SuperOffice.Threading.AsyncContext[])
  id: WaitForOperationsToComplete(System.Int32,SuperOffice.Threading.AsyncContext[])
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: WaitForOperationsToComplete(int, params AsyncContext[])
  nameWithType: ThreadManager.WaitForOperationsToComplete(int, params AsyncContext[])
  fullName: SuperOffice.Threading.ThreadManager.WaitForOperationsToComplete(int, params SuperOffice.Threading.AsyncContext[])
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: Use this method to wait for all of the given threads to complete, with a timeout
  example: []
  syntax:
    content: public static bool WaitForOperationsToComplete(int timeout, params AsyncContext[] contexts)
    parameters:
    - id: timeout
      type: System.Int32
      description: Timeout in milliseconds; use Timeout.Infinite or the other overload to waut forever
    - id: contexts
      type: SuperOffice.Threading.AsyncContext[]
      description: Array of SoContexts describing the threads to wait for; null values are allowed and will just be skipped
    return:
      type: System.Boolean
      description: True if all operations had time to complete; false if the timeout triggered
    content.vb: Public Shared Function WaitForOperationsToComplete(timeout As Integer, ParamArray contexts As AsyncContext()) As Boolean
  overload: SuperOffice.Threading.ThreadManager.WaitForOperationsToComplete*
  nameWithType.vb: ThreadManager.WaitForOperationsToComplete(Integer, ParamArray AsyncContext())
  fullName.vb: SuperOffice.Threading.ThreadManager.WaitForOperationsToComplete(Integer, ParamArray SuperOffice.Threading.AsyncContext())
  name.vb: WaitForOperationsToComplete(Integer, ParamArray AsyncContext())
- uid: SuperOffice.Threading.ThreadManager.WaitForOperationsToComplete(SuperOffice.Threading.AsyncContext[])
  commentId: M:SuperOffice.Threading.ThreadManager.WaitForOperationsToComplete(SuperOffice.Threading.AsyncContext[])
  id: WaitForOperationsToComplete(SuperOffice.Threading.AsyncContext[])
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: WaitForOperationsToComplete(params AsyncContext[])
  nameWithType: ThreadManager.WaitForOperationsToComplete(params AsyncContext[])
  fullName: SuperOffice.Threading.ThreadManager.WaitForOperationsToComplete(params SuperOffice.Threading.AsyncContext[])
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: >-
    Use this method to wait for all of the given threads to complete; this

    overload will wait forever.
  example: []
  syntax:
    content: public static bool WaitForOperationsToComplete(params AsyncContext[] contexts)
    parameters:
    - id: contexts
      type: SuperOffice.Threading.AsyncContext[]
      description: Array of SoContexts describing the threads to wait for; null values are allowed and will just be skipped
    return:
      type: System.Boolean
      description: True if all operations had time to complete; false if the timeout triggered
    content.vb: Public Shared Function WaitForOperationsToComplete(ParamArray contexts As AsyncContext()) As Boolean
  overload: SuperOffice.Threading.ThreadManager.WaitForOperationsToComplete*
  nameWithType.vb: ThreadManager.WaitForOperationsToComplete(ParamArray AsyncContext())
  fullName.vb: SuperOffice.Threading.ThreadManager.WaitForOperationsToComplete(ParamArray SuperOffice.Threading.AsyncContext())
  name.vb: WaitForOperationsToComplete(ParamArray AsyncContext())
- uid: SuperOffice.Threading.ThreadManager.WaitForAllOperationsToComplete
  commentId: M:SuperOffice.Threading.ThreadManager.WaitForAllOperationsToComplete
  id: WaitForAllOperationsToComplete
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: WaitForAllOperationsToComplete()
  nameWithType: ThreadManager.WaitForAllOperationsToComplete()
  fullName: SuperOffice.Threading.ThreadManager.WaitForAllOperationsToComplete()
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: Wait until all asynchronous operations have completed. This includes n-th generation child threads.
  example: []
  syntax:
    content: public static void WaitForAllOperationsToComplete()
    content.vb: Public Shared Sub WaitForAllOperationsToComplete()
  overload: SuperOffice.Threading.ThreadManager.WaitForAllOperationsToComplete*
- uid: SuperOffice.Threading.ThreadManager.WaitForAllOperationsInDatabaseContextToComplete
  commentId: M:SuperOffice.Threading.ThreadManager.WaitForAllOperationsInDatabaseContextToComplete
  id: WaitForAllOperationsInDatabaseContextToComplete
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: WaitForAllOperationsInDatabaseContextToComplete()
  nameWithType: ThreadManager.WaitForAllOperationsInDatabaseContextToComplete()
  fullName: SuperOffice.Threading.ThreadManager.WaitForAllOperationsInDatabaseContextToComplete()
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: Wait until all asynchronous operations in hte current database context have completed. This includes n-th generation child threads.
  example: []
  syntax:
    content: public static void WaitForAllOperationsInDatabaseContextToComplete()
    content.vb: Public Shared Sub WaitForAllOperationsInDatabaseContextToComplete()
  overload: SuperOffice.Threading.ThreadManager.WaitForAllOperationsInDatabaseContextToComplete*
- uid: SuperOffice.Threading.ThreadManager.WaitForAllOperationsToComplete(System.Int32,System.Boolean)
  commentId: M:SuperOffice.Threading.ThreadManager.WaitForAllOperationsToComplete(System.Int32,System.Boolean)
  id: WaitForAllOperationsToComplete(System.Int32,System.Boolean)
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: WaitForAllOperationsToComplete(int, bool)
  nameWithType: ThreadManager.WaitForAllOperationsToComplete(int, bool)
  fullName: SuperOffice.Threading.ThreadManager.WaitForAllOperationsToComplete(int, bool)
  type: Method
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: >-
    Wait until all asynchronous operations in the current database context have completed, or the time limit (ms) runs out. This includes n-th

    generation child threads
  example: []
  syntax:
    content: public static bool WaitForAllOperationsToComplete(int timeLimit, bool inCurrentDatabaseContextOnly = false)
    parameters:
    - id: timeLimit
      type: System.Int32
      description: max number of milliseconds to wait, 0 means forever
    - id: inCurrentDatabaseContextOnly
      type: System.Boolean
      description: Only check for threads in the same database context and ignore the state of other threads.
    return:
      type: System.Boolean
      description: true if all operations finished before the timeout hit
    content.vb: Public Shared Function WaitForAllOperationsToComplete(timeLimit As Integer, inCurrentDatabaseContextOnly As Boolean = False) As Boolean
  overload: SuperOffice.Threading.ThreadManager.WaitForAllOperationsToComplete*
  nameWithType.vb: ThreadManager.WaitForAllOperationsToComplete(Integer, Boolean)
  fullName.vb: SuperOffice.Threading.ThreadManager.WaitForAllOperationsToComplete(Integer, Boolean)
  name.vb: WaitForAllOperationsToComplete(Integer, Boolean)
- uid: SuperOffice.Threading.ThreadManager.RunningThreadCount
  commentId: P:SuperOffice.Threading.ThreadManager.RunningThreadCount
  id: RunningThreadCount
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: RunningThreadCount
  nameWithType: ThreadManager.RunningThreadCount
  fullName: SuperOffice.Threading.ThreadManager.RunningThreadCount
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  syntax:
    content: public static int RunningThreadCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property RunningThreadCount As Integer
  overload: SuperOffice.Threading.ThreadManager.RunningThreadCount*
- uid: SuperOffice.Threading.ThreadManager.MaxThreads
  commentId: P:SuperOffice.Threading.ThreadManager.MaxThreads
  id: MaxThreads
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: MaxThreads
  nameWithType: ThreadManager.MaxThreads
  fullName: SuperOffice.Threading.ThreadManager.MaxThreads
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: Maximum parallel operations permitted to run simultaneously.  (-1 is infinite)
  example: []
  syntax:
    content: public static int MaxThreads { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property MaxThreads As Integer
  overload: SuperOffice.Threading.ThreadManager.MaxThreads*
- uid: SuperOffice.Threading.ThreadManager.SingleThreadMode
  commentId: P:SuperOffice.Threading.ThreadManager.SingleThreadMode
  id: SingleThreadMode
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: SingleThreadMode
  nameWithType: ThreadManager.SingleThreadMode
  fullName: SuperOffice.Threading.ThreadManager.SingleThreadMode
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: Are we running in single-thread mode?  If true, then all calls to Spawn will execute in-line; and all calls to Wait will return immediately
  example: []
  syntax:
    content: public static bool SingleThreadMode { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property SingleThreadMode As Boolean
  overload: SuperOffice.Threading.ThreadManager.SingleThreadMode*
- uid: SuperOffice.Threading.ThreadManager.HasReachedMaxThreads
  commentId: P:SuperOffice.Threading.ThreadManager.HasReachedMaxThreads
  id: HasReachedMaxThreads
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: HasReachedMaxThreads
  nameWithType: ThreadManager.HasReachedMaxThreads
  fullName: SuperOffice.Threading.ThreadManager.HasReachedMaxThreads
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: >-
    Gets whether the ThreadManager has started more than <xref href="SuperOffice.Threading.ThreadManager.MaxThreads" data-throw-if-not-resolved="false"></xref> threads

    which has yet to complete.


    If true, spawning new threads via <xref href="SuperOffice.Threading.ThreadManager.SpawnThread%60%601(SuperOffice.Threading.AsyncOperation%7b%60%600%7d%2c%60%600%2cSystem.String%2cSystem.Boolean%2cSystem.Boolean%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>

    will block.
  example: []
  syntax:
    content: public static bool HasReachedMaxThreads { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property HasReachedMaxThreads As Boolean
  overload: SuperOffice.Threading.ThreadManager.HasReachedMaxThreads*
- uid: SuperOffice.Threading.ThreadManager.IsWorkerThread
  commentId: P:SuperOffice.Threading.ThreadManager.IsWorkerThread
  id: IsWorkerThread
  parent: SuperOffice.Threading.ThreadManager
  langs:
  - csharp
  - vb
  name: IsWorkerThread
  nameWithType: ThreadManager.IsWorkerThread
  fullName: SuperOffice.Threading.ThreadManager.IsWorkerThread
  type: Property
  assemblies:
  - SoCore
  namespace: SuperOffice.Threading
  summary: Is this thread executed by the <xref href="SuperOffice.Threading.ThreadManager" data-throw-if-not-resolved="false"></xref>.
  remarks: This can be used by a
  example: []
  syntax:
    content: public static bool IsWorkerThread { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property IsWorkerThread As Boolean
  overload: SuperOffice.Threading.ThreadManager.IsWorkerThread*
references:
- uid: SuperOffice.SoContext
  commentId: T:SuperOffice.SoContext
  isExternal: true
  href: SuperOffice.SoContext.html
  name: SoContext
  nameWithType: SoContext
  fullName: SuperOffice.SoContext
- uid: SuperOffice.Threading
  commentId: N:SuperOffice.Threading
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Threading
  nameWithType: SuperOffice.Threading
  fullName: SuperOffice.Threading
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Threading
    name: Threading
    isExternal: true
    href: SuperOffice.Threading.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Threading
    name: Threading
    isExternal: true
    href: SuperOffice.Threading.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: SuperOffice.Threading.ThreadManager.RegisterAsyncContextProvider*
  commentId: Overload:SuperOffice.Threading.ThreadManager.RegisterAsyncContextProvider
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_RegisterAsyncContextProvider__2_SuperOffice_Threading_GetThreadState___0__SuperOffice_Threading_SetThreadState___0___1__SuperOffice_Threading_CleanupThreadState___0___1__
  name: RegisterAsyncContextProvider
  nameWithType: ThreadManager.RegisterAsyncContextProvider
  fullName: SuperOffice.Threading.ThreadManager.RegisterAsyncContextProvider
- uid: SuperOffice.Threading.GetThreadState{{TThreadState}}
  commentId: T:SuperOffice.Threading.GetThreadState{``0}
  parent: SuperOffice.Threading
  definition: SuperOffice.Threading.GetThreadState`1
  href: SuperOffice.Threading.GetThreadState-1.html
  name: GetThreadState<TThreadState>
  nameWithType: GetThreadState<TThreadState>
  fullName: SuperOffice.Threading.GetThreadState<TThreadState>
  nameWithType.vb: GetThreadState(Of TThreadState)
  fullName.vb: SuperOffice.Threading.GetThreadState(Of TThreadState)
  name.vb: GetThreadState(Of TThreadState)
  spec.csharp:
  - uid: SuperOffice.Threading.GetThreadState`1
    name: GetThreadState
    isExternal: true
    href: SuperOffice.Threading.GetThreadState-1.html
  - name: <
  - name: TThreadState
  - name: '>'
  spec.vb:
  - uid: SuperOffice.Threading.GetThreadState`1
    name: GetThreadState
    isExternal: true
    href: SuperOffice.Threading.GetThreadState-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TThreadState
  - name: )
- uid: SuperOffice.Threading.SetThreadState{{TThreadState},{TThreadCleanupState}}
  commentId: T:SuperOffice.Threading.SetThreadState{``0,``1}
  parent: SuperOffice.Threading
  definition: SuperOffice.Threading.SetThreadState`2
  href: SuperOffice.Threading.SetThreadState-2.html
  name: SetThreadState<TThreadState, TThreadCleanupState>
  nameWithType: SetThreadState<TThreadState, TThreadCleanupState>
  fullName: SuperOffice.Threading.SetThreadState<TThreadState, TThreadCleanupState>
  nameWithType.vb: SetThreadState(Of TThreadState, TThreadCleanupState)
  fullName.vb: SuperOffice.Threading.SetThreadState(Of TThreadState, TThreadCleanupState)
  name.vb: SetThreadState(Of TThreadState, TThreadCleanupState)
  spec.csharp:
  - uid: SuperOffice.Threading.SetThreadState`2
    name: SetThreadState
    isExternal: true
    href: SuperOffice.Threading.SetThreadState-2.html
  - name: <
  - name: TThreadState
  - name: ','
  - name: " "
  - name: TThreadCleanupState
  - name: '>'
  spec.vb:
  - uid: SuperOffice.Threading.SetThreadState`2
    name: SetThreadState
    isExternal: true
    href: SuperOffice.Threading.SetThreadState-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TThreadState
  - name: ','
  - name: " "
  - name: TThreadCleanupState
  - name: )
- uid: SuperOffice.Threading.CleanupThreadState{{TThreadState},{TThreadCleanupState}}
  commentId: T:SuperOffice.Threading.CleanupThreadState{``0,``1}
  parent: SuperOffice.Threading
  definition: SuperOffice.Threading.CleanupThreadState`2
  href: SuperOffice.Threading.CleanupThreadState-2.html
  name: CleanupThreadState<TThreadState, TThreadCleanupState>
  nameWithType: CleanupThreadState<TThreadState, TThreadCleanupState>
  fullName: SuperOffice.Threading.CleanupThreadState<TThreadState, TThreadCleanupState>
  nameWithType.vb: CleanupThreadState(Of TThreadState, TThreadCleanupState)
  fullName.vb: SuperOffice.Threading.CleanupThreadState(Of TThreadState, TThreadCleanupState)
  name.vb: CleanupThreadState(Of TThreadState, TThreadCleanupState)
  spec.csharp:
  - uid: SuperOffice.Threading.CleanupThreadState`2
    name: CleanupThreadState
    isExternal: true
    href: SuperOffice.Threading.CleanupThreadState-2.html
  - name: <
  - name: TThreadState
  - name: ','
  - name: " "
  - name: TThreadCleanupState
  - name: '>'
  spec.vb:
  - uid: SuperOffice.Threading.CleanupThreadState`2
    name: CleanupThreadState
    isExternal: true
    href: SuperOffice.Threading.CleanupThreadState-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TThreadState
  - name: ','
  - name: " "
  - name: TThreadCleanupState
  - name: )
- uid: SuperOffice.Threading.GetThreadState`1
  commentId: T:SuperOffice.Threading.GetThreadState`1
  isExternal: true
  href: SuperOffice.Threading.GetThreadState-1.html
  name: GetThreadState<TThreadState>
  nameWithType: GetThreadState<TThreadState>
  fullName: SuperOffice.Threading.GetThreadState<TThreadState>
  nameWithType.vb: GetThreadState(Of TThreadState)
  fullName.vb: SuperOffice.Threading.GetThreadState(Of TThreadState)
  name.vb: GetThreadState(Of TThreadState)
  spec.csharp:
  - uid: SuperOffice.Threading.GetThreadState`1
    name: GetThreadState
    isExternal: true
    href: SuperOffice.Threading.GetThreadState-1.html
  - name: <
  - name: TThreadState
  - name: '>'
  spec.vb:
  - uid: SuperOffice.Threading.GetThreadState`1
    name: GetThreadState
    isExternal: true
    href: SuperOffice.Threading.GetThreadState-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TThreadState
  - name: )
- uid: SuperOffice.Threading.SetThreadState`2
  commentId: T:SuperOffice.Threading.SetThreadState`2
  isExternal: true
  href: SuperOffice.Threading.SetThreadState-2.html
  name: SetThreadState<TThreadState, TThreadCleanupState>
  nameWithType: SetThreadState<TThreadState, TThreadCleanupState>
  fullName: SuperOffice.Threading.SetThreadState<TThreadState, TThreadCleanupState>
  nameWithType.vb: SetThreadState(Of TThreadState, TThreadCleanupState)
  fullName.vb: SuperOffice.Threading.SetThreadState(Of TThreadState, TThreadCleanupState)
  name.vb: SetThreadState(Of TThreadState, TThreadCleanupState)
  spec.csharp:
  - uid: SuperOffice.Threading.SetThreadState`2
    name: SetThreadState
    isExternal: true
    href: SuperOffice.Threading.SetThreadState-2.html
  - name: <
  - name: TThreadState
  - name: ','
  - name: " "
  - name: TThreadCleanupState
  - name: '>'
  spec.vb:
  - uid: SuperOffice.Threading.SetThreadState`2
    name: SetThreadState
    isExternal: true
    href: SuperOffice.Threading.SetThreadState-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TThreadState
  - name: ','
  - name: " "
  - name: TThreadCleanupState
  - name: )
- uid: SuperOffice.Threading.CleanupThreadState`2
  commentId: T:SuperOffice.Threading.CleanupThreadState`2
  isExternal: true
  href: SuperOffice.Threading.CleanupThreadState-2.html
  name: CleanupThreadState<TThreadState, TThreadCleanupState>
  nameWithType: CleanupThreadState<TThreadState, TThreadCleanupState>
  fullName: SuperOffice.Threading.CleanupThreadState<TThreadState, TThreadCleanupState>
  nameWithType.vb: CleanupThreadState(Of TThreadState, TThreadCleanupState)
  fullName.vb: SuperOffice.Threading.CleanupThreadState(Of TThreadState, TThreadCleanupState)
  name.vb: CleanupThreadState(Of TThreadState, TThreadCleanupState)
  spec.csharp:
  - uid: SuperOffice.Threading.CleanupThreadState`2
    name: CleanupThreadState
    isExternal: true
    href: SuperOffice.Threading.CleanupThreadState-2.html
  - name: <
  - name: TThreadState
  - name: ','
  - name: " "
  - name: TThreadCleanupState
  - name: '>'
  spec.vb:
  - uid: SuperOffice.Threading.CleanupThreadState`2
    name: CleanupThreadState
    isExternal: true
    href: SuperOffice.Threading.CleanupThreadState-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TThreadState
  - name: ','
  - name: " "
  - name: TThreadCleanupState
  - name: )
- uid: SuperOffice.Threading.ThreadManager.BeginPreventParallelism*
  commentId: Overload:SuperOffice.Threading.ThreadManager.BeginPreventParallelism
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_BeginPreventParallelism
  name: BeginPreventParallelism
  nameWithType: ThreadManager.BeginPreventParallelism
  fullName: SuperOffice.Threading.ThreadManager.BeginPreventParallelism
- uid: SuperOffice.Threading.ThreadManager.ForceSingleThreadHelper
  commentId: T:SuperOffice.Threading.ThreadManager.ForceSingleThreadHelper
  parent: SuperOffice.Threading
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html
  name: ThreadManager.ForceSingleThreadHelper
  nameWithType: ThreadManager.ForceSingleThreadHelper
  fullName: SuperOffice.Threading.ThreadManager.ForceSingleThreadHelper
  spec.csharp:
  - uid: SuperOffice.Threading.ThreadManager
    name: ThreadManager
    isExternal: true
    href: SuperOffice.Threading.ThreadManager.html
  - name: .
  - uid: SuperOffice.Threading.ThreadManager.ForceSingleThreadHelper
    name: ForceSingleThreadHelper
    isExternal: true
    href: SuperOffice.Threading.ThreadManager.ForceSingleThreadHelper.html
  spec.vb:
  - uid: SuperOffice.Threading.ThreadManager
    name: ThreadManager
    isExternal: true
    href: SuperOffice.Threading.ThreadManager.html
  - name: .
  - uid: SuperOffice.Threading.ThreadManager.ForceSingleThreadHelper
    name: ForceSingleThreadHelper
    isExternal: true
    href: SuperOffice.Threading.ThreadManager.ForceSingleThreadHelper.html
- uid: SuperOffice.Threading.ThreadManager.IgnoreRowSentry*
  commentId: Overload:SuperOffice.Threading.ThreadManager.IgnoreRowSentry
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_IgnoreRowSentry
  name: IgnoreRowSentry
  nameWithType: ThreadManager.IgnoreRowSentry
  fullName: SuperOffice.Threading.ThreadManager.IgnoreRowSentry
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: SuperOffice.Threading.ThreadManager.BeginIgnoreRowSentry*
  commentId: Overload:SuperOffice.Threading.ThreadManager.BeginIgnoreRowSentry
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_BeginIgnoreRowSentry
  name: BeginIgnoreRowSentry
  nameWithType: ThreadManager.BeginIgnoreRowSentry
  fullName: SuperOffice.Threading.ThreadManager.BeginIgnoreRowSentry
- uid: SuperOffice.Threading.ThreadManager.IgnoreRowSentryModifier
  commentId: T:SuperOffice.Threading.ThreadManager.IgnoreRowSentryModifier
  parent: SuperOffice.Threading
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html
  name: ThreadManager.IgnoreRowSentryModifier
  nameWithType: ThreadManager.IgnoreRowSentryModifier
  fullName: SuperOffice.Threading.ThreadManager.IgnoreRowSentryModifier
  spec.csharp:
  - uid: SuperOffice.Threading.ThreadManager
    name: ThreadManager
    isExternal: true
    href: SuperOffice.Threading.ThreadManager.html
  - name: .
  - uid: SuperOffice.Threading.ThreadManager.IgnoreRowSentryModifier
    name: IgnoreRowSentryModifier
    isExternal: true
    href: SuperOffice.Threading.ThreadManager.IgnoreRowSentryModifier.html
  spec.vb:
  - uid: SuperOffice.Threading.ThreadManager
    name: ThreadManager
    isExternal: true
    href: SuperOffice.Threading.ThreadManager.html
  - name: .
  - uid: SuperOffice.Threading.ThreadManager.IgnoreRowSentryModifier
    name: IgnoreRowSentryModifier
    isExternal: true
    href: SuperOffice.Threading.ThreadManager.IgnoreRowSentryModifier.html
- uid: SuperOffice.Threading.ThreadManager.IgnoreSentry*
  commentId: Overload:SuperOffice.Threading.ThreadManager.IgnoreSentry
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_IgnoreSentry
  name: IgnoreSentry
  nameWithType: ThreadManager.IgnoreSentry
  fullName: SuperOffice.Threading.ThreadManager.IgnoreSentry
- uid: SuperOffice.Threading.ThreadManager.BeginIgnoreSentry*
  commentId: Overload:SuperOffice.Threading.ThreadManager.BeginIgnoreSentry
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_BeginIgnoreSentry
  name: BeginIgnoreSentry
  nameWithType: ThreadManager.BeginIgnoreSentry
  fullName: SuperOffice.Threading.ThreadManager.BeginIgnoreSentry
- uid: SuperOffice.Threading.ThreadManager.IgnoreSentryModifier
  commentId: T:SuperOffice.Threading.ThreadManager.IgnoreSentryModifier
  parent: SuperOffice.Threading
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html
  name: ThreadManager.IgnoreSentryModifier
  nameWithType: ThreadManager.IgnoreSentryModifier
  fullName: SuperOffice.Threading.ThreadManager.IgnoreSentryModifier
  spec.csharp:
  - uid: SuperOffice.Threading.ThreadManager
    name: ThreadManager
    isExternal: true
    href: SuperOffice.Threading.ThreadManager.html
  - name: .
  - uid: SuperOffice.Threading.ThreadManager.IgnoreSentryModifier
    name: IgnoreSentryModifier
    isExternal: true
    href: SuperOffice.Threading.ThreadManager.IgnoreSentryModifier.html
  spec.vb:
  - uid: SuperOffice.Threading.ThreadManager
    name: ThreadManager
    isExternal: true
    href: SuperOffice.Threading.ThreadManager.html
  - name: .
  - uid: SuperOffice.Threading.ThreadManager.IgnoreSentryModifier
    name: IgnoreSentryModifier
    isExternal: true
    href: SuperOffice.Threading.ThreadManager.IgnoreSentryModifier.html
- uid: SuperOffice.Threading.ThreadManager.Invoke*
  commentId: Overload:SuperOffice.Threading.ThreadManager.Invoke
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_Invoke_System_Action___
  name: Invoke
  nameWithType: ThreadManager.Invoke
  fullName: SuperOffice.Threading.ThreadManager.Invoke
- uid: System.Action[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action
  name: Action[]
  nameWithType: Action[]
  fullName: System.Action[]
  nameWithType.vb: Action()
  fullName.vb: System.Action()
  name.vb: Action()
  spec.csharp:
  - uid: System.Action
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Action
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action
  - name: (
  - name: )
- uid: SuperOffice.Threading.ThreadManager.StartNew*
  commentId: Overload:SuperOffice.Threading.ThreadManager.StartNew
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_StartNew_System_Action_System_String_System_Boolean_
  name: StartNew
  nameWithType: ThreadManager.StartNew
  fullName: SuperOffice.Threading.ThreadManager.StartNew
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: SuperOffice.Threading.AsyncContext
  commentId: T:SuperOffice.Threading.AsyncContext
  parent: SuperOffice.Threading
  isExternal: true
  href: SuperOffice.Threading.AsyncContext.html
  name: AsyncContext
  nameWithType: AsyncContext
  fullName: SuperOffice.Threading.AsyncContext
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Action{{T}}
  commentId: T:System.Action{`0}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: SuperOffice.Threading.ThreadManager.SpawnThreadOrExecuteSync*
  commentId: Overload:SuperOffice.Threading.ThreadManager.SpawnThreadOrExecuteSync
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_SpawnThreadOrExecuteSync__1_SuperOffice_Threading_AsyncOperation___0____0_System_String_
  name: SpawnThreadOrExecuteSync
  nameWithType: ThreadManager.SpawnThreadOrExecuteSync
  fullName: SuperOffice.Threading.ThreadManager.SpawnThreadOrExecuteSync
- uid: SuperOffice.Threading.AsyncOperation{{TArgument}}
  commentId: T:SuperOffice.Threading.AsyncOperation{``0}
  parent: SuperOffice.Threading
  definition: SuperOffice.Threading.AsyncOperation`1
  href: SuperOffice.Threading.AsyncOperation-1.html
  name: AsyncOperation<TArgument>
  nameWithType: AsyncOperation<TArgument>
  fullName: SuperOffice.Threading.AsyncOperation<TArgument>
  nameWithType.vb: AsyncOperation(Of TArgument)
  fullName.vb: SuperOffice.Threading.AsyncOperation(Of TArgument)
  name.vb: AsyncOperation(Of TArgument)
  spec.csharp:
  - uid: SuperOffice.Threading.AsyncOperation`1
    name: AsyncOperation
    isExternal: true
    href: SuperOffice.Threading.AsyncOperation-1.html
  - name: <
  - name: TArgument
  - name: '>'
  spec.vb:
  - uid: SuperOffice.Threading.AsyncOperation`1
    name: AsyncOperation
    isExternal: true
    href: SuperOffice.Threading.AsyncOperation-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TArgument
  - name: )
- uid: '{TArgument}'
  commentId: '!:TArgument'
  definition: TArgument
  name: TArgument
  nameWithType: TArgument
  fullName: TArgument
- uid: SuperOffice.Threading.AsyncOperation`1
  commentId: T:SuperOffice.Threading.AsyncOperation`1
  isExternal: true
  href: SuperOffice.Threading.AsyncOperation-1.html
  name: AsyncOperation<TArgument>
  nameWithType: AsyncOperation<TArgument>
  fullName: SuperOffice.Threading.AsyncOperation<TArgument>
  nameWithType.vb: AsyncOperation(Of TArgument)
  fullName.vb: SuperOffice.Threading.AsyncOperation(Of TArgument)
  name.vb: AsyncOperation(Of TArgument)
  spec.csharp:
  - uid: SuperOffice.Threading.AsyncOperation`1
    name: AsyncOperation
    isExternal: true
    href: SuperOffice.Threading.AsyncOperation-1.html
  - name: <
  - name: TArgument
  - name: '>'
  spec.vb:
  - uid: SuperOffice.Threading.AsyncOperation`1
    name: AsyncOperation
    isExternal: true
    href: SuperOffice.Threading.AsyncOperation-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TArgument
  - name: )
- uid: TArgument
  name: TArgument
  nameWithType: TArgument
  fullName: TArgument
- uid: SuperOffice.Threading.ThreadManager.SpawnThread*
  commentId: Overload:SuperOffice.Threading.ThreadManager.SpawnThread
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_SpawnThread__1_SuperOffice_Threading_AsyncOperation___0____0_System_String_System_Boolean_System_Boolean_System_Boolean_
  name: SpawnThread
  nameWithType: ThreadManager.SpawnThread
  fullName: SuperOffice.Threading.ThreadManager.SpawnThread
- uid: SuperOffice.Threading.ThreadManager.WaitForOperationsToComplete*
  commentId: Overload:SuperOffice.Threading.ThreadManager.WaitForOperationsToComplete
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_WaitForOperationsToComplete_System_Int32_SuperOffice_Threading_AsyncContext___
  name: WaitForOperationsToComplete
  nameWithType: ThreadManager.WaitForOperationsToComplete
  fullName: SuperOffice.Threading.ThreadManager.WaitForOperationsToComplete
- uid: SuperOffice.Threading.AsyncContext[]
  isExternal: true
  href: SuperOffice.Threading.AsyncContext.html
  name: AsyncContext[]
  nameWithType: AsyncContext[]
  fullName: SuperOffice.Threading.AsyncContext[]
  nameWithType.vb: AsyncContext()
  fullName.vb: SuperOffice.Threading.AsyncContext()
  name.vb: AsyncContext()
  spec.csharp:
  - uid: SuperOffice.Threading.AsyncContext
    name: AsyncContext
    isExternal: true
    href: SuperOffice.Threading.AsyncContext.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.Threading.AsyncContext
    name: AsyncContext
    isExternal: true
    href: SuperOffice.Threading.AsyncContext.html
  - name: (
  - name: )
- uid: SuperOffice.Threading.ThreadManager.WaitForAllOperationsToComplete*
  commentId: Overload:SuperOffice.Threading.ThreadManager.WaitForAllOperationsToComplete
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_WaitForAllOperationsToComplete
  name: WaitForAllOperationsToComplete
  nameWithType: ThreadManager.WaitForAllOperationsToComplete
  fullName: SuperOffice.Threading.ThreadManager.WaitForAllOperationsToComplete
- uid: SuperOffice.Threading.ThreadManager.WaitForAllOperationsInDatabaseContextToComplete*
  commentId: Overload:SuperOffice.Threading.ThreadManager.WaitForAllOperationsInDatabaseContextToComplete
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_WaitForAllOperationsInDatabaseContextToComplete
  name: WaitForAllOperationsInDatabaseContextToComplete
  nameWithType: ThreadManager.WaitForAllOperationsInDatabaseContextToComplete
  fullName: SuperOffice.Threading.ThreadManager.WaitForAllOperationsInDatabaseContextToComplete
- uid: SuperOffice.Threading.ThreadManager.RunningThreadCount*
  commentId: Overload:SuperOffice.Threading.ThreadManager.RunningThreadCount
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_RunningThreadCount
  name: RunningThreadCount
  nameWithType: ThreadManager.RunningThreadCount
  fullName: SuperOffice.Threading.ThreadManager.RunningThreadCount
- uid: SuperOffice.Threading.ThreadManager.MaxThreads*
  commentId: Overload:SuperOffice.Threading.ThreadManager.MaxThreads
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_MaxThreads
  name: MaxThreads
  nameWithType: ThreadManager.MaxThreads
  fullName: SuperOffice.Threading.ThreadManager.MaxThreads
- uid: SuperOffice.Threading.ThreadManager.SingleThreadMode*
  commentId: Overload:SuperOffice.Threading.ThreadManager.SingleThreadMode
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_SingleThreadMode
  name: SingleThreadMode
  nameWithType: ThreadManager.SingleThreadMode
  fullName: SuperOffice.Threading.ThreadManager.SingleThreadMode
- uid: SuperOffice.Threading.ThreadManager.MaxThreads
  commentId: P:SuperOffice.Threading.ThreadManager.MaxThreads
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_MaxThreads
  name: MaxThreads
  nameWithType: ThreadManager.MaxThreads
  fullName: SuperOffice.Threading.ThreadManager.MaxThreads
- uid: SuperOffice.Threading.ThreadManager.SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:SuperOffice.Threading.ThreadManager.SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String,System.Boolean,System.Boolean,System.Boolean)
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_SpawnThread__1_SuperOffice_Threading_AsyncOperation___0____0_System_String_System_Boolean_System_Boolean_System_Boolean_
  name: SpawnThread<TArgument>(AsyncOperation<TArgument>, TArgument, string, bool, bool, bool)
  nameWithType: ThreadManager.SpawnThread<TArgument>(AsyncOperation<TArgument>, TArgument, string, bool, bool, bool)
  fullName: SuperOffice.Threading.ThreadManager.SpawnThread<TArgument>(SuperOffice.Threading.AsyncOperation<TArgument>, TArgument, string, bool, bool, bool)
  nameWithType.vb: ThreadManager.SpawnThread(Of TArgument)(AsyncOperation(Of TArgument), TArgument, String, Boolean, Boolean, Boolean)
  fullName.vb: SuperOffice.Threading.ThreadManager.SpawnThread(Of TArgument)(SuperOffice.Threading.AsyncOperation(Of TArgument), TArgument, String, Boolean, Boolean, Boolean)
  name.vb: SpawnThread(Of TArgument)(AsyncOperation(Of TArgument), TArgument, String, Boolean, Boolean, Boolean)
  spec.csharp:
  - uid: SuperOffice.Threading.ThreadManager.SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String,System.Boolean,System.Boolean,System.Boolean)
    name: SpawnThread
    isExternal: true
    href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_SpawnThread__1_SuperOffice_Threading_AsyncOperation___0____0_System_String_System_Boolean_System_Boolean_System_Boolean_
  - name: <
  - name: TArgument
  - name: '>'
  - name: (
  - uid: SuperOffice.Threading.AsyncOperation`1
    name: AsyncOperation
    isExternal: true
    href: SuperOffice.Threading.AsyncOperation-1.html
  - name: <
  - name: TArgument
  - name: '>'
  - name: ','
  - name: " "
  - name: TArgument
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: SuperOffice.Threading.ThreadManager.SpawnThread``1(SuperOffice.Threading.AsyncOperation{``0},``0,System.String,System.Boolean,System.Boolean,System.Boolean)
    name: SpawnThread
    isExternal: true
    href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_SpawnThread__1_SuperOffice_Threading_AsyncOperation___0____0_System_String_System_Boolean_System_Boolean_System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: TArgument
  - name: )
  - name: (
  - uid: SuperOffice.Threading.AsyncOperation`1
    name: AsyncOperation
    isExternal: true
    href: SuperOffice.Threading.AsyncOperation-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TArgument
  - name: )
  - name: ','
  - name: " "
  - name: TArgument
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: SuperOffice.Threading.ThreadManager.HasReachedMaxThreads*
  commentId: Overload:SuperOffice.Threading.ThreadManager.HasReachedMaxThreads
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_HasReachedMaxThreads
  name: HasReachedMaxThreads
  nameWithType: ThreadManager.HasReachedMaxThreads
  fullName: SuperOffice.Threading.ThreadManager.HasReachedMaxThreads
- uid: SuperOffice.Threading.ThreadManager
  commentId: T:SuperOffice.Threading.ThreadManager
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html
  name: ThreadManager
  nameWithType: ThreadManager
  fullName: SuperOffice.Threading.ThreadManager
- uid: SuperOffice.Threading.ThreadManager.IsWorkerThread*
  commentId: Overload:SuperOffice.Threading.ThreadManager.IsWorkerThread
  isExternal: true
  href: SuperOffice.Threading.ThreadManager.html#SuperOffice_Threading_ThreadManager_IsWorkerThread
  name: IsWorkerThread
  nameWithType: ThreadManager.IsWorkerThread
  fullName: SuperOffice.Threading.ThreadManager.IsWorkerThread
