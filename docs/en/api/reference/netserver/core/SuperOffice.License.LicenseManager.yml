### YamlMime:ManagedReference
items:
- uid: SuperOffice.License.LicenseManager
  commentId: T:SuperOffice.License.LicenseManager
  id: LicenseManager
  parent: SuperOffice.License
  children:
  - SuperOffice.License.LicenseManager.ActivateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean)
  - SuperOffice.License.LicenseManager.AllowAutoUpdate
  - SuperOffice.License.LicenseManager.ChangeSerialNumber(System.String,System.String)
  - SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCount(SuperOffice.Data.AssociateType,System.Int32[])
  - SuperOffice.License.LicenseManager.GetCurrent
  - SuperOffice.License.LicenseManager.GetCurrentLicense(System.String,System.DateTime@)
  - SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32)
  - SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32,System.Int32)
  - SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDB
  - SuperOffice.License.LicenseManager.GetLicenseFromDB(System.String)
  - SuperOffice.License.LicenseManager.GetLicenseFromFile(System.String)
  - SuperOffice.License.LicenseManager.GetLicenseFromLicenseServer(System.String,System.String)
  - SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignments(System.String,System.Boolean,System.String)
  - SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServer(System.String,System.String)
  - SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServer(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense)
  - SuperOffice.License.LicenseManager.GetModuleOwner(System.String)
  - SuperOffice.License.LicenseManager.GetModuleOwners
  - SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCount(System.Int32[])
  - SuperOffice.License.LicenseManager.GetSatelliteLicenses(System.Int32,System.Boolean)
  - SuperOffice.License.LicenseManager.GetShopUrl(System.String,System.String)
  - SuperOffice.License.LicenseManager.GetUserLicenses(System.Int32,SuperOffice.License.UserType)
  - SuperOffice.License.LicenseManager.IsUnitTesting
  - SuperOffice.License.LicenseManager.LicenseExists(System.String)
  - SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeeded
  - SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDb(SuperOffice.License.LicenseInfo)
  - SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo,System.IO.Stream)
  - SuperOffice.License.LicenseManager.RemoveLicenseFromDB(System.String)
  - SuperOffice.License.LicenseManager.SuperOfficeOwner
  - SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
  - SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  - SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  - SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  langs:
  - csharp
  - vb
  name: LicenseManager
  nameWithType: LicenseManager
  fullName: SuperOffice.License.LicenseManager
  type: Class
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Utility class for dealing with licenses
  example: []
  syntax:
    content: >-
      [SoInject("Database")]

      public class LicenseManager
    content.vb: >-
      <SoInject("Database")>

      Public Class LicenseManager
  inheritance:
  - System.Object
  derivedClasses:
  - SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.License.LicenseManager.EnumUtil.MapEnums``2
  - SuperOffice.License.LicenseManager.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  attributes:
  - type: SuperOffice.Factory.SoInjectAttribute
    ctor: SuperOffice.Factory.SoInjectAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Database
- uid: SuperOffice.License.LicenseManager.SuperOfficeOwner
  commentId: F:SuperOffice.License.LicenseManager.SuperOfficeOwner
  id: SuperOfficeOwner
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: SuperOfficeOwner
  nameWithType: LicenseManager.SuperOfficeOwner
  fullName: SuperOffice.License.LicenseManager.SuperOfficeOwner
  type: Field
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: public const string SuperOfficeOwner = "superoffice"
    return:
      type: System.String
    content.vb: Public Const SuperOfficeOwner As String = "superoffice"
- uid: SuperOffice.License.LicenseManager.GetCurrent
  commentId: M:SuperOffice.License.LicenseManager.GetCurrent
  id: GetCurrent
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetCurrent()
  nameWithType: LicenseManager.GetCurrent()
  fullName: SuperOffice.License.LicenseManager.GetCurrent()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: >-
    Get the current <xref href="SuperOffice.License.LicenseManager" data-throw-if-not-resolved="false"></xref>. If constructing a new class instance and nextCheckDate is in the past, an automatic

    update is attempted.
  example: []
  syntax:
    content: public static LicenseManager GetCurrent()
    return:
      type: SuperOffice.License.LicenseManager
      description: ''
    content.vb: Public Shared Function GetCurrent() As LicenseManager
  overload: SuperOffice.License.LicenseManager.GetCurrent*
- uid: SuperOffice.License.LicenseManager.GetModuleOwners
  commentId: M:SuperOffice.License.LicenseManager.GetModuleOwners
  id: GetModuleOwners
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetModuleOwners()
  nameWithType: LicenseManager.GetModuleOwners()
  fullName: SuperOffice.License.LicenseManager.GetModuleOwners()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get all the module owners.
  example: []
  syntax:
    content: public ModuleOwnerRow[] GetModuleOwners()
    return:
      type: SuperOffice.CRM.Rows.ModuleOwnerRow[]
      description: Array of module owners
    content.vb: Public Function GetModuleOwners() As ModuleOwnerRow()
  overload: SuperOffice.License.LicenseManager.GetModuleOwners*
- uid: SuperOffice.License.LicenseManager.GetModuleOwner(System.String)
  commentId: M:SuperOffice.License.LicenseManager.GetModuleOwner(System.String)
  id: GetModuleOwner(System.String)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetModuleOwner(string)
  nameWithType: LicenseManager.GetModuleOwner(string)
  fullName: SuperOffice.License.LicenseManager.GetModuleOwner(string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get module owner from the owners name.
  example: []
  syntax:
    content: public ModuleOwnerRow GetModuleOwner(string moduleOwner)
    parameters:
    - id: moduleOwner
      type: System.String
      description: Name of hte module owner
    return:
      type: SuperOffice.CRM.Rows.ModuleOwnerRow
      description: Module owner
    content.vb: Public Function GetModuleOwner(moduleOwner As String) As ModuleOwnerRow
  overload: SuperOffice.License.LicenseManager.GetModuleOwner*
  nameWithType.vb: LicenseManager.GetModuleOwner(String)
  fullName.vb: SuperOffice.License.LicenseManager.GetModuleOwner(String)
  name.vb: GetModuleOwner(String)
- uid: SuperOffice.License.LicenseManager.GetCurrentLicense(System.String,System.DateTime@)
  commentId: M:SuperOffice.License.LicenseManager.GetCurrentLicense(System.String,System.DateTime@)
  id: GetCurrentLicense(System.String,System.DateTime@)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetCurrentLicense(string, out DateTime)
  nameWithType: LicenseManager.GetCurrentLicense(string, out DateTime)
  fullName: SuperOffice.License.LicenseManager.GetCurrentLicense(string, out System.DateTime)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get the current license from a module owner.
  example: []
  syntax:
    content: public LicenseInfo GetCurrentLicense(string moduleOwner, out DateTime accumulatedNextCheckDate)
    parameters:
    - id: moduleOwner
      type: System.String
      description: Name of the module owner
    - id: accumulatedNextCheckDate
      type: System.DateTime
    return:
      type: SuperOffice.License.LicenseInfo
      description: License as stored in the database.
    content.vb: Public Function GetCurrentLicense(moduleOwner As String, accumulatedNextCheckDate As Date) As LicenseInfo
  overload: SuperOffice.License.LicenseManager.GetCurrentLicense*
  nameWithType.vb: LicenseManager.GetCurrentLicense(String, Date)
  fullName.vb: SuperOffice.License.LicenseManager.GetCurrentLicense(String, Date)
  name.vb: GetCurrentLicense(String, Date)
- uid: SuperOffice.License.LicenseManager.GetLicenseFromDB(System.String)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseFromDB(System.String)
  id: GetLicenseFromDB(System.String)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseFromDB(string)
  nameWithType: LicenseManager.GetLicenseFromDB(string)
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromDB(string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get license, with usage, as it is stored in the database for one particular module owner.
  example: []
  syntax:
    content: public ExtendedLicenseInfo GetLicenseFromDB(string ownerName)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the module owner.
    return:
      type: SuperOffice.License.ExtendedLicenseInfo
      description: License, with usage, as it is stored in the database. NULL if no license found.
    content.vb: Public Function GetLicenseFromDB(ownerName As String) As ExtendedLicenseInfo
  overload: SuperOffice.License.LicenseManager.GetLicenseFromDB*
  nameWithType.vb: LicenseManager.GetLicenseFromDB(String)
  fullName.vb: SuperOffice.License.LicenseManager.GetLicenseFromDB(String)
  name.vb: GetLicenseFromDB(String)
- uid: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDB
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDB
  id: GetLicenseForAllOwnersFromDB
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseForAllOwnersFromDB()
  nameWithType: LicenseManager.GetLicenseForAllOwnersFromDB()
  fullName: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDB()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get all licenses, with usage, from all module owners as they are stored in the database
  example: []
  syntax:
    content: public ExtendedLicenseInfo[] GetLicenseForAllOwnersFromDB()
    return:
      type: SuperOffice.License.ExtendedLicenseInfo[]
      description: Array of licenses, with usage, as it is stored in the database.
    content.vb: Public Function GetLicenseForAllOwnersFromDB() As ExtendedLicenseInfo()
  overload: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDB*
- uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignments(System.String,System.Boolean,System.String)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignments(System.String,System.Boolean,System.String)
  id: GetLicenseFromLicenseServerWithAssignments(System.String,System.Boolean,System.String)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseFromLicenseServerWithAssignments(string, bool, string)
  nameWithType: LicenseManager.GetLicenseFromLicenseServerWithAssignments(string, bool, string)
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignments(string, bool, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get License from the license server for a particular module owner. Validates that the license is signed ok.
  example: []
  syntax:
    content: public ExtendedLicenseInfoWithAssignments GetLicenseFromLicenseServerWithAssignments(string ownerName, bool isTestUpgrade = false, string licenseUrl = null)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the module owner to get license from.
    - id: isTestUpgrade
      type: System.Boolean
      description: Is this a test upgrade? Default false.
    - id: licenseUrl
      type: System.String
    return:
      type: SuperOffice.License.ExtendedLicenseInfoWithAssignments
      description: >-
        License from the database, from the license server and with new license assignments, and possibly new serial number.
                    Possible exception if license server has not implemented method.
    content.vb: Public Function GetLicenseFromLicenseServerWithAssignments(ownerName As String, isTestUpgrade As Boolean = False, licenseUrl As String = Nothing) As ExtendedLicenseInfoWithAssignments
  overload: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignments*
  nameWithType.vb: LicenseManager.GetLicenseFromLicenseServerWithAssignments(String, Boolean, String)
  fullName.vb: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignments(String, Boolean, String)
  name.vb: GetLicenseFromLicenseServerWithAssignments(String, Boolean, String)
- uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServer(System.String,System.String)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseFromLicenseServer(System.String,System.String)
  id: GetLicenseFromLicenseServer(System.String,System.String)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseFromLicenseServer(string, string)
  nameWithType: LicenseManager.GetLicenseFromLicenseServer(string, string)
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServer(string, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get License from the license server for a particular module owner.
  example: []
  syntax:
    content: public ExtendedLicenseInfo GetLicenseFromLicenseServer(string ownerName, string additionalInfo = null)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the module owner to get license from.
    - id: additionalInfo
      type: System.String
    return:
      type: SuperOffice.License.ExtendedLicenseInfo
      description: License from the database, from the license server and with usage.
    content.vb: Public Function GetLicenseFromLicenseServer(ownerName As String, additionalInfo As String = Nothing) As ExtendedLicenseInfo
  overload: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServer*
  nameWithType.vb: LicenseManager.GetLicenseFromLicenseServer(String, String)
  fullName.vb: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServer(String, String)
  name.vb: GetLicenseFromLicenseServer(String, String)
- uid: SuperOffice.License.LicenseManager.GetLicenseFromFile(System.String)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseFromFile(System.String)
  id: GetLicenseFromFile(System.String)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseFromFile(string)
  nameWithType: LicenseManager.GetLicenseFromFile(string)
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromFile(string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Parse a license from file content for a particular module owner.
  example: []
  syntax:
    content: public ExtendedLicenseInfo GetLicenseFromFile(string fileContent)
    parameters:
    - id: fileContent
      type: System.String
      description: Content of license file.
    return:
      type: SuperOffice.License.ExtendedLicenseInfo
      description: License from the database, from file and with usage.
    content.vb: Public Function GetLicenseFromFile(fileContent As String) As ExtendedLicenseInfo
  overload: SuperOffice.License.LicenseManager.GetLicenseFromFile*
  nameWithType.vb: LicenseManager.GetLicenseFromFile(String)
  fullName.vb: SuperOffice.License.LicenseManager.GetLicenseFromFile(String)
  name.vb: GetLicenseFromFile(String)
- uid: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDb(SuperOffice.License.LicenseInfo)
  commentId: M:SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDb(SuperOffice.License.LicenseInfo)
  id: MapAndValidateLicenseWithDb(SuperOffice.License.LicenseInfo)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: MapAndValidateLicenseWithDb(LicenseInfo)
  nameWithType: LicenseManager.MapAndValidateLicenseWithDb(LicenseInfo)
  fullName: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDb(SuperOffice.License.LicenseInfo)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: >-
    Get the current license from the database, map the incoming one on to it, and

    validate to see if the result is acceptable (can be Activated)
  example: []
  syntax:
    content: public ExtendedLicenseInfo MapAndValidateLicenseWithDb(LicenseInfo newLicense)
    parameters:
    - id: newLicense
      type: SuperOffice.License.LicenseInfo
      description: ''
    return:
      type: SuperOffice.License.ExtendedLicenseInfo
      description: License including activation flags and problem tag
    content.vb: Public Function MapAndValidateLicenseWithDb(newLicense As LicenseInfo) As ExtendedLicenseInfo
  overload: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDb*
- uid: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServer(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense)
  commentId: M:SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServer(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense)
  id: GetModuleLicenseHistoryFromLicenseServer(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetModuleLicenseHistoryFromLicenseServer(ExtendedLicenseInfo, ExtendedModuleLicense)
  nameWithType: LicenseManager.GetModuleLicenseHistoryFromLicenseServer(ExtendedLicenseInfo, ExtendedModuleLicense)
  fullName: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServer(SuperOffice.License.ExtendedLicenseInfo, SuperOffice.License.ExtendedModuleLicense)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get details about a license from the license server.
  example: []
  syntax:
    content: public string GetModuleLicenseHistoryFromLicenseServer(ExtendedLicenseInfo licenseInfo, ExtendedModuleLicense moduleLicense)
    parameters:
    - id: licenseInfo
      type: SuperOffice.License.ExtendedLicenseInfo
      description: Description of the license
    - id: moduleLicense
      type: SuperOffice.License.ExtendedModuleLicense
      description: Information about a particular module to get information for.
    return:
      type: System.String
      description: Information about a particular license module.
    content.vb: Public Function GetModuleLicenseHistoryFromLicenseServer(licenseInfo As ExtendedLicenseInfo, moduleLicense As ExtendedModuleLicense) As String
  overload: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServer*
- uid: SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  commentId: M:SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  id: ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ValidatePublicKey(SignedPublicKey)
  nameWithType: LicenseManager.ValidatePublicKey(SignedPublicKey)
  fullName: SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Validate a Public Key
  example: []
  syntax:
    content: public static void ValidatePublicKey(SignedPublicKey publicKey)
    parameters:
    - id: publicKey
      type: SuperOffice.License.SignedPublicKey
      description: Public key to validate
    content.vb: Public Shared Sub ValidatePublicKey(publicKey As SignedPublicKey)
  overload: SuperOffice.License.LicenseManager.ValidatePublicKey*
  exceptions:
  - type: SuperOffice.Exceptions.SoException
    commentId: T:SuperOffice.Exceptions.SoException
    description: Throw if failed to validate public key.
- uid: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  commentId: M:SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  id: ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ValidateLicenseInfo(LicenseInfo, bool)
  nameWithType: LicenseManager.ValidateLicenseInfo(LicenseInfo, bool)
  fullName: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo, bool)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Validate that a license is consistent.
  example: []
  syntax:
    content: public void ValidateLicenseInfo(LicenseInfo licenseInfo, bool checkSerialNumber = true)
    parameters:
    - id: licenseInfo
      type: SuperOffice.License.LicenseInfo
      description: License to validate consistancy for
    - id: checkSerialNumber
      type: System.Boolean
      description: Check that Serial Number is consistent. Throws exception if serial number is inconsistent if true. Default = true.
    content.vb: Public Sub ValidateLicenseInfo(licenseInfo As LicenseInfo, checkSerialNumber As Boolean = True)
  overload: SuperOffice.License.LicenseManager.ValidateLicenseInfo*
  exceptions:
  - type: SuperOffice.Exceptions.SoException
    commentId: T:SuperOffice.Exceptions.SoException
    description: Thrown if license is not valid.
  nameWithType.vb: LicenseManager.ValidateLicenseInfo(LicenseInfo, Boolean)
  fullName.vb: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo, Boolean)
  name.vb: ValidateLicenseInfo(LicenseInfo, Boolean)
- uid: SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
  commentId: M:SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
  id: ToInfo(SuperOffice.License.ModuleLicense)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ToInfo(ModuleLicense)
  nameWithType: LicenseManager.ToInfo(ModuleLicense)
  fullName: SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: public static string ToInfo(ModuleLicense info)
    parameters:
    - id: info
      type: SuperOffice.License.ModuleLicense
    return:
      type: System.String
    content.vb: Public Shared Function ToInfo(info As ModuleLicense) As String
  overload: SuperOffice.License.LicenseManager.ToInfo*
- uid: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  commentId: M:SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  id: ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ValidateLicenseInfo(ExtendedLicenseInfo)
  nameWithType: LicenseManager.ValidateLicenseInfo(ExtendedLicenseInfo)
  fullName: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Validate that a license is consistent.
  example: []
  syntax:
    content: public void ValidateLicenseInfo(ExtendedLicenseInfo licenseInfo)
    parameters:
    - id: licenseInfo
      type: SuperOffice.License.ExtendedLicenseInfo
      description: License to validate consistance for
    content.vb: Public Sub ValidateLicenseInfo(licenseInfo As ExtendedLicenseInfo)
  overload: SuperOffice.License.LicenseManager.ValidateLicenseInfo*
  exceptions:
  - type: SuperOffice.Exceptions.SoException
    commentId: T:SuperOffice.Exceptions.SoException
    description: Thrown if license is not valid.
- uid: SuperOffice.License.LicenseManager.ActivateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean)
  commentId: M:SuperOffice.License.LicenseManager.ActivateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean)
  id: ActivateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ActivateLicenseInfo(ExtendedLicenseInfo, bool, bool)
  nameWithType: LicenseManager.ActivateLicenseInfo(ExtendedLicenseInfo, bool, bool)
  fullName: SuperOffice.License.LicenseManager.ActivateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo, bool, bool)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Save a new license to the database.
  remarks: <xref href="SuperOffice.License.LicenseManager.ValidateNewLicence(SuperOffice.License.ExtendedLicenseInfo%2cSystem.Boolean%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> is called to validate the license before it is accepted and saved.
  example: []
  syntax:
    content: public void ActivateLicenseInfo(ExtendedLicenseInfo newLicense, bool checkSerialNumber = true, bool checkUserLicense = true)
    parameters:
    - id: newLicense
      type: SuperOffice.License.ExtendedLicenseInfo
      description: New license to save to the database.
    - id: checkSerialNumber
      type: System.Boolean
    - id: checkUserLicense
      type: System.Boolean
    content.vb: Public Sub ActivateLicenseInfo(newLicense As ExtendedLicenseInfo, checkSerialNumber As Boolean = True, checkUserLicense As Boolean = True)
  overload: SuperOffice.License.LicenseManager.ActivateLicenseInfo*
  exceptions:
  - type: SuperOffice.Exceptions.SoException
    commentId: T:SuperOffice.Exceptions.SoException
    description: Thrown if license is not valid.
  nameWithType.vb: LicenseManager.ActivateLicenseInfo(ExtendedLicenseInfo, Boolean, Boolean)
  fullName.vb: SuperOffice.License.LicenseManager.ActivateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo, Boolean, Boolean)
  name.vb: ActivateLicenseInfo(ExtendedLicenseInfo, Boolean, Boolean)
- uid: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServer(System.String,System.String)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServer(System.String,System.String)
  id: GetLicenseStateFromLicenseServer(System.String,System.String)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetLicenseStateFromLicenseServer(string, string)
  nameWithType: LicenseManager.GetLicenseStateFromLicenseServer(string, string)
  fullName: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServer(string, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Ping the license server and get the current state.
  example: []
  syntax:
    content: public CheckLicenseStatusResult GetLicenseStateFromLicenseServer(string ownerName, string additionalInfo = null)
    parameters:
    - id: ownerName
      type: System.String
      description: Name of the owner to ping.
    - id: additionalInfo
      type: System.String
      description: 'Extra info - packed into NetServer version: "TestUpgrade=true"'
    return:
      type: SuperOffice.License.CheckLicenseStatusResult
      description: Result obtained by the license server.
    content.vb: Public Function GetLicenseStateFromLicenseServer(ownerName As String, additionalInfo As String = Nothing) As CheckLicenseStatusResult
  overload: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServer*
  nameWithType.vb: LicenseManager.GetLicenseStateFromLicenseServer(String, String)
  fullName.vb: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServer(String, String)
  name.vb: GetLicenseStateFromLicenseServer(String, String)
- uid: SuperOffice.License.LicenseManager.ChangeSerialNumber(System.String,System.String)
  commentId: M:SuperOffice.License.LicenseManager.ChangeSerialNumber(System.String,System.String)
  id: ChangeSerialNumber(System.String,System.String)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: ChangeSerialNumber(string, string)
  nameWithType: LicenseManager.ChangeSerialNumber(string, string)
  fullName: SuperOffice.License.LicenseManager.ChangeSerialNumber(string, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Change the new serial number for the installation.
  example: []
  syntax:
    content: public void ChangeSerialNumber(string newCompanyName, string newSerialNumber)
    parameters:
    - id: newCompanyName
      type: System.String
      description: The new company name
    - id: newSerialNumber
      type: System.String
      description: New serial number to change to.
    content.vb: Public Sub ChangeSerialNumber(newCompanyName As String, newSerialNumber As String)
  overload: SuperOffice.License.LicenseManager.ChangeSerialNumber*
  nameWithType.vb: LicenseManager.ChangeSerialNumber(String, String)
  fullName.vb: SuperOffice.License.LicenseManager.ChangeSerialNumber(String, String)
  name.vb: ChangeSerialNumber(String, String)
- uid: SuperOffice.License.LicenseManager.GetShopUrl(System.String,System.String)
  commentId: M:SuperOffice.License.LicenseManager.GetShopUrl(System.String,System.String)
  id: GetShopUrl(System.String,System.String)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetShopUrl(string, string)
  nameWithType: LicenseManager.GetShopUrl(string, string)
  fullName: SuperOffice.License.LicenseManager.GetShopUrl(string, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get the shop url for a module owner, including a context string
  example: []
  syntax:
    content: public string GetShopUrl(string ownerName, string context)
    parameters:
    - id: ownerName
      type: System.String
      description: ''
    - id: context
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetShopUrl(ownerName As String, context As String) As String
  overload: SuperOffice.License.LicenseManager.GetShopUrl*
  nameWithType.vb: LicenseManager.GetShopUrl(String, String)
  fullName.vb: SuperOffice.License.LicenseManager.GetShopUrl(String, String)
  name.vb: GetShopUrl(String, String)
- uid: SuperOffice.License.LicenseManager.RemoveLicenseFromDB(System.String)
  commentId: M:SuperOffice.License.LicenseManager.RemoveLicenseFromDB(System.String)
  id: RemoveLicenseFromDB(System.String)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: RemoveLicenseFromDB(string)
  nameWithType: LicenseManager.RemoveLicenseFromDB(string)
  fullName: SuperOffice.License.LicenseManager.RemoveLicenseFromDB(string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Remove all information about a licenses from a module owner from the database
  example: []
  syntax:
    content: public void RemoveLicenseFromDB(string ownerName)
    parameters:
    - id: ownerName
      type: System.String
      description: ''
    content.vb: Public Sub RemoveLicenseFromDB(ownerName As String)
  overload: SuperOffice.License.LicenseManager.RemoveLicenseFromDB*
  nameWithType.vb: LicenseManager.RemoveLicenseFromDB(String)
  fullName.vb: SuperOffice.License.LicenseManager.RemoveLicenseFromDB(String)
  name.vb: RemoveLicenseFromDB(String)
- uid: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32)
  commentId: M:SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32)
  id: GetGrantedModuleLicenses(System.Int32)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetGrantedModuleLicenses(int)
  nameWithType: LicenseManager.GetGrantedModuleLicenses(int)
  fullName: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(int)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get granted module licenses for the provided associate.
  example: []
  syntax:
    content: public GrantedModuleLicense[] GetGrantedModuleLicenses(int associateId)
    parameters:
    - id: associateId
      type: System.Int32
      description: Associate id's of the associate to get granted module licenses for.
    return:
      type: SuperOffice.CRM.Services.GrantedModuleLicense[]
      description: Granted module licenses
    content.vb: Public Function GetGrantedModuleLicenses(associateId As Integer) As GrantedModuleLicense()
  overload: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses*
  nameWithType.vb: LicenseManager.GetGrantedModuleLicenses(Integer)
  fullName.vb: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(Integer)
  name.vb: GetGrantedModuleLicenses(Integer)
- uid: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32,System.Int32)
  commentId: M:SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32,System.Int32)
  id: GetGrantedModuleLicenses(System.Int32,System.Int32)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetGrantedModuleLicenses(int, int)
  nameWithType: LicenseManager.GetGrantedModuleLicenses(int, int)
  fullName: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(int, int)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get granted module licenses for the provided associate.
  example: []
  syntax:
    content: public GrantedModuleLicense[] GetGrantedModuleLicenses(int associateId, int satelliteId)
    parameters:
    - id: associateId
      type: System.Int32
      description: Associate id's of the associate to get granted module licenses for.
    - id: satelliteId
      type: System.Int32
      description: Satellite id of the satellite the associate is logging on to.
    return:
      type: SuperOffice.CRM.Services.GrantedModuleLicense[]
      description: Granted module licenses
    content.vb: Public Function GetGrantedModuleLicenses(associateId As Integer, satelliteId As Integer) As GrantedModuleLicense()
  overload: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses*
  nameWithType.vb: LicenseManager.GetGrantedModuleLicenses(Integer, Integer)
  fullName.vb: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(Integer, Integer)
  name.vb: GetGrantedModuleLicenses(Integer, Integer)
- uid: SuperOffice.License.LicenseManager.GetSatelliteLicenses(System.Int32,System.Boolean)
  commentId: M:SuperOffice.License.LicenseManager.GetSatelliteLicenses(System.Int32,System.Boolean)
  id: GetSatelliteLicenses(System.Int32,System.Boolean)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetSatelliteLicenses(int, bool)
  nameWithType: LicenseManager.GetSatelliteLicenses(int, bool)
  fullName: SuperOffice.License.LicenseManager.GetSatelliteLicenses(int, bool)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Obtain information about satellite module licenses
  example: []
  syntax:
    content: public SatelliteModuleLicenseOwner[] GetSatelliteLicenses(int satelliteId, bool fetchForCentralIfSatelliteIdIsZero)
    parameters:
    - id: satelliteId
      type: System.Int32
      description: Satellite id to check for satellite module licenses. 0 indicates central database
    - id: fetchForCentralIfSatelliteIdIsZero
      type: System.Boolean
    return:
      type: SuperOffice.License.SatelliteModuleLicenseOwner[]
      description: Satellite module licenses grouped by owners.
    content.vb: Public Function GetSatelliteLicenses(satelliteId As Integer, fetchForCentralIfSatelliteIdIsZero As Boolean) As SatelliteModuleLicenseOwner()
  overload: SuperOffice.License.LicenseManager.GetSatelliteLicenses*
  nameWithType.vb: LicenseManager.GetSatelliteLicenses(Integer, Boolean)
  fullName.vb: SuperOffice.License.LicenseManager.GetSatelliteLicenses(Integer, Boolean)
  name.vb: GetSatelliteLicenses(Integer, Boolean)
- uid: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCount(System.Int32[])
  commentId: M:SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCount(System.Int32[])
  id: GetSatelliteLicenseUsageCount(System.Int32[])
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetSatelliteLicenseUsageCount(params int[])
  nameWithType: LicenseManager.GetSatelliteLicenseUsageCount(params int[])
  fullName: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCount(params int[])
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Provided  a list of module id's, count how many times each license is used.
  example: []
  syntax:
    content: public Dictionary<int, int> GetSatelliteLicenseUsageCount(params int[] satelliteModules)
    parameters:
    - id: satelliteModules
      type: System.Int32[]
      description: Module id's to count usage of
    return:
      type: System.Collections.Generic.Dictionary{System.Int32,System.Int32}
      description: Dictionary containing module id as a key and how many times a license is used as value.
    content.vb: Public Function GetSatelliteLicenseUsageCount(ParamArray satelliteModules As Integer()) As Dictionary(Of Integer, Integer)
  overload: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCount*
  nameWithType.vb: LicenseManager.GetSatelliteLicenseUsageCount(ParamArray Integer())
  fullName.vb: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCount(ParamArray Integer())
  name.vb: GetSatelliteLicenseUsageCount(ParamArray Integer())
- uid: SuperOffice.License.LicenseManager.GetUserLicenses(System.Int32,SuperOffice.License.UserType)
  commentId: M:SuperOffice.License.LicenseManager.GetUserLicenses(System.Int32,SuperOffice.License.UserType)
  id: GetUserLicenses(System.Int32,SuperOffice.License.UserType)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetUserLicenses(int, UserType)
  nameWithType: LicenseManager.GetUserLicenses(int, UserType)
  fullName: SuperOffice.License.LicenseManager.GetUserLicenses(int, SuperOffice.License.UserType)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Obtain information about associate module licenses
  example: []
  syntax:
    content: public AssociateModuleLicenseOwner[] GetUserLicenses(int associateId, UserType allowedType)
    parameters:
    - id: associateId
      type: System.Int32
      description: Associate id to check for associate module licenses
    - id: allowedType
      type: SuperOffice.License.UserType
    return:
      type: SuperOffice.License.AssociateModuleLicenseOwner[]
      description: Associate module licenses grouped by owners.
    content.vb: Public Function GetUserLicenses(associateId As Integer, allowedType As UserType) As AssociateModuleLicenseOwner()
  overload: SuperOffice.License.LicenseManager.GetUserLicenses*
  nameWithType.vb: LicenseManager.GetUserLicenses(Integer, UserType)
  fullName.vb: SuperOffice.License.LicenseManager.GetUserLicenses(Integer, SuperOffice.License.UserType)
  name.vb: GetUserLicenses(Integer, UserType)
- uid: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCount(SuperOffice.Data.AssociateType,System.Int32[])
  commentId: M:SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCount(SuperOffice.Data.AssociateType,System.Int32[])
  id: GetAssociateLicenseUsageCount(SuperOffice.Data.AssociateType,System.Int32[])
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: GetAssociateLicenseUsageCount(AssociateType, params int[])
  nameWithType: LicenseManager.GetAssociateLicenseUsageCount(AssociateType, params int[])
  fullName: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCount(SuperOffice.Data.AssociateType, params int[])
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: >-
    Provided an associate type and a list of module id's, count how many times each license is used.

    Deleted associates are not counted. License assignments with 0 license-numbers are not counted.
  example: []
  syntax:
    content: public Dictionary<int, int> GetAssociateLicenseUsageCount(AssociateType associateType, params int[] associateModules)
    parameters:
    - id: associateType
      type: SuperOffice.Data.AssociateType
      description: Associate Type the license is relevant for (employee, external-user, anonymous).
    - id: associateModules
      type: System.Int32[]
      description: Module License ids to count usage of
    return:
      type: System.Collections.Generic.Dictionary{System.Int32,System.Int32}
      description: Dictionary containing module id as a key and how many times a license is used as value.
    content.vb: Public Function GetAssociateLicenseUsageCount(associateType As AssociateType, ParamArray associateModules As Integer()) As Dictionary(Of Integer, Integer)
  overload: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCount*
  nameWithType.vb: LicenseManager.GetAssociateLicenseUsageCount(AssociateType, ParamArray Integer())
  fullName.vb: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCount(SuperOffice.Data.AssociateType, ParamArray Integer())
  name.vb: GetAssociateLicenseUsageCount(AssociateType, ParamArray Integer())
- uid: SuperOffice.License.LicenseManager.LicenseExists(System.String)
  commentId: M:SuperOffice.License.LicenseManager.LicenseExists(System.String)
  id: LicenseExists(System.String)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: LicenseExists(string)
  nameWithType: LicenseManager.LicenseExists(string)
  fullName: SuperOffice.License.LicenseManager.LicenseExists(string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Determine if a license (owner.module) exists at all - regardsless of numbers, assignment etc
  example: []
  syntax:
    content: public bool LicenseExists(string license)
    parameters:
    - id: license
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function LicenseExists(license As String) As Boolean
  overload: SuperOffice.License.LicenseManager.LicenseExists*
  nameWithType.vb: LicenseManager.LicenseExists(String)
  fullName.vb: SuperOffice.License.LicenseManager.LicenseExists(String)
  name.vb: LicenseExists(String)
- uid: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeeded
  commentId: M:SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeeded
  id: LoadNewLicenseFromServerIfNeeded
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: LoadNewLicenseFromServerIfNeeded()
  nameWithType: LicenseManager.LoadNewLicenseFromServerIfNeeded()
  fullName: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeeded()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Check nextCheckDate on all modules, and call server for those that are in the past
  remarks: The virtual <xref href="SuperOffice.License.LicenseManager.AllowAutoUpdate" data-throw-if-not-resolved="false"></xref> flag can be used to inhibit auto-updating
  example: []
  syntax:
    content: public void LoadNewLicenseFromServerIfNeeded()
    content.vb: Public Sub LoadNewLicenseFromServerIfNeeded()
  overload: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeeded*
- uid: SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo,System.IO.Stream)
  commentId: M:SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo,System.IO.Stream)
  id: PopulateSignedPublicKey(SuperOffice.License.LicenseInfo,System.IO.Stream)
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: PopulateSignedPublicKey(LicenseInfo, Stream)
  nameWithType: LicenseManager.PopulateSignedPublicKey(LicenseInfo, Stream)
  fullName: SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo, System.IO.Stream)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Get a SignedPublicKey from a stream
  example: []
  syntax:
    content: public static void PopulateSignedPublicKey(LicenseInfo licenseInfo, Stream publicKeyStream)
    parameters:
    - id: licenseInfo
      type: SuperOffice.License.LicenseInfo
      description: License info object to populate with public key from stream
    - id: publicKeyStream
      type: System.IO.Stream
      description: Stream to read the signed public key from.
    content.vb: Public Shared Sub PopulateSignedPublicKey(licenseInfo As LicenseInfo, publicKeyStream As Stream)
  overload: SuperOffice.License.LicenseManager.PopulateSignedPublicKey*
- uid: SuperOffice.License.LicenseManager.AllowAutoUpdate
  commentId: P:SuperOffice.License.LicenseManager.AllowAutoUpdate
  id: AllowAutoUpdate
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: AllowAutoUpdate
  nameWithType: LicenseManager.AllowAutoUpdate
  fullName: SuperOffice.License.LicenseManager.AllowAutoUpdate
  type: Property
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: protected virtual bool AllowAutoUpdate { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Overridable ReadOnly Property AllowAutoUpdate As Boolean
  overload: SuperOffice.License.LicenseManager.AllowAutoUpdate*
- uid: SuperOffice.License.LicenseManager.IsUnitTesting
  commentId: P:SuperOffice.License.LicenseManager.IsUnitTesting
  id: IsUnitTesting
  parent: SuperOffice.License.LicenseManager
  langs:
  - csharp
  - vb
  name: IsUnitTesting
  nameWithType: LicenseManager.IsUnitTesting
  fullName: SuperOffice.License.LicenseManager.IsUnitTesting
  type: Property
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Turn off some checking to enable unit tests to run
  example: []
  syntax:
    content: >-
      [AllowedMultitenantStatic]

      public static bool IsUnitTesting { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <AllowedMultitenantStatic>

      Public Shared Property IsUnitTesting As Boolean
  overload: SuperOffice.License.LicenseManager.IsUnitTesting*
  attributes:
  - type: SuperOffice.Factory.AllowedMultitenantStaticAttribute
    ctor: SuperOffice.Factory.AllowedMultitenantStaticAttribute.#ctor
    arguments: []
references:
- uid: SuperOffice.License
  commentId: N:SuperOffice.License
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.License
  nameWithType: SuperOffice.License
  fullName: SuperOffice.License
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.License
    name: License
    isExternal: true
    href: SuperOffice.License.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.License
    name: License
    isExternal: true
    href: SuperOffice.License.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: SuperOffice.License.LicenseManager.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<LicenseManager, To>(LicenseManager)
  nameWithType: EnumUtil.MapEnums<LicenseManager, To>(LicenseManager)
  fullName: EnumUtil.MapEnums<SuperOffice.License.LicenseManager, To>(SuperOffice.License.LicenseManager)
  nameWithType.vb: EnumUtil.MapEnums(Of LicenseManager, To)(LicenseManager)
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.License.LicenseManager, To)(SuperOffice.License.LicenseManager)
  name.vb: MapEnums(Of LicenseManager, To)(LicenseManager)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(SuperOffice.License.LicenseManager)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(SuperOffice.License.LicenseManager)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: )
- uid: SuperOffice.License.LicenseManager.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<LicenseManager, To>(LicenseManager)
  nameWithType: Converters.MapEnums<LicenseManager, To>(LicenseManager)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.LicenseManager, To>(SuperOffice.License.LicenseManager)
  nameWithType.vb: Converters.MapEnums(Of LicenseManager, To)(LicenseManager)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.LicenseManager, To)(SuperOffice.License.LicenseManager)
  name.vb: MapEnums(Of LicenseManager, To)(LicenseManager)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.License.LicenseManager)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.License.LicenseManager)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.License.LicenseManager
    name: LicenseManager
    isExternal: true
    href: SuperOffice.License.LicenseManager.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  href: EnumUtil.html
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: SuperOffice.License.LicenseManager
  commentId: T:SuperOffice.License.LicenseManager
  parent: SuperOffice.License
  isExternal: true
  href: SuperOffice.License.LicenseManager.html
  name: LicenseManager
  nameWithType: LicenseManager
  fullName: SuperOffice.License.LicenseManager
- uid: SuperOffice.License.LicenseManager.GetCurrent*
  commentId: Overload:SuperOffice.License.LicenseManager.GetCurrent
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetCurrent
  name: GetCurrent
  nameWithType: LicenseManager.GetCurrent
  fullName: SuperOffice.License.LicenseManager.GetCurrent
- uid: SuperOffice.License.LicenseManager.GetModuleOwners*
  commentId: Overload:SuperOffice.License.LicenseManager.GetModuleOwners
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetModuleOwners
  name: GetModuleOwners
  nameWithType: LicenseManager.GetModuleOwners
  fullName: SuperOffice.License.LicenseManager.GetModuleOwners
- uid: SuperOffice.CRM.Rows.ModuleOwnerRow[]
  isExternal: true
  href: SuperOffice.CRM.Rows.ModuleOwnerRow.html
  name: ModuleOwnerRow[]
  nameWithType: ModuleOwnerRow[]
  fullName: SuperOffice.CRM.Rows.ModuleOwnerRow[]
  nameWithType.vb: ModuleOwnerRow()
  fullName.vb: SuperOffice.CRM.Rows.ModuleOwnerRow()
  name.vb: ModuleOwnerRow()
  spec.csharp:
  - uid: SuperOffice.CRM.Rows.ModuleOwnerRow
    name: ModuleOwnerRow
    isExternal: true
    href: SuperOffice.CRM.Rows.ModuleOwnerRow.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.CRM.Rows.ModuleOwnerRow
    name: ModuleOwnerRow
    isExternal: true
    href: SuperOffice.CRM.Rows.ModuleOwnerRow.html
  - name: (
  - name: )
- uid: SuperOffice.License.LicenseManager.GetModuleOwner*
  commentId: Overload:SuperOffice.License.LicenseManager.GetModuleOwner
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetModuleOwner_System_String_
  name: GetModuleOwner
  nameWithType: LicenseManager.GetModuleOwner
  fullName: SuperOffice.License.LicenseManager.GetModuleOwner
- uid: SuperOffice.CRM.Rows.ModuleOwnerRow
  commentId: T:SuperOffice.CRM.Rows.ModuleOwnerRow
  parent: SuperOffice.CRM.Rows
  isExternal: true
  href: SuperOffice.CRM.Rows.ModuleOwnerRow.html
  name: ModuleOwnerRow
  nameWithType: ModuleOwnerRow
  fullName: SuperOffice.CRM.Rows.ModuleOwnerRow
- uid: SuperOffice.CRM.Rows
  commentId: N:SuperOffice.CRM.Rows
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.CRM.Rows
  nameWithType: SuperOffice.CRM.Rows
  fullName: SuperOffice.CRM.Rows
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Rows
    name: Rows
    isExternal: true
    href: SuperOffice.CRM.Rows.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Rows
    name: Rows
    isExternal: true
    href: SuperOffice.CRM.Rows.html
- uid: SuperOffice.License.LicenseManager.GetCurrentLicense*
  commentId: Overload:SuperOffice.License.LicenseManager.GetCurrentLicense
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetCurrentLicense_System_String_System_DateTime__
  name: GetCurrentLicense
  nameWithType: LicenseManager.GetCurrentLicense
  fullName: SuperOffice.License.LicenseManager.GetCurrentLicense
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
  nameWithType.vb: Date
  fullName.vb: Date
  name.vb: Date
- uid: SuperOffice.License.LicenseInfo
  commentId: T:SuperOffice.License.LicenseInfo
  parent: SuperOffice.License
  isExternal: true
  name: LicenseInfo
  nameWithType: LicenseInfo
  fullName: SuperOffice.License.LicenseInfo
- uid: SuperOffice.License.LicenseManager.GetLicenseFromDB*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseFromDB
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromDB_System_String_
  name: GetLicenseFromDB
  nameWithType: LicenseManager.GetLicenseFromDB
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromDB
- uid: SuperOffice.License.ExtendedLicenseInfo
  commentId: T:SuperOffice.License.ExtendedLicenseInfo
  parent: SuperOffice.License
  isExternal: true
  href: SuperOffice.License.ExtendedLicenseInfo.html
  name: ExtendedLicenseInfo
  nameWithType: ExtendedLicenseInfo
  fullName: SuperOffice.License.ExtendedLicenseInfo
- uid: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDB*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDB
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseForAllOwnersFromDB
  name: GetLicenseForAllOwnersFromDB
  nameWithType: LicenseManager.GetLicenseForAllOwnersFromDB
  fullName: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDB
- uid: SuperOffice.License.ExtendedLicenseInfo[]
  isExternal: true
  name: ExtendedLicenseInfo[]
  nameWithType: ExtendedLicenseInfo[]
  fullName: SuperOffice.License.ExtendedLicenseInfo[]
  nameWithType.vb: ExtendedLicenseInfo()
  fullName.vb: SuperOffice.License.ExtendedLicenseInfo()
  name.vb: ExtendedLicenseInfo()
  spec.csharp:
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: (
  - name: )
- uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignments*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignments
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromLicenseServerWithAssignments_System_String_System_Boolean_System_String_
  name: GetLicenseFromLicenseServerWithAssignments
  nameWithType: LicenseManager.GetLicenseFromLicenseServerWithAssignments
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignments
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: SuperOffice.License.ExtendedLicenseInfoWithAssignments
  commentId: T:SuperOffice.License.ExtendedLicenseInfoWithAssignments
  parent: SuperOffice.License
  isExternal: true
  href: SuperOffice.License.ExtendedLicenseInfoWithAssignments.html
  name: ExtendedLicenseInfoWithAssignments
  nameWithType: ExtendedLicenseInfoWithAssignments
  fullName: SuperOffice.License.ExtendedLicenseInfoWithAssignments
- uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServer*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseFromLicenseServer
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromLicenseServer_System_String_System_String_
  name: GetLicenseFromLicenseServer
  nameWithType: LicenseManager.GetLicenseFromLicenseServer
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServer
- uid: SuperOffice.License.LicenseManager.GetLicenseFromFile*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseFromFile
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromFile_System_String_
  name: GetLicenseFromFile
  nameWithType: LicenseManager.GetLicenseFromFile
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromFile
- uid: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDb*
  commentId: Overload:SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDb
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_MapAndValidateLicenseWithDb_SuperOffice_License_LicenseInfo_
  name: MapAndValidateLicenseWithDb
  nameWithType: LicenseManager.MapAndValidateLicenseWithDb
  fullName: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDb
- uid: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServer*
  commentId: Overload:SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServer
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetModuleLicenseHistoryFromLicenseServer_SuperOffice_License_ExtendedLicenseInfo_SuperOffice_License_ExtendedModuleLicense_
  name: GetModuleLicenseHistoryFromLicenseServer
  nameWithType: LicenseManager.GetModuleLicenseHistoryFromLicenseServer
  fullName: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServer
- uid: SuperOffice.License.ExtendedModuleLicense
  commentId: T:SuperOffice.License.ExtendedModuleLicense
  parent: SuperOffice.License
  isExternal: true
  href: SuperOffice.License.ExtendedModuleLicense.html
  name: ExtendedModuleLicense
  nameWithType: ExtendedModuleLicense
  fullName: SuperOffice.License.ExtendedModuleLicense
- uid: SuperOffice.Exceptions.SoException
  commentId: T:SuperOffice.Exceptions.SoException
  parent: SuperOffice.Exceptions
  isExternal: true
  href: SuperOffice.Exceptions.SoException.html
  name: SoException
  nameWithType: SoException
  fullName: SuperOffice.Exceptions.SoException
- uid: SuperOffice.License.LicenseManager.ValidatePublicKey*
  commentId: Overload:SuperOffice.License.LicenseManager.ValidatePublicKey
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ValidatePublicKey_SuperOffice_License_SignedPublicKey_
  name: ValidatePublicKey
  nameWithType: LicenseManager.ValidatePublicKey
  fullName: SuperOffice.License.LicenseManager.ValidatePublicKey
- uid: SuperOffice.License.SignedPublicKey
  commentId: T:SuperOffice.License.SignedPublicKey
  parent: SuperOffice.License
  isExternal: true
  name: SignedPublicKey
  nameWithType: SignedPublicKey
  fullName: SuperOffice.License.SignedPublicKey
- uid: SuperOffice.Exceptions
  commentId: N:SuperOffice.Exceptions
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Exceptions
  nameWithType: SuperOffice.Exceptions
  fullName: SuperOffice.Exceptions
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Exceptions
    name: Exceptions
    isExternal: true
    href: SuperOffice.Exceptions.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Exceptions
    name: Exceptions
    isExternal: true
    href: SuperOffice.Exceptions.html
- uid: SuperOffice.License.LicenseManager.ValidateLicenseInfo*
  commentId: Overload:SuperOffice.License.LicenseManager.ValidateLicenseInfo
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ValidateLicenseInfo_SuperOffice_License_LicenseInfo_System_Boolean_
  name: ValidateLicenseInfo
  nameWithType: LicenseManager.ValidateLicenseInfo
  fullName: SuperOffice.License.LicenseManager.ValidateLicenseInfo
- uid: SuperOffice.License.LicenseManager.ToInfo*
  commentId: Overload:SuperOffice.License.LicenseManager.ToInfo
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ToInfo_SuperOffice_License_ModuleLicense_
  name: ToInfo
  nameWithType: LicenseManager.ToInfo
  fullName: SuperOffice.License.LicenseManager.ToInfo
- uid: SuperOffice.License.ModuleLicense
  commentId: T:SuperOffice.License.ModuleLicense
  parent: SuperOffice.License
  isExternal: true
  name: ModuleLicense
  nameWithType: ModuleLicense
  fullName: SuperOffice.License.ModuleLicense
- uid: SuperOffice.License.LicenseManager.ValidateNewLicence(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean)
  commentId: M:SuperOffice.License.LicenseManager.ValidateNewLicence(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean)
  isExternal: true
- uid: SuperOffice.License.LicenseManager.ActivateLicenseInfo*
  commentId: Overload:SuperOffice.License.LicenseManager.ActivateLicenseInfo
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ActivateLicenseInfo_SuperOffice_License_ExtendedLicenseInfo_System_Boolean_System_Boolean_
  name: ActivateLicenseInfo
  nameWithType: LicenseManager.ActivateLicenseInfo
  fullName: SuperOffice.License.LicenseManager.ActivateLicenseInfo
- uid: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServer*
  commentId: Overload:SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServer
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseStateFromLicenseServer_System_String_System_String_
  name: GetLicenseStateFromLicenseServer
  nameWithType: LicenseManager.GetLicenseStateFromLicenseServer
  fullName: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServer
- uid: SuperOffice.License.CheckLicenseStatusResult
  commentId: T:SuperOffice.License.CheckLicenseStatusResult
  parent: SuperOffice.License
  isExternal: true
  name: CheckLicenseStatusResult
  nameWithType: CheckLicenseStatusResult
  fullName: SuperOffice.License.CheckLicenseStatusResult
- uid: SuperOffice.License.LicenseManager.ChangeSerialNumber*
  commentId: Overload:SuperOffice.License.LicenseManager.ChangeSerialNumber
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ChangeSerialNumber_System_String_System_String_
  name: ChangeSerialNumber
  nameWithType: LicenseManager.ChangeSerialNumber
  fullName: SuperOffice.License.LicenseManager.ChangeSerialNumber
- uid: SuperOffice.License.LicenseManager.GetShopUrl*
  commentId: Overload:SuperOffice.License.LicenseManager.GetShopUrl
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetShopUrl_System_String_System_String_
  name: GetShopUrl
  nameWithType: LicenseManager.GetShopUrl
  fullName: SuperOffice.License.LicenseManager.GetShopUrl
- uid: SuperOffice.License.LicenseManager.RemoveLicenseFromDB*
  commentId: Overload:SuperOffice.License.LicenseManager.RemoveLicenseFromDB
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_RemoveLicenseFromDB_System_String_
  name: RemoveLicenseFromDB
  nameWithType: LicenseManager.RemoveLicenseFromDB
  fullName: SuperOffice.License.LicenseManager.RemoveLicenseFromDB
- uid: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses*
  commentId: Overload:SuperOffice.License.LicenseManager.GetGrantedModuleLicenses
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetGrantedModuleLicenses_System_Int32_
  name: GetGrantedModuleLicenses
  nameWithType: LicenseManager.GetGrantedModuleLicenses
  fullName: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: SuperOffice.CRM.Services.GrantedModuleLicense[]
  isExternal: true
  href: SuperOffice.CRM.Services.GrantedModuleLicense.html
  name: GrantedModuleLicense[]
  nameWithType: GrantedModuleLicense[]
  fullName: SuperOffice.CRM.Services.GrantedModuleLicense[]
  nameWithType.vb: GrantedModuleLicense()
  fullName.vb: SuperOffice.CRM.Services.GrantedModuleLicense()
  name.vb: GrantedModuleLicense()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.GrantedModuleLicense
    name: GrantedModuleLicense
    isExternal: true
    href: SuperOffice.CRM.Services.GrantedModuleLicense.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.CRM.Services.GrantedModuleLicense
    name: GrantedModuleLicense
    isExternal: true
    href: SuperOffice.CRM.Services.GrantedModuleLicense.html
  - name: (
  - name: )
- uid: SuperOffice.License.LicenseManager.GetSatelliteLicenses*
  commentId: Overload:SuperOffice.License.LicenseManager.GetSatelliteLicenses
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetSatelliteLicenses_System_Int32_System_Boolean_
  name: GetSatelliteLicenses
  nameWithType: LicenseManager.GetSatelliteLicenses
  fullName: SuperOffice.License.LicenseManager.GetSatelliteLicenses
- uid: SuperOffice.License.SatelliteModuleLicenseOwner[]
  isExternal: true
  href: SuperOffice.License.SatelliteModuleLicenseOwner.html
  name: SatelliteModuleLicenseOwner[]
  nameWithType: SatelliteModuleLicenseOwner[]
  fullName: SuperOffice.License.SatelliteModuleLicenseOwner[]
  nameWithType.vb: SatelliteModuleLicenseOwner()
  fullName.vb: SuperOffice.License.SatelliteModuleLicenseOwner()
  name.vb: SatelliteModuleLicenseOwner()
  spec.csharp:
  - uid: SuperOffice.License.SatelliteModuleLicenseOwner
    name: SatelliteModuleLicenseOwner
    isExternal: true
    href: SuperOffice.License.SatelliteModuleLicenseOwner.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.License.SatelliteModuleLicenseOwner
    name: SatelliteModuleLicenseOwner
    isExternal: true
    href: SuperOffice.License.SatelliteModuleLicenseOwner.html
  - name: (
  - name: )
- uid: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCount*
  commentId: Overload:SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCount
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetSatelliteLicenseUsageCount_System_Int32___
  name: GetSatelliteLicenseUsageCount
  nameWithType: LicenseManager.GetSatelliteLicenseUsageCount
  fullName: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCount
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: System.Collections.Generic.Dictionary{System.Int32,System.Int32}
  commentId: T:System.Collections.Generic.Dictionary{System.Int32,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<int, int>
  nameWithType: Dictionary<int, int>
  fullName: System.Collections.Generic.Dictionary<int, int>
  nameWithType.vb: Dictionary(Of Integer, Integer)
  fullName.vb: System.Collections.Generic.Dictionary(Of Integer, Integer)
  name.vb: Dictionary(Of Integer, Integer)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: SuperOffice.License.LicenseManager.GetUserLicenses*
  commentId: Overload:SuperOffice.License.LicenseManager.GetUserLicenses
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetUserLicenses_System_Int32_SuperOffice_License_UserType_
  name: GetUserLicenses
  nameWithType: LicenseManager.GetUserLicenses
  fullName: SuperOffice.License.LicenseManager.GetUserLicenses
- uid: SuperOffice.License.UserType
  commentId: T:SuperOffice.License.UserType
  parent: SuperOffice.License
  isExternal: true
  name: UserType
  nameWithType: UserType
  fullName: SuperOffice.License.UserType
- uid: SuperOffice.License.AssociateModuleLicenseOwner[]
  isExternal: true
  href: SuperOffice.License.AssociateModuleLicenseOwner.html
  name: AssociateModuleLicenseOwner[]
  nameWithType: AssociateModuleLicenseOwner[]
  fullName: SuperOffice.License.AssociateModuleLicenseOwner[]
  nameWithType.vb: AssociateModuleLicenseOwner()
  fullName.vb: SuperOffice.License.AssociateModuleLicenseOwner()
  name.vb: AssociateModuleLicenseOwner()
  spec.csharp:
  - uid: SuperOffice.License.AssociateModuleLicenseOwner
    name: AssociateModuleLicenseOwner
    isExternal: true
    href: SuperOffice.License.AssociateModuleLicenseOwner.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.License.AssociateModuleLicenseOwner
    name: AssociateModuleLicenseOwner
    isExternal: true
    href: SuperOffice.License.AssociateModuleLicenseOwner.html
  - name: (
  - name: )
- uid: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCount*
  commentId: Overload:SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCount
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetAssociateLicenseUsageCount_SuperOffice_Data_AssociateType_System_Int32___
  name: GetAssociateLicenseUsageCount
  nameWithType: LicenseManager.GetAssociateLicenseUsageCount
  fullName: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCount
- uid: SuperOffice.Data.AssociateType
  commentId: T:SuperOffice.Data.AssociateType
  parent: SuperOffice.Data
  isExternal: true
  href: SuperOffice.Data.AssociateType.html
  name: AssociateType
  nameWithType: AssociateType
  fullName: SuperOffice.Data.AssociateType
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Data
    name: Data
    isExternal: true
    href: SuperOffice.Data.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Data
    name: Data
    isExternal: true
    href: SuperOffice.Data.html
- uid: SuperOffice.License.LicenseManager.LicenseExists*
  commentId: Overload:SuperOffice.License.LicenseManager.LicenseExists
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_LicenseExists_System_String_
  name: LicenseExists
  nameWithType: LicenseManager.LicenseExists
  fullName: SuperOffice.License.LicenseManager.LicenseExists
- uid: SuperOffice.License.LicenseManager.AllowAutoUpdate
  commentId: P:SuperOffice.License.LicenseManager.AllowAutoUpdate
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_AllowAutoUpdate
  name: AllowAutoUpdate
  nameWithType: LicenseManager.AllowAutoUpdate
  fullName: SuperOffice.License.LicenseManager.AllowAutoUpdate
- uid: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeeded*
  commentId: Overload:SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeeded
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_LoadNewLicenseFromServerIfNeeded
  name: LoadNewLicenseFromServerIfNeeded
  nameWithType: LicenseManager.LoadNewLicenseFromServerIfNeeded
  fullName: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeeded
- uid: SuperOffice.License.LicenseManager.PopulateSignedPublicKey*
  commentId: Overload:SuperOffice.License.LicenseManager.PopulateSignedPublicKey
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_PopulateSignedPublicKey_SuperOffice_License_LicenseInfo_System_IO_Stream_
  name: PopulateSignedPublicKey
  nameWithType: LicenseManager.PopulateSignedPublicKey
  fullName: SuperOffice.License.LicenseManager.PopulateSignedPublicKey
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.stream
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
- uid: SuperOffice.License.LicenseManager.AllowAutoUpdate*
  commentId: Overload:SuperOffice.License.LicenseManager.AllowAutoUpdate
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_AllowAutoUpdate
  name: AllowAutoUpdate
  nameWithType: LicenseManager.AllowAutoUpdate
  fullName: SuperOffice.License.LicenseManager.AllowAutoUpdate
- uid: SuperOffice.License.LicenseManager.IsUnitTesting*
  commentId: Overload:SuperOffice.License.LicenseManager.IsUnitTesting
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_IsUnitTesting
  name: IsUnitTesting
  nameWithType: LicenseManager.IsUnitTesting
  fullName: SuperOffice.License.LicenseManager.IsUnitTesting
