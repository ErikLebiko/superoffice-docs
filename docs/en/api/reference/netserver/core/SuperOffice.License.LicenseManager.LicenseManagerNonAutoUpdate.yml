### YamlMime:ManagedReference
items:
- uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
  commentId: T:SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
  id: LicenseManager.LicenseManagerNonAutoUpdate
  parent: SuperOffice.License
  children:
  - SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.#ctor
  - SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.AllowAutoUpdate
  langs:
  - csharp
  - vb
  name: LicenseManager.LicenseManagerNonAutoUpdate
  nameWithType: LicenseManager.LicenseManagerNonAutoUpdate
  fullName: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
  type: Class
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: License Manager override used during license upgrade.
  example: []
  syntax:
    content: 'public class LicenseManager.LicenseManagerNonAutoUpdate : LicenseManager'
    content.vb: Public Class LicenseManager.LicenseManagerNonAutoUpdate Inherits LicenseManager
  inheritance:
  - System.Object
  - SuperOffice.License.LicenseManager
  inheritedMembers:
  - SuperOffice.License.LicenseManager.SuperOfficeOwner
  - SuperOffice.License.LicenseManager.GetCurrent
  - SuperOffice.License.LicenseManager.GetModuleOwners
  - SuperOffice.License.LicenseManager.GetModuleOwner(System.String)
  - SuperOffice.License.LicenseManager.GetCurrentLicense(System.String,System.DateTime@)
  - SuperOffice.License.LicenseManager.GetLicenseFromDB(System.String)
  - SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDB
  - SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignments(System.String,System.Boolean,System.String)
  - SuperOffice.License.LicenseManager.GetLicenseFromLicenseServer(System.String,System.String)
  - SuperOffice.License.LicenseManager.GetLicenseFromFile(System.String)
  - SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDb(SuperOffice.License.LicenseInfo)
  - SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServer(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense)
  - SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  - SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  - SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
  - SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  - SuperOffice.License.LicenseManager.ActivateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean)
  - SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServer(System.String,System.String)
  - SuperOffice.License.LicenseManager.ChangeSerialNumber(System.String,System.String)
  - SuperOffice.License.LicenseManager.GetShopUrl(System.String,System.String)
  - SuperOffice.License.LicenseManager.RemoveLicenseFromDB(System.String)
  - SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32)
  - SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32,System.Int32)
  - SuperOffice.License.LicenseManager.GetSatelliteLicenses(System.Int32,System.Boolean)
  - SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCount(System.Int32[])
  - SuperOffice.License.LicenseManager.GetUserLicenses(System.Int32,SuperOffice.License.UserType)
  - SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCount(SuperOffice.Data.AssociateType,System.Int32[])
  - SuperOffice.License.LicenseManager.LicenseExists(System.String)
  - SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeeded
  - SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo,System.IO.Stream)
  - SuperOffice.License.LicenseManager.IsUnitTesting
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.EnumUtil.MapEnums``2
  - SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  - SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
  - SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.SuperOffice.Util.ObjectExtensions.GraphCopy``1
- uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.#ctor
  commentId: M:SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.#ctor
  id: '#ctor'
  parent: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
  langs:
  - csharp
  - vb
  name: LicenseManagerNonAutoUpdate()
  nameWithType: LicenseManager.LicenseManagerNonAutoUpdate.LicenseManagerNonAutoUpdate()
  fullName: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.LicenseManagerNonAutoUpdate()
  type: Constructor
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  syntax:
    content: public LicenseManagerNonAutoUpdate()
    content.vb: Public Sub New()
  overload: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.#ctor*
  nameWithType.vb: LicenseManager.LicenseManagerNonAutoUpdate.New()
  fullName.vb: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.New()
  name.vb: New()
- uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.AllowAutoUpdate
  commentId: P:SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.AllowAutoUpdate
  id: AllowAutoUpdate
  parent: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
  langs:
  - csharp
  - vb
  name: AllowAutoUpdate
  nameWithType: LicenseManager.LicenseManagerNonAutoUpdate.AllowAutoUpdate
  fullName: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.AllowAutoUpdate
  type: Property
  assemblies:
  - SoDataBase
  namespace: SuperOffice.License
  summary: Turn off auto-updating of the license while we are upgrading.
  example: []
  syntax:
    content: protected override bool AllowAutoUpdate { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Overrides ReadOnly Property AllowAutoUpdate As Boolean
  overridden: SuperOffice.License.LicenseManager.AllowAutoUpdate
  overload: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.AllowAutoUpdate*
references:
- uid: SuperOffice.License
  commentId: N:SuperOffice.License
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.License
  nameWithType: SuperOffice.License
  fullName: SuperOffice.License
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.License
    name: License
    isExternal: true
    href: SuperOffice.License.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.License
    name: License
    isExternal: true
    href: SuperOffice.License.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: SuperOffice.License.LicenseManager
  commentId: T:SuperOffice.License.LicenseManager
  parent: SuperOffice.License
  isExternal: true
  href: SuperOffice.License.LicenseManager.html
  name: LicenseManager
  nameWithType: LicenseManager
  fullName: SuperOffice.License.LicenseManager
- uid: SuperOffice.License.LicenseManager.SuperOfficeOwner
  commentId: F:SuperOffice.License.LicenseManager.SuperOfficeOwner
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_SuperOfficeOwner
  name: SuperOfficeOwner
  nameWithType: LicenseManager.SuperOfficeOwner
  fullName: SuperOffice.License.LicenseManager.SuperOfficeOwner
- uid: SuperOffice.License.LicenseManager.GetCurrent
  commentId: M:SuperOffice.License.LicenseManager.GetCurrent
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetCurrent
  name: GetCurrent()
  nameWithType: LicenseManager.GetCurrent()
  fullName: SuperOffice.License.LicenseManager.GetCurrent()
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetCurrent
    name: GetCurrent
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetCurrent
  - name: (
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetCurrent
    name: GetCurrent
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetCurrent
  - name: (
  - name: )
- uid: SuperOffice.License.LicenseManager.GetModuleOwners
  commentId: M:SuperOffice.License.LicenseManager.GetModuleOwners
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetModuleOwners
  name: GetModuleOwners()
  nameWithType: LicenseManager.GetModuleOwners()
  fullName: SuperOffice.License.LicenseManager.GetModuleOwners()
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetModuleOwners
    name: GetModuleOwners
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetModuleOwners
  - name: (
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetModuleOwners
    name: GetModuleOwners
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetModuleOwners
  - name: (
  - name: )
- uid: SuperOffice.License.LicenseManager.GetModuleOwner(System.String)
  commentId: M:SuperOffice.License.LicenseManager.GetModuleOwner(System.String)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetModuleOwner_System_String_
  name: GetModuleOwner(string)
  nameWithType: LicenseManager.GetModuleOwner(string)
  fullName: SuperOffice.License.LicenseManager.GetModuleOwner(string)
  nameWithType.vb: LicenseManager.GetModuleOwner(String)
  fullName.vb: SuperOffice.License.LicenseManager.GetModuleOwner(String)
  name.vb: GetModuleOwner(String)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetModuleOwner(System.String)
    name: GetModuleOwner
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetModuleOwner_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetModuleOwner(System.String)
    name: GetModuleOwner
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetModuleOwner_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.License.LicenseManager.GetCurrentLicense(System.String,System.DateTime@)
  commentId: M:SuperOffice.License.LicenseManager.GetCurrentLicense(System.String,System.DateTime@)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetCurrentLicense_System_String_System_DateTime__
  name: GetCurrentLicense(string, out DateTime)
  nameWithType: LicenseManager.GetCurrentLicense(string, out DateTime)
  fullName: SuperOffice.License.LicenseManager.GetCurrentLicense(string, out System.DateTime)
  nameWithType.vb: LicenseManager.GetCurrentLicense(String, Date)
  fullName.vb: SuperOffice.License.LicenseManager.GetCurrentLicense(String, Date)
  name.vb: GetCurrentLicense(String, Date)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetCurrentLicense(System.String,System.DateTime@)
    name: GetCurrentLicense
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetCurrentLicense_System_String_System_DateTime__
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.DateTime
    name: DateTime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetCurrentLicense(System.String,System.DateTime@)
    name: GetCurrentLicense
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetCurrentLicense_System_String_System_DateTime__
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: Date
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime
  - name: )
- uid: SuperOffice.License.LicenseManager.GetLicenseFromDB(System.String)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseFromDB(System.String)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromDB_System_String_
  name: GetLicenseFromDB(string)
  nameWithType: LicenseManager.GetLicenseFromDB(string)
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromDB(string)
  nameWithType.vb: LicenseManager.GetLicenseFromDB(String)
  fullName.vb: SuperOffice.License.LicenseManager.GetLicenseFromDB(String)
  name.vb: GetLicenseFromDB(String)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetLicenseFromDB(System.String)
    name: GetLicenseFromDB
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromDB_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetLicenseFromDB(System.String)
    name: GetLicenseFromDB
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromDB_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDB
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDB
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseForAllOwnersFromDB
  name: GetLicenseForAllOwnersFromDB()
  nameWithType: LicenseManager.GetLicenseForAllOwnersFromDB()
  fullName: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDB()
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDB
    name: GetLicenseForAllOwnersFromDB
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseForAllOwnersFromDB
  - name: (
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetLicenseForAllOwnersFromDB
    name: GetLicenseForAllOwnersFromDB
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseForAllOwnersFromDB
  - name: (
  - name: )
- uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignments(System.String,System.Boolean,System.String)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignments(System.String,System.Boolean,System.String)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromLicenseServerWithAssignments_System_String_System_Boolean_System_String_
  name: GetLicenseFromLicenseServerWithAssignments(string, bool, string)
  nameWithType: LicenseManager.GetLicenseFromLicenseServerWithAssignments(string, bool, string)
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignments(string, bool, string)
  nameWithType.vb: LicenseManager.GetLicenseFromLicenseServerWithAssignments(String, Boolean, String)
  fullName.vb: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignments(String, Boolean, String)
  name.vb: GetLicenseFromLicenseServerWithAssignments(String, Boolean, String)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignments(System.String,System.Boolean,System.String)
    name: GetLicenseFromLicenseServerWithAssignments
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromLicenseServerWithAssignments_System_String_System_Boolean_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServerWithAssignments(System.String,System.Boolean,System.String)
    name: GetLicenseFromLicenseServerWithAssignments
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromLicenseServerWithAssignments_System_String_System_Boolean_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServer(System.String,System.String)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseFromLicenseServer(System.String,System.String)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromLicenseServer_System_String_System_String_
  name: GetLicenseFromLicenseServer(string, string)
  nameWithType: LicenseManager.GetLicenseFromLicenseServer(string, string)
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServer(string, string)
  nameWithType.vb: LicenseManager.GetLicenseFromLicenseServer(String, String)
  fullName.vb: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServer(String, String)
  name.vb: GetLicenseFromLicenseServer(String, String)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServer(System.String,System.String)
    name: GetLicenseFromLicenseServer
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromLicenseServer_System_String_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetLicenseFromLicenseServer(System.String,System.String)
    name: GetLicenseFromLicenseServer
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromLicenseServer_System_String_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.License.LicenseManager.GetLicenseFromFile(System.String)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseFromFile(System.String)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromFile_System_String_
  name: GetLicenseFromFile(string)
  nameWithType: LicenseManager.GetLicenseFromFile(string)
  fullName: SuperOffice.License.LicenseManager.GetLicenseFromFile(string)
  nameWithType.vb: LicenseManager.GetLicenseFromFile(String)
  fullName.vb: SuperOffice.License.LicenseManager.GetLicenseFromFile(String)
  name.vb: GetLicenseFromFile(String)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetLicenseFromFile(System.String)
    name: GetLicenseFromFile
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromFile_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetLicenseFromFile(System.String)
    name: GetLicenseFromFile
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseFromFile_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDb(SuperOffice.License.LicenseInfo)
  commentId: M:SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDb(SuperOffice.License.LicenseInfo)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_MapAndValidateLicenseWithDb_SuperOffice_License_LicenseInfo_
  name: MapAndValidateLicenseWithDb(LicenseInfo)
  nameWithType: LicenseManager.MapAndValidateLicenseWithDb(LicenseInfo)
  fullName: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDb(SuperOffice.License.LicenseInfo)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDb(SuperOffice.License.LicenseInfo)
    name: MapAndValidateLicenseWithDb
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_MapAndValidateLicenseWithDb_SuperOffice_License_LicenseInfo_
  - name: (
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.MapAndValidateLicenseWithDb(SuperOffice.License.LicenseInfo)
    name: MapAndValidateLicenseWithDb
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_MapAndValidateLicenseWithDb_SuperOffice_License_LicenseInfo_
  - name: (
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    isExternal: true
  - name: )
- uid: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServer(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense)
  commentId: M:SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServer(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetModuleLicenseHistoryFromLicenseServer_SuperOffice_License_ExtendedLicenseInfo_SuperOffice_License_ExtendedModuleLicense_
  name: GetModuleLicenseHistoryFromLicenseServer(ExtendedLicenseInfo, ExtendedModuleLicense)
  nameWithType: LicenseManager.GetModuleLicenseHistoryFromLicenseServer(ExtendedLicenseInfo, ExtendedModuleLicense)
  fullName: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServer(SuperOffice.License.ExtendedLicenseInfo, SuperOffice.License.ExtendedModuleLicense)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServer(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense)
    name: GetModuleLicenseHistoryFromLicenseServer
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetModuleLicenseHistoryFromLicenseServer_SuperOffice_License_ExtendedLicenseInfo_SuperOffice_License_ExtendedModuleLicense_
  - name: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: SuperOffice.License.ExtendedModuleLicense
    name: ExtendedModuleLicense
    isExternal: true
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetModuleLicenseHistoryFromLicenseServer(SuperOffice.License.ExtendedLicenseInfo,SuperOffice.License.ExtendedModuleLicense)
    name: GetModuleLicenseHistoryFromLicenseServer
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetModuleLicenseHistoryFromLicenseServer_SuperOffice_License_ExtendedLicenseInfo_SuperOffice_License_ExtendedModuleLicense_
  - name: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: SuperOffice.License.ExtendedModuleLicense
    name: ExtendedModuleLicense
    isExternal: true
  - name: )
- uid: SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  commentId: M:SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ValidatePublicKey_SuperOffice_License_SignedPublicKey_
  name: ValidatePublicKey(SignedPublicKey)
  nameWithType: LicenseManager.ValidatePublicKey(SignedPublicKey)
  fullName: SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
    name: ValidatePublicKey
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ValidatePublicKey_SuperOffice_License_SignedPublicKey_
  - name: (
  - uid: SuperOffice.License.SignedPublicKey
    name: SignedPublicKey
    isExternal: true
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.ValidatePublicKey(SuperOffice.License.SignedPublicKey)
    name: ValidatePublicKey
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ValidatePublicKey_SuperOffice_License_SignedPublicKey_
  - name: (
  - uid: SuperOffice.License.SignedPublicKey
    name: SignedPublicKey
    isExternal: true
  - name: )
- uid: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  commentId: M:SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ValidateLicenseInfo_SuperOffice_License_LicenseInfo_System_Boolean_
  name: ValidateLicenseInfo(LicenseInfo, bool)
  nameWithType: LicenseManager.ValidateLicenseInfo(LicenseInfo, bool)
  fullName: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo, bool)
  nameWithType.vb: LicenseManager.ValidateLicenseInfo(LicenseInfo, Boolean)
  fullName.vb: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo, Boolean)
  name.vb: ValidateLicenseInfo(LicenseInfo, Boolean)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
    name: ValidateLicenseInfo
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ValidateLicenseInfo_SuperOffice_License_LicenseInfo_System_Boolean_
  - name: (
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.LicenseInfo,System.Boolean)
    name: ValidateLicenseInfo
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ValidateLicenseInfo_SuperOffice_License_LicenseInfo_System_Boolean_
  - name: (
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
  commentId: M:SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ToInfo_SuperOffice_License_ModuleLicense_
  name: ToInfo(ModuleLicense)
  nameWithType: LicenseManager.ToInfo(ModuleLicense)
  fullName: SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
    name: ToInfo
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ToInfo_SuperOffice_License_ModuleLicense_
  - name: (
  - uid: SuperOffice.License.ModuleLicense
    name: ModuleLicense
    isExternal: true
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.ToInfo(SuperOffice.License.ModuleLicense)
    name: ToInfo
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ToInfo_SuperOffice_License_ModuleLicense_
  - name: (
  - uid: SuperOffice.License.ModuleLicense
    name: ModuleLicense
    isExternal: true
  - name: )
- uid: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  commentId: M:SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ValidateLicenseInfo_SuperOffice_License_ExtendedLicenseInfo_
  name: ValidateLicenseInfo(ExtendedLicenseInfo)
  nameWithType: LicenseManager.ValidateLicenseInfo(ExtendedLicenseInfo)
  fullName: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
    name: ValidateLicenseInfo
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ValidateLicenseInfo_SuperOffice_License_ExtendedLicenseInfo_
  - name: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.ValidateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo)
    name: ValidateLicenseInfo
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ValidateLicenseInfo_SuperOffice_License_ExtendedLicenseInfo_
  - name: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: )
- uid: SuperOffice.License.LicenseManager.ActivateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean)
  commentId: M:SuperOffice.License.LicenseManager.ActivateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ActivateLicenseInfo_SuperOffice_License_ExtendedLicenseInfo_System_Boolean_System_Boolean_
  name: ActivateLicenseInfo(ExtendedLicenseInfo, bool, bool)
  nameWithType: LicenseManager.ActivateLicenseInfo(ExtendedLicenseInfo, bool, bool)
  fullName: SuperOffice.License.LicenseManager.ActivateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo, bool, bool)
  nameWithType.vb: LicenseManager.ActivateLicenseInfo(ExtendedLicenseInfo, Boolean, Boolean)
  fullName.vb: SuperOffice.License.LicenseManager.ActivateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo, Boolean, Boolean)
  name.vb: ActivateLicenseInfo(ExtendedLicenseInfo, Boolean, Boolean)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.ActivateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean)
    name: ActivateLicenseInfo
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ActivateLicenseInfo_SuperOffice_License_ExtendedLicenseInfo_System_Boolean_System_Boolean_
  - name: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.ActivateLicenseInfo(SuperOffice.License.ExtendedLicenseInfo,System.Boolean,System.Boolean)
    name: ActivateLicenseInfo
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ActivateLicenseInfo_SuperOffice_License_ExtendedLicenseInfo_System_Boolean_System_Boolean_
  - name: (
  - uid: SuperOffice.License.ExtendedLicenseInfo
    name: ExtendedLicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServer(System.String,System.String)
  commentId: M:SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServer(System.String,System.String)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseStateFromLicenseServer_System_String_System_String_
  name: GetLicenseStateFromLicenseServer(string, string)
  nameWithType: LicenseManager.GetLicenseStateFromLicenseServer(string, string)
  fullName: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServer(string, string)
  nameWithType.vb: LicenseManager.GetLicenseStateFromLicenseServer(String, String)
  fullName.vb: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServer(String, String)
  name.vb: GetLicenseStateFromLicenseServer(String, String)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServer(System.String,System.String)
    name: GetLicenseStateFromLicenseServer
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseStateFromLicenseServer_System_String_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetLicenseStateFromLicenseServer(System.String,System.String)
    name: GetLicenseStateFromLicenseServer
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetLicenseStateFromLicenseServer_System_String_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.License.LicenseManager.ChangeSerialNumber(System.String,System.String)
  commentId: M:SuperOffice.License.LicenseManager.ChangeSerialNumber(System.String,System.String)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ChangeSerialNumber_System_String_System_String_
  name: ChangeSerialNumber(string, string)
  nameWithType: LicenseManager.ChangeSerialNumber(string, string)
  fullName: SuperOffice.License.LicenseManager.ChangeSerialNumber(string, string)
  nameWithType.vb: LicenseManager.ChangeSerialNumber(String, String)
  fullName.vb: SuperOffice.License.LicenseManager.ChangeSerialNumber(String, String)
  name.vb: ChangeSerialNumber(String, String)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.ChangeSerialNumber(System.String,System.String)
    name: ChangeSerialNumber
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ChangeSerialNumber_System_String_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.ChangeSerialNumber(System.String,System.String)
    name: ChangeSerialNumber
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_ChangeSerialNumber_System_String_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.License.LicenseManager.GetShopUrl(System.String,System.String)
  commentId: M:SuperOffice.License.LicenseManager.GetShopUrl(System.String,System.String)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetShopUrl_System_String_System_String_
  name: GetShopUrl(string, string)
  nameWithType: LicenseManager.GetShopUrl(string, string)
  fullName: SuperOffice.License.LicenseManager.GetShopUrl(string, string)
  nameWithType.vb: LicenseManager.GetShopUrl(String, String)
  fullName.vb: SuperOffice.License.LicenseManager.GetShopUrl(String, String)
  name.vb: GetShopUrl(String, String)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetShopUrl(System.String,System.String)
    name: GetShopUrl
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetShopUrl_System_String_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetShopUrl(System.String,System.String)
    name: GetShopUrl
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetShopUrl_System_String_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.License.LicenseManager.RemoveLicenseFromDB(System.String)
  commentId: M:SuperOffice.License.LicenseManager.RemoveLicenseFromDB(System.String)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_RemoveLicenseFromDB_System_String_
  name: RemoveLicenseFromDB(string)
  nameWithType: LicenseManager.RemoveLicenseFromDB(string)
  fullName: SuperOffice.License.LicenseManager.RemoveLicenseFromDB(string)
  nameWithType.vb: LicenseManager.RemoveLicenseFromDB(String)
  fullName.vb: SuperOffice.License.LicenseManager.RemoveLicenseFromDB(String)
  name.vb: RemoveLicenseFromDB(String)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.RemoveLicenseFromDB(System.String)
    name: RemoveLicenseFromDB
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_RemoveLicenseFromDB_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.RemoveLicenseFromDB(System.String)
    name: RemoveLicenseFromDB
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_RemoveLicenseFromDB_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32)
  commentId: M:SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetGrantedModuleLicenses_System_Int32_
  name: GetGrantedModuleLicenses(int)
  nameWithType: LicenseManager.GetGrantedModuleLicenses(int)
  fullName: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(int)
  nameWithType.vb: LicenseManager.GetGrantedModuleLicenses(Integer)
  fullName.vb: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(Integer)
  name.vb: GetGrantedModuleLicenses(Integer)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32)
    name: GetGrantedModuleLicenses
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetGrantedModuleLicenses_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32)
    name: GetGrantedModuleLicenses
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetGrantedModuleLicenses_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32,System.Int32)
  commentId: M:SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32,System.Int32)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetGrantedModuleLicenses_System_Int32_System_Int32_
  name: GetGrantedModuleLicenses(int, int)
  nameWithType: LicenseManager.GetGrantedModuleLicenses(int, int)
  fullName: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(int, int)
  nameWithType.vb: LicenseManager.GetGrantedModuleLicenses(Integer, Integer)
  fullName.vb: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(Integer, Integer)
  name.vb: GetGrantedModuleLicenses(Integer, Integer)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32,System.Int32)
    name: GetGrantedModuleLicenses
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetGrantedModuleLicenses_System_Int32_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetGrantedModuleLicenses(System.Int32,System.Int32)
    name: GetGrantedModuleLicenses
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetGrantedModuleLicenses_System_Int32_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: SuperOffice.License.LicenseManager.GetSatelliteLicenses(System.Int32,System.Boolean)
  commentId: M:SuperOffice.License.LicenseManager.GetSatelliteLicenses(System.Int32,System.Boolean)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetSatelliteLicenses_System_Int32_System_Boolean_
  name: GetSatelliteLicenses(int, bool)
  nameWithType: LicenseManager.GetSatelliteLicenses(int, bool)
  fullName: SuperOffice.License.LicenseManager.GetSatelliteLicenses(int, bool)
  nameWithType.vb: LicenseManager.GetSatelliteLicenses(Integer, Boolean)
  fullName.vb: SuperOffice.License.LicenseManager.GetSatelliteLicenses(Integer, Boolean)
  name.vb: GetSatelliteLicenses(Integer, Boolean)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetSatelliteLicenses(System.Int32,System.Boolean)
    name: GetSatelliteLicenses
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetSatelliteLicenses_System_Int32_System_Boolean_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetSatelliteLicenses(System.Int32,System.Boolean)
    name: GetSatelliteLicenses
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetSatelliteLicenses_System_Int32_System_Boolean_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCount(System.Int32[])
  commentId: M:SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCount(System.Int32[])
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetSatelliteLicenseUsageCount_System_Int32___
  name: GetSatelliteLicenseUsageCount(params int[])
  nameWithType: LicenseManager.GetSatelliteLicenseUsageCount(params int[])
  fullName: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCount(params int[])
  nameWithType.vb: LicenseManager.GetSatelliteLicenseUsageCount(ParamArray Integer())
  fullName.vb: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCount(ParamArray Integer())
  name.vb: GetSatelliteLicenseUsageCount(ParamArray Integer())
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCount(System.Int32[])
    name: GetSatelliteLicenseUsageCount
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetSatelliteLicenseUsageCount_System_Int32___
  - name: (
  - name: params
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetSatelliteLicenseUsageCount(System.Int32[])
    name: GetSatelliteLicenseUsageCount
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetSatelliteLicenseUsageCount_System_Int32___
  - name: (
  - name: ParamArray
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.License.LicenseManager.GetUserLicenses(System.Int32,SuperOffice.License.UserType)
  commentId: M:SuperOffice.License.LicenseManager.GetUserLicenses(System.Int32,SuperOffice.License.UserType)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetUserLicenses_System_Int32_SuperOffice_License_UserType_
  name: GetUserLicenses(int, UserType)
  nameWithType: LicenseManager.GetUserLicenses(int, UserType)
  fullName: SuperOffice.License.LicenseManager.GetUserLicenses(int, SuperOffice.License.UserType)
  nameWithType.vb: LicenseManager.GetUserLicenses(Integer, UserType)
  fullName.vb: SuperOffice.License.LicenseManager.GetUserLicenses(Integer, SuperOffice.License.UserType)
  name.vb: GetUserLicenses(Integer, UserType)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetUserLicenses(System.Int32,SuperOffice.License.UserType)
    name: GetUserLicenses
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetUserLicenses_System_Int32_SuperOffice_License_UserType_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: SuperOffice.License.UserType
    name: UserType
    isExternal: true
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetUserLicenses(System.Int32,SuperOffice.License.UserType)
    name: GetUserLicenses
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetUserLicenses_System_Int32_SuperOffice_License_UserType_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: SuperOffice.License.UserType
    name: UserType
    isExternal: true
  - name: )
- uid: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCount(SuperOffice.Data.AssociateType,System.Int32[])
  commentId: M:SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCount(SuperOffice.Data.AssociateType,System.Int32[])
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetAssociateLicenseUsageCount_SuperOffice_Data_AssociateType_System_Int32___
  name: GetAssociateLicenseUsageCount(AssociateType, params int[])
  nameWithType: LicenseManager.GetAssociateLicenseUsageCount(AssociateType, params int[])
  fullName: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCount(SuperOffice.Data.AssociateType, params int[])
  nameWithType.vb: LicenseManager.GetAssociateLicenseUsageCount(AssociateType, ParamArray Integer())
  fullName.vb: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCount(SuperOffice.Data.AssociateType, ParamArray Integer())
  name.vb: GetAssociateLicenseUsageCount(AssociateType, ParamArray Integer())
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCount(SuperOffice.Data.AssociateType,System.Int32[])
    name: GetAssociateLicenseUsageCount
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetAssociateLicenseUsageCount_SuperOffice_Data_AssociateType_System_Int32___
  - name: (
  - uid: SuperOffice.Data.AssociateType
    name: AssociateType
    isExternal: true
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.GetAssociateLicenseUsageCount(SuperOffice.Data.AssociateType,System.Int32[])
    name: GetAssociateLicenseUsageCount
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_GetAssociateLicenseUsageCount_SuperOffice_Data_AssociateType_System_Int32___
  - name: (
  - uid: SuperOffice.Data.AssociateType
    name: AssociateType
    isExternal: true
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.License.LicenseManager.LicenseExists(System.String)
  commentId: M:SuperOffice.License.LicenseManager.LicenseExists(System.String)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_LicenseExists_System_String_
  name: LicenseExists(string)
  nameWithType: LicenseManager.LicenseExists(string)
  fullName: SuperOffice.License.LicenseManager.LicenseExists(string)
  nameWithType.vb: LicenseManager.LicenseExists(String)
  fullName.vb: SuperOffice.License.LicenseManager.LicenseExists(String)
  name.vb: LicenseExists(String)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.LicenseExists(System.String)
    name: LicenseExists
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_LicenseExists_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.LicenseExists(System.String)
    name: LicenseExists
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_LicenseExists_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeeded
  commentId: M:SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeeded
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_LoadNewLicenseFromServerIfNeeded
  name: LoadNewLicenseFromServerIfNeeded()
  nameWithType: LicenseManager.LoadNewLicenseFromServerIfNeeded()
  fullName: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeeded()
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeeded
    name: LoadNewLicenseFromServerIfNeeded
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_LoadNewLicenseFromServerIfNeeded
  - name: (
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.LoadNewLicenseFromServerIfNeeded
    name: LoadNewLicenseFromServerIfNeeded
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_LoadNewLicenseFromServerIfNeeded
  - name: (
  - name: )
- uid: SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo,System.IO.Stream)
  commentId: M:SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo,System.IO.Stream)
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_PopulateSignedPublicKey_SuperOffice_License_LicenseInfo_System_IO_Stream_
  name: PopulateSignedPublicKey(LicenseInfo, Stream)
  nameWithType: LicenseManager.PopulateSignedPublicKey(LicenseInfo, Stream)
  fullName: SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo, System.IO.Stream)
  spec.csharp:
  - uid: SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo,System.IO.Stream)
    name: PopulateSignedPublicKey
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_PopulateSignedPublicKey_SuperOffice_License_LicenseInfo_System_IO_Stream_
  - name: (
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: )
  spec.vb:
  - uid: SuperOffice.License.LicenseManager.PopulateSignedPublicKey(SuperOffice.License.LicenseInfo,System.IO.Stream)
    name: PopulateSignedPublicKey
    isExternal: true
    href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_PopulateSignedPublicKey_SuperOffice_License_LicenseInfo_System_IO_Stream_
  - name: (
  - uid: SuperOffice.License.LicenseInfo
    name: LicenseInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: )
- uid: SuperOffice.License.LicenseManager.IsUnitTesting
  commentId: P:SuperOffice.License.LicenseManager.IsUnitTesting
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_IsUnitTesting
  name: IsUnitTesting
  nameWithType: LicenseManager.IsUnitTesting
  fullName: SuperOffice.License.LicenseManager.IsUnitTesting
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<LicenseManagerNonAutoUpdate, To>(LicenseManagerNonAutoUpdate)
  nameWithType: EnumUtil.MapEnums<LicenseManager.LicenseManagerNonAutoUpdate, To>(LicenseManager.LicenseManagerNonAutoUpdate)
  fullName: EnumUtil.MapEnums<SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate, To>(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
  nameWithType.vb: EnumUtil.MapEnums(Of LicenseManager.LicenseManagerNonAutoUpdate, To)(LicenseManager.LicenseManagerNonAutoUpdate)
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate, To)(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
  name.vb: MapEnums(Of LicenseManagerNonAutoUpdate, To)(LicenseManagerNonAutoUpdate)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: )
- uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<LicenseManagerNonAutoUpdate, To>(LicenseManagerNonAutoUpdate)
  nameWithType: Converters.MapEnums<LicenseManager.LicenseManagerNonAutoUpdate, To>(LicenseManager.LicenseManagerNonAutoUpdate)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate, To>(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
  nameWithType.vb: Converters.MapEnums(Of LicenseManager.LicenseManagerNonAutoUpdate, To)(LicenseManager.LicenseManagerNonAutoUpdate)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate, To)(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
  name.vb: MapEnums(Of LicenseManagerNonAutoUpdate, To)(LicenseManagerNonAutoUpdate)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: )
- uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  name: AssignByReflection<LicenseManagerNonAutoUpdate>(LicenseManagerNonAutoUpdate, LicenseManagerNonAutoUpdate)
  nameWithType: ObjectExtensions.AssignByReflection<LicenseManager.LicenseManagerNonAutoUpdate>(LicenseManager.LicenseManagerNonAutoUpdate, LicenseManager.LicenseManagerNonAutoUpdate)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate>(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate, SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of LicenseManager.LicenseManagerNonAutoUpdate)(LicenseManager.LicenseManagerNonAutoUpdate, LicenseManager.LicenseManagerNonAutoUpdate)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate, SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
  name.vb: AssignByReflection(Of LicenseManagerNonAutoUpdate)(LicenseManagerNonAutoUpdate, LicenseManagerNonAutoUpdate)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate,SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: <
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: '>'
  - name: (
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: ','
  - name: " "
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate,SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: )
  - name: (
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: ','
  - name: " "
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: )
- uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.SuperOffice.Util.ObjectExtensions.GraphCopy``1
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  parent: SuperOffice.Util.ObjectExtensions
  definition: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  name: GraphCopy<LicenseManagerNonAutoUpdate>(LicenseManagerNonAutoUpdate)
  nameWithType: ObjectExtensions.GraphCopy<LicenseManager.LicenseManagerNonAutoUpdate>(LicenseManager.LicenseManagerNonAutoUpdate)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate>(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of LicenseManager.LicenseManagerNonAutoUpdate)(LicenseManager.LicenseManagerNonAutoUpdate)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
  name.vb: GraphCopy(Of LicenseManagerNonAutoUpdate)(LicenseManagerNonAutoUpdate)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: <
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: '>'
  - name: (
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: )
  - name: (
  - uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate
    name: LicenseManagerNonAutoUpdate
    isExternal: true
    href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  href: EnumUtil.html
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  name: AssignByReflection<T>(T, T)
  nameWithType: ObjectExtensions.AssignByReflection<T>(T, T)
  fullName: SuperOffice.Util.ObjectExtensions.AssignByReflection<T>(T, T)
  nameWithType.vb: ObjectExtensions.AssignByReflection(Of T)(T, T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.AssignByReflection(Of T)(T, T)
  name.vb: AssignByReflection(Of T)(T, T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.AssignByReflection``1(``0,``0)
    name: AssignByReflection
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_AssignByReflection__1___0___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: SuperOffice.Util.ObjectExtensions
  commentId: T:SuperOffice.Util.ObjectExtensions
  parent: SuperOffice.Util
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: SuperOffice.Util.ObjectExtensions
- uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  commentId: M:SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
  isExternal: true
  href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  name: GraphCopy<T>(T)
  nameWithType: ObjectExtensions.GraphCopy<T>(T)
  fullName: SuperOffice.Util.ObjectExtensions.GraphCopy<T>(T)
  nameWithType.vb: ObjectExtensions.GraphCopy(Of T)(T)
  fullName.vb: SuperOffice.Util.ObjectExtensions.GraphCopy(Of T)(T)
  name.vb: GraphCopy(Of T)(T)
  spec.csharp:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: SuperOffice.Util.ObjectExtensions.GraphCopy``1(``0)
    name: GraphCopy
    isExternal: true
    href: SuperOffice.Util.ObjectExtensions.html#SuperOffice_Util_ObjectExtensions_GraphCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
- uid: SuperOffice.Util
  commentId: N:SuperOffice.Util
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Util
  nameWithType: SuperOffice.Util
  fullName: SuperOffice.Util
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Util
    name: Util
    isExternal: true
    href: SuperOffice.Util.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Util
    name: Util
    isExternal: true
    href: SuperOffice.Util.html
- uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.#ctor*
  commentId: Overload:SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.#ctor
  isExternal: true
  href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html#SuperOffice_License_LicenseManager_LicenseManagerNonAutoUpdate__ctor
  name: LicenseManagerNonAutoUpdate
  nameWithType: LicenseManager.LicenseManagerNonAutoUpdate.LicenseManagerNonAutoUpdate
  fullName: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.LicenseManagerNonAutoUpdate
  nameWithType.vb: LicenseManager.LicenseManagerNonAutoUpdate.New
  fullName.vb: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.New
  name.vb: New
- uid: SuperOffice.License.LicenseManager.AllowAutoUpdate
  commentId: P:SuperOffice.License.LicenseManager.AllowAutoUpdate
  parent: SuperOffice.License.LicenseManager
  isExternal: true
  href: SuperOffice.License.LicenseManager.html#SuperOffice_License_LicenseManager_AllowAutoUpdate
  name: AllowAutoUpdate
  nameWithType: LicenseManager.AllowAutoUpdate
  fullName: SuperOffice.License.LicenseManager.AllowAutoUpdate
- uid: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.AllowAutoUpdate*
  commentId: Overload:SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.AllowAutoUpdate
  isExternal: true
  href: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.html#SuperOffice_License_LicenseManager_LicenseManagerNonAutoUpdate_AllowAutoUpdate
  name: AllowAutoUpdate
  nameWithType: LicenseManager.LicenseManagerNonAutoUpdate.AllowAutoUpdate
  fullName: SuperOffice.License.LicenseManager.LicenseManagerNonAutoUpdate.AllowAutoUpdate
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
