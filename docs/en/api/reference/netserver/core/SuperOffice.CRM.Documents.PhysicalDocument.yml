### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Documents.PhysicalDocument
  commentId: T:SuperOffice.CRM.Documents.PhysicalDocument
  id: PhysicalDocument
  parent: SuperOffice.CRM.Documents
  children:
  - SuperOffice.CRM.Documents.PhysicalDocument.ArchiveProvider
  - SuperOffice.CRM.Documents.PhysicalDocument.AssociateRename(System.String,System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.BeginRead
  - SuperOffice.CRM.Documents.PhysicalDocument.BeginWrite
  - SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocument(System.String[],System.String,System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocument(System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplate(System.Int32,System.Int32)
  - SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.CreateFilenameForNewTemplate(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmpty(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRef(SuperOffice.CRM.IDocumentInfo@,System.String@,System.String[],System.String,System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplate(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[],System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTags(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[],SuperOffice.IO.TagContainer,System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsStream(System.Int32,System.String,SuperOffice.IO.TagContainer)
  - SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocument(System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.DocumentId
  - SuperOffice.CRM.Documents.PhysicalDocument.DocumentInfo
  - SuperOffice.CRM.Documents.PhysicalDocument.EndRead
  - SuperOffice.CRM.Documents.PhysicalDocument.EndWrite
  - SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand(System.String,System.String[],System.String,System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.Exists
  - SuperOffice.CRM.Documents.PhysicalDocument.ExternalReference
  - SuperOffice.CRM.Documents.PhysicalDocument.GetAllDocPlugins
  - SuperOffice.CRM.Documents.PhysicalDocument.GetCheckoutState
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCode
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCulture
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDefaultDocumentPluginId
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocument(SuperOffice.CRM.IDocumentInfo)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocument(System.Int32)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentIdFromPath(System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentProperties(System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateProperties(System.Int32,System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateUrl(System.Int32,System.Boolean,System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTypesForDocumentTemplates(System.Int32)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl(System.String,System.Boolean)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetLength(System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetPlugin(System.Int32)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetPluginCapabilities(System.Int32)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateExtension(System.Int32)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateId(System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateLanguages(SuperOffice.CRM.IDocumentTemplateInfo)
  - SuperOffice.CRM.Documents.PhysicalDocument.GetVersionList
  - SuperOffice.CRM.Documents.PhysicalDocument.IsNameValid(System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.Length
  - SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream
  - SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream(SuperOffice.CRM.IDocumentInfo,System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream(System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream(System.Int32,System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream(System.Int32,System.String,System.String@)
  - SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream(System.String,System.Boolean,System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData
  - SuperOffice.CRM.Documents.PhysicalDocument.LoadVersionInfo(System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  - SuperOffice.CRM.Documents.PhysicalDocument.RenameDocument(System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream)
  - SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStream(System.String[],System.IO.Stream)
  - SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentTemplateStream(System.Int32,System.IO.Stream,System.String,System.Int32,System.String)
  - SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.SetDocumentTemplateFromDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo,SuperOffice.CRM.IDocumentTemplateInfo)
  - SuperOffice.CRM.Documents.PhysicalDocument.SuggestFilename
  - SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocument(System.String[])
  - SuperOffice.CRM.Documents.PhysicalDocument.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: PhysicalDocument
  nameWithType: PhysicalDocument
  fullName: SuperOffice.CRM.Documents.PhysicalDocument
  type: Class
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Facade for the Document Plugin system, and one-stop-shop for physical-document operations
  remarks: >-
    An instance of this class represents a physical document in a document archive, and can be

    used to manipulate (Load, Save) that document and its metadata. Instances are constructed

    using a static factory function, always based on an already existing information in the

    database.

    <p></p>

    Static methods also provide access to document template functions and other

    non-document specific functions.
  example: []
  syntax:
    content: 'public sealed class PhysicalDocument : IStreamProvider'
    content.vb: Public NotInheritable Class PhysicalDocument Implements IStreamProvider
  inheritance:
  - System.Object
  implements:
  - SuperOffice.IO.IStreamProvider
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  extensionMethods:
  - SuperOffice.CRM.Documents.PhysicalDocument.EnumUtil.MapEnums``2
  - SuperOffice.CRM.Documents.PhysicalDocument.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocument(System.Int32)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocument(System.Int32)
  id: GetDocument(System.Int32)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocument(int)
  nameWithType: PhysicalDocument.GetDocument(int)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocument(int)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static PhysicalDocument GetDocument(int documentId)
    parameters:
    - id: documentId
      type: System.Int32
    return:
      type: SuperOffice.CRM.Documents.PhysicalDocument
    content.vb: Public Shared Function GetDocument(documentId As Integer) As PhysicalDocument
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocument*
  nameWithType.vb: PhysicalDocument.GetDocument(Integer)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetDocument(Integer)
  name.vb: GetDocument(Integer)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocument(SuperOffice.CRM.IDocumentInfo)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocument(SuperOffice.CRM.IDocumentInfo)
  id: GetDocument(SuperOffice.CRM.IDocumentInfo)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocument(IDocumentInfo)
  nameWithType: PhysicalDocument.GetDocument(IDocumentInfo)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocument(SuperOffice.CRM.IDocumentInfo)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static PhysicalDocument GetDocument(IDocumentInfo incomingInfo)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
    return:
      type: SuperOffice.CRM.Documents.PhysicalDocument
    content.vb: Public Shared Function GetDocument(incomingInfo As IDocumentInfo) As PhysicalDocument
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocument*
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmpty(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmpty(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[])
  id: CreateNewEmpty(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CreateNewEmpty(IDocumentInfo, ref string, string[], string, string[])
  nameWithType: PhysicalDocument.CreateNewEmpty(IDocumentInfo, ref string, string[], string, string[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmpty(SuperOffice.CRM.IDocumentInfo, ref string, string[], string, string[])
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static string CreateNewEmpty(IDocumentInfo incomingInfo, ref string fileName, string[] extraFields, string versionDecription, string[] versionExtraFields)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: fileName
      type: System.String
    - id: extraFields
      type: System.String[]
    - id: versionDecription
      type: System.String
    - id: versionExtraFields
      type: System.String[]
    return:
      type: System.String
    content.vb: Public Shared Function CreateNewEmpty(incomingInfo As IDocumentInfo, fileName As String, extraFields As String(), versionDecription As String, versionExtraFields As String()) As String
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmpty*
  nameWithType.vb: PhysicalDocument.CreateNewEmpty(IDocumentInfo, String, String(), String, String())
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmpty(SuperOffice.CRM.IDocumentInfo, String, String(), String, String())
  name.vb: CreateNewEmpty(IDocumentInfo, String, String(), String, String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRef(SuperOffice.CRM.IDocumentInfo@,System.String@,System.String[],System.String,System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRef(SuperOffice.CRM.IDocumentInfo@,System.String@,System.String[],System.String,System.String[])
  id: CreateNewEmptyByRef(SuperOffice.CRM.IDocumentInfo@,System.String@,System.String[],System.String,System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CreateNewEmptyByRef(ref IDocumentInfo, ref string, string[], string, string[])
  nameWithType: PhysicalDocument.CreateNewEmptyByRef(ref IDocumentInfo, ref string, string[], string, string[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRef(ref SuperOffice.CRM.IDocumentInfo, ref string, string[], string, string[])
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static string CreateNewEmptyByRef(ref IDocumentInfo incomingInfo, ref string fileName, string[] extraFields, string versionDecription, string[] versionExtraFields)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: fileName
      type: System.String
    - id: extraFields
      type: System.String[]
    - id: versionDecription
      type: System.String
    - id: versionExtraFields
      type: System.String[]
    return:
      type: System.String
    content.vb: Public Shared Function CreateNewEmptyByRef(incomingInfo As IDocumentInfo, fileName As String, extraFields As String(), versionDecription As String, versionExtraFields As String()) As String
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRef*
  nameWithType.vb: PhysicalDocument.CreateNewEmptyByRef(IDocumentInfo, String, String(), String, String())
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRef(SuperOffice.CRM.IDocumentInfo, String, String(), String, String())
  name.vb: CreateNewEmptyByRef(IDocumentInfo, String, String(), String, String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplate(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[],System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplate(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[],System.String)
  id: CreateNewFromTemplate(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[],System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CreateNewFromTemplate(IDocumentInfo, ref string, string[], string, string[], string)
  nameWithType: PhysicalDocument.CreateNewFromTemplate(IDocumentInfo, ref string, string[], string, string[], string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplate(SuperOffice.CRM.IDocumentInfo, ref string, string[], string, string[], string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Create a new document in the document archive without replacing template tags
  remarks: >-
    This method will create a new physical document, using the physical template <b>unchanged</b>.

    No template tag substitution will be attempted, no document conversions, nothing.

    <p></p>

    The method is generally used for creating mailmerge template documents
  example: []
  syntax:
    content: public static string CreateNewFromTemplate(IDocumentInfo incomingInfo, ref string fileName, string[] extraFields, string versionDecription, string[] versionExtraFields, string uiCulture)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: fileName
      type: System.String
    - id: extraFields
      type: System.String[]
    - id: versionDecription
      type: System.String
    - id: versionExtraFields
      type: System.String[]
    - id: uiCulture
      type: System.String
    return:
      type: System.String
      description: Reference to the newly created document in the document archive.
    content.vb: Public Shared Function CreateNewFromTemplate(incomingInfo As IDocumentInfo, fileName As String, extraFields As String(), versionDecription As String, versionExtraFields As String(), uiCulture As String) As String
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplate*
  nameWithType.vb: PhysicalDocument.CreateNewFromTemplate(IDocumentInfo, String, String(), String, String(), String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplate(SuperOffice.CRM.IDocumentInfo, String, String(), String, String(), String)
  name.vb: CreateNewFromTemplate(IDocumentInfo, String, String(), String, String(), String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTags(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[],SuperOffice.IO.TagContainer,System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTags(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[],SuperOffice.IO.TagContainer,System.String)
  id: CreateNewFromTemplateWithTags(SuperOffice.CRM.IDocumentInfo,System.String@,System.String[],System.String,System.String[],SuperOffice.IO.TagContainer,System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CreateNewFromTemplateWithTags(IDocumentInfo, ref string, string[], string, string[], TagContainer, string)
  nameWithType: PhysicalDocument.CreateNewFromTemplateWithTags(IDocumentInfo, ref string, string[], string, string[], TagContainer, string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTags(SuperOffice.CRM.IDocumentInfo, ref string, string[], string, string[], SuperOffice.IO.TagContainer, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Create a new document in the document archive, replacing template tags
  remarks: >-
    This method will create a new physical document, using the physical template and

    replacing all tags passed in through the TagContainer parameter.
  example: []
  syntax:
    content: public static string CreateNewFromTemplateWithTags(IDocumentInfo incomingInfo, ref string fileName, string[] extraFields, string versionDecription, string[] versionExtraFields, TagContainer templateTags, string uiCulture)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: fileName
      type: System.String
    - id: extraFields
      type: System.String[]
    - id: versionDecription
      type: System.String
    - id: versionExtraFields
      type: System.String[]
    - id: templateTags
      type: SuperOffice.IO.TagContainer
    - id: uiCulture
      type: System.String
      description: UI Language (en-US or nb-NO) - used to select appropriate doc template
    return:
      type: System.String
      description: Reference to the newly created document in the document archive.
    content.vb: Public Shared Function CreateNewFromTemplateWithTags(incomingInfo As IDocumentInfo, fileName As String, extraFields As String(), versionDecription As String, versionExtraFields As String(), templateTags As TagContainer, uiCulture As String) As String
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTags*
  nameWithType.vb: PhysicalDocument.CreateNewFromTemplateWithTags(IDocumentInfo, String, String(), String, String(), TagContainer, String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTags(SuperOffice.CRM.IDocumentInfo, String, String(), String, String(), SuperOffice.IO.TagContainer, String)
  name.vb: CreateNewFromTemplateWithTags(IDocumentInfo, String, String(), String, String(), TagContainer, String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SuggestFilename
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.SuggestFilename
  id: SuggestFilename
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: SuggestFilename()
  nameWithType: PhysicalDocument.SuggestFilename()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SuggestFilename()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public string SuggestFilename()
    return:
      type: System.String
    content.vb: Public Function SuggestFilename() As String
  overload: SuperOffice.CRM.Documents.PhysicalDocument.SuggestFilename*
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream)
  id: SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo,System.String[],System.IO.Stream)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: SaveDocumentFromStream(IDocumentInfo, string[], Stream)
  nameWithType: PhysicalDocument.SaveDocumentFromStream(IDocumentInfo, string[], Stream)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo, string[], System.IO.Stream)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static ReturnInfo SaveDocumentFromStream(IDocumentInfo incomingInfo, string[] allowedReturnTypes, Stream content)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: allowedReturnTypes
      type: System.String[]
    - id: content
      type: System.IO.Stream
    return:
      type: SuperOffice.CRM.ReturnInfo
    content.vb: Public Shared Function SaveDocumentFromStream(incomingInfo As IDocumentInfo, allowedReturnTypes As String(), content As Stream) As ReturnInfo
  overload: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStream*
  nameWithType.vb: PhysicalDocument.SaveDocumentFromStream(IDocumentInfo, String(), Stream)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStream(SuperOffice.CRM.IDocumentInfo, String(), System.IO.Stream)
  name.vb: SaveDocumentFromStream(IDocumentInfo, String(), Stream)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStream(System.String[],System.IO.Stream)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStream(System.String[],System.IO.Stream)
  id: SaveDocumentFromStream(System.String[],System.IO.Stream)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: SaveDocumentFromStream(string[], Stream)
  nameWithType: PhysicalDocument.SaveDocumentFromStream(string[], Stream)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStream(string[], System.IO.Stream)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public ReturnInfo SaveDocumentFromStream(string[] allowedReturnTypes, Stream content)
    parameters:
    - id: allowedReturnTypes
      type: System.String[]
    - id: content
      type: System.IO.Stream
    return:
      type: SuperOffice.CRM.ReturnInfo
    content.vb: Public Function SaveDocumentFromStream(allowedReturnTypes As String(), content As Stream) As ReturnInfo
  overload: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStream*
  nameWithType.vb: PhysicalDocument.SaveDocumentFromStream(String(), Stream)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStream(String(), System.IO.Stream)
  name.vb: SaveDocumentFromStream(String(), Stream)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream(SuperOffice.CRM.IDocumentInfo,System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream(SuperOffice.CRM.IDocumentInfo,System.String)
  id: LoadDocumentStream(SuperOffice.CRM.IDocumentInfo,System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: LoadDocumentStream(IDocumentInfo, string)
  nameWithType: PhysicalDocument.LoadDocumentStream(IDocumentInfo, string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream(SuperOffice.CRM.IDocumentInfo, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static Stream LoadDocumentStream(IDocumentInfo incomingInfo, string versionId)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: versionId
      type: System.String
    return:
      type: System.IO.Stream
    content.vb: Public Shared Function LoadDocumentStream(incomingInfo As IDocumentInfo, versionId As String) As Stream
  overload: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream*
  nameWithType.vb: PhysicalDocument.LoadDocumentStream(IDocumentInfo, String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream(SuperOffice.CRM.IDocumentInfo, String)
  name.vb: LoadDocumentStream(IDocumentInfo, String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream(System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream(System.String)
  id: LoadDocumentStream(System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: LoadDocumentStream(string)
  nameWithType: PhysicalDocument.LoadDocumentStream(string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream(string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Stream LoadDocumentStream(string versionId)
    parameters:
    - id: versionId
      type: System.String
    return:
      type: System.IO.Stream
    content.vb: Public Function LoadDocumentStream(versionId As String) As Stream
  overload: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream*
  nameWithType.vb: PhysicalDocument.LoadDocumentStream(String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream(String)
  name.vb: LoadDocumentStream(String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream
  id: LoadDocumentStream
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: LoadDocumentStream()
  nameWithType: PhysicalDocument.LoadDocumentStream()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public Stream LoadDocumentStream()
    return:
      type: System.IO.Stream
    content.vb: Public Function LoadDocumentStream() As Stream
  overload: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream*
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCode
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCode
  id: GetDatabaseLanguageCode
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDatabaseLanguageCode()
  nameWithType: PhysicalDocument.GetDatabaseLanguageCode()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCode()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Returns the database language for the current SuperOffice installation as stored in the ProductVersion table "SuperOffice" "DatabaseLanguage". "US"
  example: []
  syntax:
    content: public static string GetDatabaseLanguageCode()
    return:
      type: System.String
      description: 'SuperOffice Language code: "US", "SW", "GE" etc. NULL if nothing is configured.'
    content.vb: Public Shared Function GetDatabaseLanguageCode() As String
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCode*
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCulture
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCulture
  id: GetDatabaseLanguageCulture
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDatabaseLanguageCulture()
  nameWithType: PhysicalDocument.GetDatabaseLanguageCulture()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCulture()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Returns the database language for the current SuperOffice installation as stored in the ProductVersion table "SuperOffice" "DatabaseLanguage". "US"
  example: []
  syntax:
    content: public static CultureInfo GetDatabaseLanguageCulture()
    return:
      type: System.Globalization.CultureInfo
      description: 'CultureInfo based on the neutral ISO language: "en", "sv", "de" etc. NULL if nothing is configured.'
    content.vb: Public Shared Function GetDatabaseLanguageCulture() As CultureInfo
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCulture*
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateLanguages(SuperOffice.CRM.IDocumentTemplateInfo)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateLanguages(SuperOffice.CRM.IDocumentTemplateInfo)
  id: GetTemplateLanguages(SuperOffice.CRM.IDocumentTemplateInfo)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetTemplateLanguages(IDocumentTemplateInfo)
  nameWithType: PhysicalDocument.GetTemplateLanguages(IDocumentTemplateInfo)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateLanguages(SuperOffice.CRM.IDocumentTemplateInfo)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: >-
    Return the list of language-specific variants of a given document template, excepting the default language ("").

    The DatabaseLanguage should be used to determine the default language.
  example: []
  syntax:
    content: public static string[] GetTemplateLanguages(IDocumentTemplateInfo templateInfo)
    parameters:
    - id: templateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: The document template info
    return:
      type: System.String[]
      description: 'Array of ISO language codes identifying language variants: ["en", "sv", "de"]. Empty array if no variants'
    content.vb: Public Shared Function GetTemplateLanguages(templateInfo As IDocumentTemplateInfo) As String()
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateLanguages*
  exceptions:
  - type: SuperOffice.Exceptions.SoIllegalOperationException
    commentId: T:SuperOffice.Exceptions.SoIllegalOperationException
    description: Throws if templateInfo is null or id 0
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl
  id: GetDocumentUrl
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentUrl()
  nameWithType: PhysicalDocument.GetDocumentUrl()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public string GetDocumentUrl()
    return:
      type: System.String
    content.vb: Public Function GetDocumentUrl() As String
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl*
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl(System.String,System.Boolean)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl(System.String,System.Boolean)
  id: GetDocumentUrl(System.String,System.Boolean)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentUrl(string, bool)
  nameWithType: PhysicalDocument.GetDocumentUrl(string, bool)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl(string, bool)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public string GetDocumentUrl(string versionId, bool writeableUrl)
    parameters:
    - id: versionId
      type: System.String
    - id: writeableUrl
      type: System.Boolean
    return:
      type: System.String
    content.vb: Public Function GetDocumentUrl(versionId As String, writeableUrl As Boolean) As String
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl*
  nameWithType.vb: PhysicalDocument.GetDocumentUrl(String, Boolean)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl(String, Boolean)
  name.vb: GetDocumentUrl(String, Boolean)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean)
  id: GetDocumentUrl(SuperOffice.CRM.IDocumentInfo,System.String,System.Boolean)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentUrl(IDocumentInfo, string, bool)
  nameWithType: PhysicalDocument.GetDocumentUrl(IDocumentInfo, string, bool)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl(SuperOffice.CRM.IDocumentInfo, string, bool)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static string GetDocumentUrl(IDocumentInfo incomingInfo, string versionId, bool writeableUrl)
    parameters:
    - id: incomingInfo
      type: SuperOffice.CRM.IDocumentInfo
    - id: versionId
      type: System.String
    - id: writeableUrl
      type: System.Boolean
    return:
      type: System.String
    content.vb: Public Shared Function GetDocumentUrl(incomingInfo As IDocumentInfo, versionId As String, writeableUrl As Boolean) As String
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl*
  nameWithType.vb: PhysicalDocument.GetDocumentUrl(IDocumentInfo, String, Boolean)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl(SuperOffice.CRM.IDocumentInfo, String, Boolean)
  name.vb: GetDocumentUrl(IDocumentInfo, String, Boolean)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocument(System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocument(System.String[])
  id: DeleteDocument(System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: DeleteDocument(params string[])
  nameWithType: PhysicalDocument.DeleteDocument(params string[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocument(params string[])
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public ReturnInfo DeleteDocument(params string[] allowedReturnTypes)
    parameters:
    - id: allowedReturnTypes
      type: System.String[]
    return:
      type: SuperOffice.CRM.ReturnInfo
    content.vb: Public Function DeleteDocument(ParamArray allowedReturnTypes As String()) As ReturnInfo
  overload: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocument*
  nameWithType.vb: PhysicalDocument.DeleteDocument(ParamArray String())
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocument(ParamArray String())
  name.vb: DeleteDocument(ParamArray String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.RenameDocument(System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.RenameDocument(System.String)
  id: RenameDocument(System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: RenameDocument(string)
  nameWithType: PhysicalDocument.RenameDocument(string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.RenameDocument(string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public string RenameDocument(string suggestedNewName)
    parameters:
    - id: suggestedNewName
      type: System.String
    return:
      type: System.String
    content.vb: Public Function RenameDocument(suggestedNewName As String) As String
  overload: SuperOffice.CRM.Documents.PhysicalDocument.RenameDocument*
  nameWithType.vb: PhysicalDocument.RenameDocument(String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.RenameDocument(String)
  name.vb: RenameDocument(String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentIdFromPath(System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentIdFromPath(System.String)
  id: GetDocumentIdFromPath(System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentIdFromPath(string)
  nameWithType: PhysicalDocument.GetDocumentIdFromPath(string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentIdFromPath(string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static int GetDocumentIdFromPath(string documentNameAndPath)
    parameters:
    - id: documentNameAndPath
      type: System.String
    return:
      type: System.Int32
    content.vb: Public Shared Function GetDocumentIdFromPath(documentNameAndPath As String) As Integer
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentIdFromPath*
  nameWithType.vb: PhysicalDocument.GetDocumentIdFromPath(String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentIdFromPath(String)
  name.vb: GetDocumentIdFromPath(String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetPluginCapabilities(System.Int32)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetPluginCapabilities(System.Int32)
  id: GetPluginCapabilities(System.Int32)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetPluginCapabilities(int)
  nameWithType: PhysicalDocument.GetPluginCapabilities(int)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetPluginCapabilities(int)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static Dictionary<string, string> GetPluginCapabilities(int pluginId)
    parameters:
    - id: pluginId
      type: System.Int32
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public Shared Function GetPluginCapabilities(pluginId As Integer) As Dictionary(Of String, String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetPluginCapabilities*
  nameWithType.vb: PhysicalDocument.GetPluginCapabilities(Integer)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetPluginCapabilities(Integer)
  name.vb: GetPluginCapabilities(Integer)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream(System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream(System.Int32,System.String)
  id: LoadDocumentTemplateStream(System.Int32,System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: LoadDocumentTemplateStream(int, string)
  nameWithType: PhysicalDocument.LoadDocumentTemplateStream(int, string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream(int, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Get data stream for document template
  example: []
  syntax:
    content: public static Stream LoadDocumentTemplateStream(int documentTemplateId, string uiCulture)
    parameters:
    - id: documentTemplateId
      type: System.Int32
      description: Identity of document template
    - id: uiCulture
      type: System.String
    return:
      type: System.IO.Stream
      description: Opens stream with data for document template
    content.vb: Public Shared Function LoadDocumentTemplateStream(documentTemplateId As Integer, uiCulture As String) As Stream
  overload: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream*
  nameWithType.vb: PhysicalDocument.LoadDocumentTemplateStream(Integer, String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream(Integer, String)
  name.vb: LoadDocumentTemplateStream(Integer, String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream(System.String,System.Boolean,System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream(System.String,System.Boolean,System.String)
  id: LoadDocumentTemplateStream(System.String,System.Boolean,System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: LoadDocumentTemplateStream(string, bool, string)
  nameWithType: PhysicalDocument.LoadDocumentTemplateStream(string, bool, string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream(string, bool, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: >-
    Retrieve data stream for a document template based on an identifier(Ex: the filename).

    All available document plugins are searched.  The first available template is returned.
  example: []
  syntax:
    content: public static Stream LoadDocumentTemplateStream(string templateIdentifier, bool allowPersonalTemplate, string uiCulture)
    parameters:
    - id: templateIdentifier
      type: System.String
      description: 'Identifier for a template. Ex: "myTemplate.txt"'
    - id: allowPersonalTemplate
      type: System.Boolean
      description: Should we search for personal templates before central
    - id: uiCulture
      type: System.String
    return:
      type: System.IO.Stream
      description: Data stream for template or null if not found
    content.vb: Public Shared Function LoadDocumentTemplateStream(templateIdentifier As String, allowPersonalTemplate As Boolean, uiCulture As String) As Stream
  overload: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream*
  nameWithType.vb: PhysicalDocument.LoadDocumentTemplateStream(String, Boolean, String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream(String, Boolean, String)
  name.vb: LoadDocumentTemplateStream(String, Boolean, String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream(System.Int32,System.String,System.String@)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream(System.Int32,System.String,System.String@)
  id: LoadDocumentTemplateStream(System.Int32,System.String,System.String@)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: LoadDocumentTemplateStream(int, string, out string)
  nameWithType: PhysicalDocument.LoadDocumentTemplateStream(int, string, out string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream(int, string, out string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Get data stream for document template
  example: []
  syntax:
    content: public static Stream LoadDocumentTemplateStream(int documentTemplateId, string uiCulture, out string templateExtension)
    parameters:
    - id: documentTemplateId
      type: System.Int32
      description: Identity of document template
    - id: uiCulture
      type: System.String
    - id: templateExtension
      type: System.String
    return:
      type: System.IO.Stream
      description: Opens stream with data for document template
    content.vb: Public Shared Function LoadDocumentTemplateStream(documentTemplateId As Integer, uiCulture As String, templateExtension As String) As Stream
  overload: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream*
  nameWithType.vb: PhysicalDocument.LoadDocumentTemplateStream(Integer, String, String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream(Integer, String, String)
  name.vb: LoadDocumentTemplateStream(Integer, String, String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsStream(System.Int32,System.String,SuperOffice.IO.TagContainer)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsStream(System.Int32,System.String,SuperOffice.IO.TagContainer)
  id: CreateNewFromTemplateWithTagsAsStream(System.Int32,System.String,SuperOffice.IO.TagContainer)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CreateNewFromTemplateWithTagsAsStream(int, string, TagContainer)
  nameWithType: PhysicalDocument.CreateNewFromTemplateWithTagsAsStream(int, string, TagContainer)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsStream(int, string, SuperOffice.IO.TagContainer)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static Stream CreateNewFromTemplateWithTagsAsStream(int templateId, string uiCulture, TagContainer templateTags)
    parameters:
    - id: templateId
      type: System.Int32
    - id: uiCulture
      type: System.String
    - id: templateTags
      type: SuperOffice.IO.TagContainer
    return:
      type: System.IO.Stream
    content.vb: Public Shared Function CreateNewFromTemplateWithTagsAsStream(templateId As Integer, uiCulture As String, templateTags As TagContainer) As Stream
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsStream*
  nameWithType.vb: PhysicalDocument.CreateNewFromTemplateWithTagsAsStream(Integer, String, TagContainer)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsStream(Integer, String, SuperOffice.IO.TagContainer)
  name.vb: CreateNewFromTemplateWithTagsAsStream(Integer, String, TagContainer)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentTemplateStream(System.Int32,System.IO.Stream,System.String,System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentTemplateStream(System.Int32,System.IO.Stream,System.String,System.Int32,System.String)
  id: SaveDocumentTemplateStream(System.Int32,System.IO.Stream,System.String,System.Int32,System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: SaveDocumentTemplateStream(int, Stream, string, int, string)
  nameWithType: PhysicalDocument.SaveDocumentTemplateStream(int, Stream, string, int, string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentTemplateStream(int, System.IO.Stream, string, int, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Create or update the document template contents. Usually used when uploading a file to a new document template.
  example: []
  syntax:
    content: public static TemplateInfo SaveDocumentTemplateStream(int documentTemplateId, Stream content, string uiCulture, int pluginId, string providedFilename = null)
    parameters:
    - id: documentTemplateId
      type: System.Int32
      description: Document template record id the database.
    - id: content
      type: System.IO.Stream
      description: Stream containing file content
    - id: uiCulture
      type: System.String
      description: Language variation on the template. May be ignored by the plugin, or used to keep language specific versions of the template.
    - id: pluginId
      type: System.Int32
      description: If negative, use the plugin specified in the document template's load-from-plugin-id field
    - id: providedFilename
      type: System.String
      description: If provided and non-ewmpty, will be used to override extref value passed along to document plugin. Required to support replacing file-formats for existing templates (among other things)
    return:
      type: SuperOffice.CRM.Documents.TemplateInfo
      description: Template information with ExtRef/Filename and MimeType filled in. These values are saved in the DocTmpl record.
    content.vb: Public Shared Function SaveDocumentTemplateStream(documentTemplateId As Integer, content As Stream, uiCulture As String, pluginId As Integer, providedFilename As String = Nothing) As TemplateInfo
  overload: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentTemplateStream*
  nameWithType.vb: PhysicalDocument.SaveDocumentTemplateStream(Integer, Stream, String, Integer, String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentTemplateStream(Integer, System.IO.Stream, String, Integer, String)
  name.vb: SaveDocumentTemplateStream(Integer, Stream, String, Integer, String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateExtension(System.Int32)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateExtension(System.Int32)
  id: GetTemplateExtension(System.Int32)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetTemplateExtension(int)
  nameWithType: PhysicalDocument.GetTemplateExtension(int)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateExtension(int)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: >-
    Get the "extension" for the template, i.e., what the file extension would have been - to

    help identify the stream content format.
  remarks: >-
    Template documents are generally created in text editors and stored as files of some kind. The

    file extension indicates the kind of document - doc, docx, xls, txt, and so on. While the template

    may be stored inside the document repository as any kind of data byte collection, a concept

    akin to the file extension is still needed to help identify the document format, ahead of actually

    reading the template content.
  example: []
  syntax:
    content: public static string GetTemplateExtension(int documentTemplateId)
    parameters:
    - id: documentTemplateId
      type: System.Int32
      description: Document template primary key id
    return:
      type: System.String
      description: String equivalent to a file extension, for instance ".docx"
    content.vb: Public Shared Function GetTemplateExtension(documentTemplateId As Integer) As String
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateExtension*
  nameWithType.vb: PhysicalDocument.GetTemplateExtension(Integer)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateExtension(Integer)
  name.vb: GetTemplateExtension(Integer)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateId(System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateId(System.String)
  id: GetTemplateId(System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetTemplateId(string)
  nameWithType: PhysicalDocument.GetTemplateId(string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateId(string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static int GetTemplateId(string templateName)
    parameters:
    - id: templateName
      type: System.String
    return:
      type: System.Int32
    content.vb: Public Shared Function GetTemplateId(templateName As String) As Integer
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateId*
  nameWithType.vb: PhysicalDocument.GetTemplateId(String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateId(String)
  name.vb: GetTemplateId(String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTypesForDocumentTemplates(System.Int32)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTypesForDocumentTemplates(System.Int32)
  id: GetDocumentTypesForDocumentTemplates(System.Int32)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentTypesForDocumentTemplates(int)
  nameWithType: PhysicalDocument.GetDocumentTypesForDocumentTemplates(int)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTypesForDocumentTemplates(int)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Get a list of supported document template types.
  example: []
  syntax:
    content: public static Dictionary<int, string> GetDocumentTypesForDocumentTemplates(int pluginId)
    parameters:
    - id: pluginId
      type: System.Int32
    return:
      type: System.Collections.Generic.Dictionary{System.Int32,System.String}
      description: An dictionary of key=display-name for supported document types for template. Empty dictionary if no document types supported.
    content.vb: Public Shared Function GetDocumentTypesForDocumentTemplates(pluginId As Integer) As Dictionary(Of Integer, String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTypesForDocumentTemplates*
  nameWithType.vb: PhysicalDocument.GetDocumentTypesForDocumentTemplates(Integer)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTypesForDocumentTemplates(Integer)
  name.vb: GetDocumentTypesForDocumentTemplates(Integer)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplate(System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplate(System.Int32,System.Int32)
  id: CreateDefaultDocumentTemplate(System.Int32,System.Int32)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CreateDefaultDocumentTemplate(int, int)
  nameWithType: PhysicalDocument.CreateDefaultDocumentTemplate(int, int)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplate(int, int)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Create a blank default document based on the given documentTypeId. Called when creating a new template.
  example: []
  syntax:
    content: public static string CreateDefaultDocumentTemplate(int documentTypeKey, int documentTemplateId)
    parameters:
    - id: documentTypeKey
      type: System.Int32
      description: Id for a document type. Ignored if document plugin does not use document types.
    - id: documentTemplateId
      type: System.Int32
      description: Document template id
    return:
      type: System.String
      description: Extref/Filename for new template. This value is written to the template's Filename property in the database.
    content.vb: Public Shared Function CreateDefaultDocumentTemplate(documentTypeKey As Integer, documentTemplateId As Integer) As String
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplate*
  nameWithType.vb: PhysicalDocument.CreateDefaultDocumentTemplate(Integer, Integer)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplate(Integer, Integer)
  name.vb: CreateDefaultDocumentTemplate(Integer, Integer)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateProperties(System.Int32,System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateProperties(System.Int32,System.String[])
  id: GetDocumentTemplateProperties(System.Int32,System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentTemplateProperties(int, params string[])
  nameWithType: PhysicalDocument.GetDocumentTemplateProperties(int, params string[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateProperties(int, params string[])
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static Dictionary<string, string> GetDocumentTemplateProperties(int documentTemplateId, params string[] requestedProperties)
    parameters:
    - id: documentTemplateId
      type: System.Int32
    - id: requestedProperties
      type: System.String[]
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public Shared Function GetDocumentTemplateProperties(documentTemplateId As Integer, ParamArray requestedProperties As String()) As Dictionary(Of String, String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateProperties*
  nameWithType.vb: PhysicalDocument.GetDocumentTemplateProperties(Integer, ParamArray String())
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateProperties(Integer, ParamArray String())
  name.vb: GetDocumentTemplateProperties(Integer, ParamArray String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateUrl(System.Int32,System.Boolean,System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateUrl(System.Int32,System.Boolean,System.String)
  id: GetDocumentTemplateUrl(System.Int32,System.Boolean,System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentTemplateUrl(int, bool, string)
  nameWithType: PhysicalDocument.GetDocumentTemplateUrl(int, bool, string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateUrl(int, bool, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Get a WebDAV-compliant URL referring to the given document template
  remarks: >-
    Document plugins may support document access via WebDAV. This call is used to retrieve a WebDAV url that

    will give the specified access to the document. This URL will be passed to the ultimate client

    (most probably a text editor application), and control will not return to NetServer.

    <p></p>

    The string returned here should be a fully resolved URL that can be given directly to the editor application.
  example: []
  syntax:
    content: public static string GetDocumentTemplateUrl(int documentTemplateId, bool writableUrl, string languageCode)
    parameters:
    - id: documentTemplateId
      type: System.Int32
      description: The id of the document template
    - id: writableUrl
      type: System.Boolean
    - id: languageCode
      type: System.String
      description: Language variation on the template. May be ignored by the plugin, or used to keep language specific versions of the template.
    return:
      type: System.String
      description: >-
        URL that gives access to the document. If the document plugin
                    does not support URL access, then a blank string should be returned.
    content.vb: Public Shared Function GetDocumentTemplateUrl(documentTemplateId As Integer, writableUrl As Boolean, languageCode As String) As String
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateUrl*
  nameWithType.vb: PhysicalDocument.GetDocumentTemplateUrl(Integer, Boolean, String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateUrl(Integer, Boolean, String)
  name.vb: GetDocumentTemplateUrl(Integer, Boolean, String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentProperties(System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentProperties(System.String[])
  id: GetDocumentProperties(System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentProperties(params string[])
  nameWithType: PhysicalDocument.GetDocumentProperties(params string[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentProperties(params string[])
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Get the values of certain properties, for a given document
  remarks: >-
    Each document can have a number of properties associated with it. A set of standard properties

    is defined in the <xref href="SuperOffice.CRM.Documents.Constants.Properties" data-throw-if-not-resolved="false"></xref> class. Ideally, retrieving properties should

    be a lightweight operation.

    <p></p>

    Note that 'properties' are a one-way mechanism where the document plugin provides information about

    the document or certain aspects of it. This is not the same as document-specific

    metadata, which is handled by the <xref href="SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData" data-throw-if-not-resolved="false"></xref> and <xref href="SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(System.String%5b%5d)" data-throw-if-not-resolved="false"></xref>

    methods.
  example: []
  syntax:
    content: public Dictionary<string, string> GetDocumentProperties(params string[] requestedProperties)
    parameters:
    - id: requestedProperties
      type: System.String[]
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: >-
        Dictionary of key=value pairs, where the key is one of the requested property strings, and the value
                    is the value of that property for the given document.
    content.vb: Public Function GetDocumentProperties(ParamArray requestedProperties As String()) As Dictionary(Of String, String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentProperties*
  nameWithType.vb: PhysicalDocument.GetDocumentProperties(ParamArray String())
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentProperties(ParamArray String())
  name.vb: GetDocumentProperties(ParamArray String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(System.String[])
  id: GetDocumentCommands(System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDocumentCommands(params string[])
  nameWithType: PhysicalDocument.GetDocumentCommands(params string[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(params string[])
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: >-
    Get a list of custom commands, applicable to a specific document. Note that commands related to

    standard locking and versioning operations have their own API calls and are not 'custom commands' in this sense.
  remarks: >-
    This API is called before a menu, task button or other GUI item that gives access to document-specific commands is shown.

    It is used to populate the GUI with available commands for a particular document, the results are not cached by the GUI.

    <p></p>

    Depending on the return type indicated in the command, the command might be filtered by GUI. More information can

    be found in the <xref href="SuperOffice.CRM.Documents.CommandInfo" data-throw-if-not-resolved="false"></xref> topic.
  example: []
  syntax:
    content: public CommandInfo[] GetDocumentCommands(params string[] allowedReturnTypes)
    parameters:
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is
                    empty then no limits are placed on return type.
    return:
      type: SuperOffice.CRM.Documents.CommandInfo[]
      description: Array of command descriptions. If there are no custom commands available, an empty array should be returned.
    content.vb: Public Function GetDocumentCommands(ParamArray allowedReturnTypes As String()) As CommandInfo()
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands*
  nameWithType.vb: PhysicalDocument.GetDocumentCommands(ParamArray String())
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(ParamArray String())
  name.vb: GetDocumentCommands(ParamArray String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand(System.String,System.String[],System.String,System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand(System.String,System.String[],System.String,System.String[])
  id: ExecuteDocumentCommand(System.String,System.String[],System.String,System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: ExecuteDocumentCommand(string, string[], string, params string[])
  nameWithType: PhysicalDocument.ExecuteDocumentCommand(string, string[], string, params string[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand(string, string[], string, params string[])
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Execute a custom command on a specified document and version
  remarks: >-
    This command is called when the user chooses an action item from a dropdown/context menu.

    It is also reflected in the DocumentAgent service interface, so that custom GUI’s and external

    code can directly execute document plugin commands; this is useful if a plugin also has some

    corresponding custom GUI that needs to execute commands depending on user interaction.

    <p></p>

    The parameter <code class="paramref">allowedReturnTypes</code> can be used by clients to hint to the plugin

    what kind of return value processing is available. For instance, a mobile client might

    only offer None and Message, and this information can be used by the document plugin to adapt

    the processing of a command, if it wants to (for instance, use default values instead of

    triggering some more advanced workflow).

    <p></p>

    The command is obtained from the <xref href="SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(System.String%5b%5d)" data-throw-if-not-resolved="false"></xref> method.
  example: []
  syntax:
    content: public ReturnInfo ExecuteDocumentCommand(string versionId, string[] allowedReturnTypes, string command, params string[] additionalData)
    parameters:
    - id: versionId
      type: System.String
      description: Version identifier, blank implies 'latest' version
    - id: allowedReturnTypes
      type: System.String[]
      description: >-
        Array of names of allowed return types; if this array is
                    empty then no limits are placed on return type.
    - id: command
      type: System.String
      description: >-
        Command name, taken from an earlier call to <xref href="SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(System.String%5b%5d)" data-throw-if-not-resolved="false"></xref>
                    - or any other command name that is understood by the provider. 'Private' commands that
                    are not declared in GetDocumentCommands but are known to the authors of custom GUI code
                    or OK.
    - id: additionalData
      type: System.String[]
      description: >-
        Array of strings containing whatever additional data the command
                    may need. This parameter is intended for authors of more complex custom GUI's and works as
                    a tunnel between the ultimate client and the document plugin. Standard GUI made by SuperOffice,
                    such as a context menu connected to a document item in an archive, will not populate this
                    member.<br />It is strongly suggested that the convention of using name=value for each string
                    array element be followed here.
    return:
      type: SuperOffice.CRM.ReturnInfo
      description: Return value object, specifying failure or success plus any optional, additional processing to be triggered
    content.vb: Public Function ExecuteDocumentCommand(versionId As String, allowedReturnTypes As String(), command As String, ParamArray additionalData As String()) As ReturnInfo
  overload: SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand*
  nameWithType.vb: PhysicalDocument.ExecuteDocumentCommand(String, String(), String, ParamArray String())
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand(String, String(), String, ParamArray String())
  name.vb: ExecuteDocumentCommand(String, String(), String, ParamArray String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData
  id: LoadMetaData
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: LoadMetaData()
  nameWithType: PhysicalDocument.LoadMetaData()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Retrieve metadata owned by the plugin/repository, related to one document (excluding version-dependent metadata)
  remarks: >-
    A document plugin may consume and provide an arbitrary number of metadata fields. These are placed

    in a string, string dictionary, representing name/value pairs. This call should <b>not</b>

    retrieve metadata related to any particular version, only data related to the document as a whole.

    <p></p>

    The NetServer service call DocumentAgent.GetDocumentEntity will (among other things) result in a call

    to this API to populate the ExtraFields property of the document entity carrier. Note, however,

    that the carrier handed over to the client may contain other fields in addition to those

    supplied by the document plugin, since the extrafields mechanism is generic and

    there may be other metadata providers along the line.

    <p></p>

    Attribute names should be prefixed with the name of the document plugin, to maintain global uniqueness.

    <p></p>

    It is <b>strongly suggested</b> that non-string data be formatted according to the rules followed by the

    <xref href="SuperOffice.CRM.Globalization.CultureDataFormatter" data-throw-if-not-resolved="false"></xref> class, to avoid problems

    when parsing dates and floating-point types between different cultures and platforms.
  example: []
  syntax:
    content: public string[] LoadMetaData()
    return:
      type: System.String[]
      description: Array of name=value strings, each representing one key and one value.
    content.vb: Public Function LoadMetaData() As String()
  overload: SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData*
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadVersionInfo(System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.LoadVersionInfo(System.String)
  id: LoadVersionInfo(System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: LoadVersionInfo(string)
  nameWithType: PhysicalDocument.LoadVersionInfo(string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadVersionInfo(string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: >-
    Retrieve metadata owned by the plugin/repository, related to one particular

    version of one document
  remarks: >-
    A document plugin may consume and provide an arbitrary number of metadata fields. These are placed

    in a string, string dictionary, representing name/value pairs. This call should only retrieve

    metadata related to a version.

    <p></p>

    The NetServer service call DocumentAgent.GetDocumentEntity will (among other things) result in a call

    to this API to populate the VersionInfo property of the document entity carrier.

    <p></p>

    Attribute names should be prefixed with the name of the document plugin, to maintain global uniqueness.

    <p></p>

    It is <b>strongly suggested</b> that non-string data be formatted according to the rules followed by the

    <xref href="SuperOffice.CRM.Globalization.CultureDataFormatter" data-throw-if-not-resolved="false"></xref> class, to avoid problems

    when parsing dates and floating-point types between different cultures and platforms.

    <p></p>

    To efficiently retrieve information about <b>all</b> versions, use the

    <xref href="SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)" data-throw-if-not-resolved="false"></xref> method, instead of iterating

    over this method.
  example: []
  syntax:
    content: public VersionInfo LoadVersionInfo(string versionId)
    parameters:
    - id: versionId
      type: System.String
      description: Version identifier, blank implies 'latest' version
    return:
      type: SuperOffice.CRM.Documents.VersionInfo
      description: Fully populated version info structure
    content.vb: Public Function LoadVersionInfo(versionId As String) As VersionInfo
  overload: SuperOffice.CRM.Documents.PhysicalDocument.LoadVersionInfo*
  nameWithType.vb: PhysicalDocument.LoadVersionInfo(String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.LoadVersionInfo(String)
  name.vb: LoadVersionInfo(String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(System.String[])
  id: SaveMetaData(System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: SaveMetaData(string[])
  nameWithType: PhysicalDocument.SaveMetaData(string[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(string[])
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Store/update plugin-dependent document metadata in the repository
  remarks: >-
    This call is made when the document metadata should be stored, and is the complement of the

    <xref href="SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)" data-throw-if-not-resolved="false"></xref> method.

    The document plugin should extract whatever elements it

    recognizes from the pluginData name/value dictionary. Failure to recognize an element should not cause an exception,

    as there may be other plugins along the line (not document plugins, but service-level field providers) that own the data.

    Likewise, absence of a value should be taken to imply “no change” to that value - not "delete".

    <p></p>

    It is <b>strongly suggested</b> that non-string data be formatted according to the rules followed by the

    <xref href="SuperOffice.CRM.Globalization.CultureDataFormatter" data-throw-if-not-resolved="false"></xref> class, to avoid problems

    when parsing dates and floating-point types between different cultures and platforms.
  example: []
  syntax:
    content: public void SaveMetaData(string[] pluginData)
    parameters:
    - id: pluginData
      type: System.String[]
      description: Name=value array containing metadata
    content.vb: Public Sub SaveMetaData(pluginData As String())
  overload: SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData*
  nameWithType.vb: PhysicalDocument.SaveMetaData(String())
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(String())
  name.vb: SaveMetaData(String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.Exists
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.Exists
  id: Exists
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: Exists()
  nameWithType: PhysicalDocument.Exists()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.Exists()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public bool Exists()
    return:
      type: System.Boolean
    content.vb: Public Function Exists() As Boolean
  overload: SuperOffice.CRM.Documents.PhysicalDocument.Exists*
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetLength(System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetLength(System.String)
  id: GetLength(System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetLength(string)
  nameWithType: PhysicalDocument.GetLength(string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetLength(string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public long GetLength(string versionId)
    parameters:
    - id: versionId
      type: System.String
    return:
      type: System.Int64
    content.vb: Public Function GetLength(versionId As String) As Long
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetLength*
  nameWithType.vb: PhysicalDocument.GetLength(String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetLength(String)
  name.vb: GetLength(String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetCheckoutState
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetCheckoutState
  id: GetCheckoutState
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetCheckoutState()
  nameWithType: PhysicalDocument.GetCheckoutState()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetCheckoutState()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public CheckoutInfo GetCheckoutState()
    return:
      type: SuperOffice.CRM.Documents.CheckoutInfo
    content.vb: Public Function GetCheckoutState() As CheckoutInfo
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetCheckoutState*
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocument(System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocument(System.String[])
  id: CheckoutDocument(System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CheckoutDocument(params string[])
  nameWithType: PhysicalDocument.CheckoutDocument(params string[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocument(params string[])
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public ReturnInfo CheckoutDocument(params string[] allowedReturnTypes)
    parameters:
    - id: allowedReturnTypes
      type: System.String[]
    return:
      type: SuperOffice.CRM.ReturnInfo
    content.vb: Public Function CheckoutDocument(ParamArray allowedReturnTypes As String()) As ReturnInfo
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocument*
  nameWithType.vb: PhysicalDocument.CheckoutDocument(ParamArray String())
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocument(ParamArray String())
  name.vb: CheckoutDocument(ParamArray String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocument(System.String[],System.String,System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocument(System.String[],System.String,System.String[])
  id: CheckinDocument(System.String[],System.String,System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CheckinDocument(string[], string, string[])
  nameWithType: PhysicalDocument.CheckinDocument(string[], string, string[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocument(string[], string, string[])
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public ReturnInfo CheckinDocument(string[] allowedReturnTypes, string versionDescription, string[] versionExtraFields)
    parameters:
    - id: allowedReturnTypes
      type: System.String[]
    - id: versionDescription
      type: System.String
    - id: versionExtraFields
      type: System.String[]
    return:
      type: SuperOffice.CRM.ReturnInfo
    content.vb: Public Function CheckinDocument(allowedReturnTypes As String(), versionDescription As String, versionExtraFields As String()) As ReturnInfo
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocument*
  nameWithType.vb: PhysicalDocument.CheckinDocument(String(), String, String())
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocument(String(), String, String())
  name.vb: CheckinDocument(String(), String, String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocument(System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocument(System.String[])
  id: UndoCheckoutDocument(System.String[])
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: UndoCheckoutDocument(params string[])
  nameWithType: PhysicalDocument.UndoCheckoutDocument(params string[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocument(params string[])
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public ReturnInfo UndoCheckoutDocument(params string[] allowedReturnTypes)
    parameters:
    - id: allowedReturnTypes
      type: System.String[]
    return:
      type: SuperOffice.CRM.ReturnInfo
    content.vb: Public Function UndoCheckoutDocument(ParamArray allowedReturnTypes As String()) As ReturnInfo
  overload: SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocument*
  nameWithType.vb: PhysicalDocument.UndoCheckoutDocument(ParamArray String())
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocument(ParamArray String())
  name.vb: UndoCheckoutDocument(ParamArray String())
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetVersionList
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetVersionList
  id: GetVersionList
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetVersionList()
  nameWithType: PhysicalDocument.GetVersionList()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetVersionList()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public VersionInfo[] GetVersionList()
    return:
      type: SuperOffice.CRM.Documents.VersionInfo[]
    content.vb: Public Function GetVersionList() As VersionInfo()
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetVersionList*
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetPlugin(System.Int32)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetPlugin(System.Int32)
  id: GetPlugin(System.Int32)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetPlugin(int)
  nameWithType: PhysicalDocument.GetPlugin(int)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetPlugin(int)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Return the plugin specified by its plugin-id
  example: []
  syntax:
    content: public static IDocumentPlugin2 GetPlugin(int pluginId)
    parameters:
    - id: pluginId
      type: System.Int32
    return:
      type: SuperOffice.CRM.Documents.IDocumentPlugin2
    content.vb: Public Shared Function GetPlugin(pluginId As Integer) As IDocumentPlugin2
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetPlugin*
  nameWithType.vb: PhysicalDocument.GetPlugin(Integer)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetPlugin(Integer)
  name.vb: GetPlugin(Integer)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.BeginWrite
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.BeginWrite
  id: BeginWrite
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: BeginWrite()
  nameWithType: PhysicalDocument.BeginWrite()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.BeginWrite()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Start writing the document file.
  remarks: >-
    Use the <xref href="SuperOffice.IO.IStreamProvider.Write(System.Int64%2cSystem.Byte%5b%5d%2cSystem.Int32%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> method to write data to the file.  

    As data might be written to a temporary location, the <xref href="SuperOffice.IO.IStreamProvider.EndWrite" data-throw-if-not-resolved="false"></xref> 

    will archive the document to the document archive.
  example: []
  syntax:
    content: public void BeginWrite()
    content.vb: Public Sub BeginWrite()
  overload: SuperOffice.CRM.Documents.PhysicalDocument.BeginWrite*
  implements:
  - SuperOffice.IO.IStreamProvider.BeginWrite
- uid: SuperOffice.CRM.Documents.PhysicalDocument.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  id: Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: Write(long, byte[], int, int)
  nameWithType: PhysicalDocument.Write(long, byte[], int, int)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.Write(long, byte[], int, int)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Write a block of data to a file.
  remarks: >-
    <xref href="SuperOffice.IO.IStreamProvider.BeginWrite" data-throw-if-not-resolved="false"></xref> must be called before this method.  It is not 
                	requred that <xref href="SuperOffice.IO.IStreamProvider.BeginWrite" data-throw-if-not-resolved="false"></xref> is called within the scope of 
                	this method.  It is required that it is called on bahalf of the same 
                	user and on the same document and that either this method or 
                	<xref href="SuperOffice.IO.IStreamProvider.BeginWrite" data-throw-if-not-resolved="false"></xref> is called during the last time period specified 
                	in the configuration.  Default time period is 24 hours.
  example: []
  syntax:
    content: public void Write(long filePosition, byte[] buffer, int bufferStartPosition, int length)
    parameters:
    - id: filePosition
      type: System.Int64
      description: Position in the file to start writing
    - id: buffer
      type: System.Byte[]
      description: Buffer to write
    - id: bufferStartPosition
      type: System.Int32
      description: Position in the buffer to start writing from.
    - id: length
      type: System.Int32
    content.vb: Public Sub Write(filePosition As Long, buffer As Byte(), bufferStartPosition As Integer, length As Integer)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.Write*
  implements:
  - SuperOffice.IO.IStreamProvider.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  nameWithType.vb: PhysicalDocument.Write(Long, Byte(), Integer, Integer)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.Write(Long, Byte(), Integer, Integer)
  name.vb: Write(Long, Byte(), Integer, Integer)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.EndWrite
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.EndWrite
  id: EndWrite
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: EndWrite()
  nameWithType: PhysicalDocument.EndWrite()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.EndWrite()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: >-
    Specify that the writing of the document is completed and that 

    the document can be archived in the document archive.
  example: []
  syntax:
    content: public void EndWrite()
    content.vb: Public Sub EndWrite()
  overload: SuperOffice.CRM.Documents.PhysicalDocument.EndWrite*
  implements:
  - SuperOffice.IO.IStreamProvider.EndWrite
- uid: SuperOffice.CRM.Documents.PhysicalDocument.BeginRead
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.BeginRead
  id: BeginRead
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: BeginRead()
  nameWithType: PhysicalDocument.BeginRead()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.BeginRead()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Start reading the document.
  remarks: >-
    Read bytes from the document using the <xref href="SuperOffice.IO.IStreamProvider.Read(System.Int64%2cSystem.Byte%5b%5d%2cSystem.Int32%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> method.  

    Call the <xref href="SuperOffice.IO.IStreamProvider.EndRead" data-throw-if-not-resolved="false"></xref> method to specify that you are 

    finished reading the document.
  example: []
  syntax:
    content: public void BeginRead()
    content.vb: Public Sub BeginRead()
  overload: SuperOffice.CRM.Documents.PhysicalDocument.BeginRead*
  implements:
  - SuperOffice.IO.IStreamProvider.BeginRead
- uid: SuperOffice.CRM.Documents.PhysicalDocument.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  id: Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: Read(long, byte[], int, int)
  nameWithType: PhysicalDocument.Read(long, byte[], int, int)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.Read(long, byte[], int, int)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Read data from the document
  remarks: >-
    <xref href="SuperOffice.IO.IStreamProvider.BeginRead" data-throw-if-not-resolved="false"></xref> must be called before this method.  It is not 
                	requred that <xref href="SuperOffice.IO.IStreamProvider.BeginRead" data-throw-if-not-resolved="false"></xref> is called within the scope of 
                	this method.  It is required that it is called on bahalf of the same 
                	user and on the same document and that either this method or 
                	<xref href="SuperOffice.IO.IStreamProvider.BeginRead" data-throw-if-not-resolved="false"></xref> is called during the last time period specified 
                	in the configuration.  Default time period is 24 hours.
  example: []
  syntax:
    content: public int Read(long filePosition, byte[] buffer, int bufferStartPosition, int length)
    parameters:
    - id: filePosition
      type: System.Int64
      description: Position in the file to start reading from.
    - id: buffer
      type: System.Byte[]
      description: Buffer to put the data read.
    - id: bufferStartPosition
      type: System.Int32
      description: Position in buffer to start filling it.
    - id: length
      type: System.Int32
    return:
      type: System.Int32
      description: >-
        Number of bytes actually read from the file.  This should only be 

        less then the file when the end of file is reached.
    content.vb: Public Function Read(filePosition As Long, buffer As Byte(), bufferStartPosition As Integer, length As Integer) As Integer
  overload: SuperOffice.CRM.Documents.PhysicalDocument.Read*
  implements:
  - SuperOffice.IO.IStreamProvider.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  nameWithType.vb: PhysicalDocument.Read(Long, Byte(), Integer, Integer)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.Read(Long, Byte(), Integer, Integer)
  name.vb: Read(Long, Byte(), Integer, Integer)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.EndRead
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.EndRead
  id: EndRead
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: EndRead()
  nameWithType: PhysicalDocument.EndRead()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.EndRead()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: >-
    Express that you are finished reading the file.  If the file is read from 

    a temporary location, it will be removed from it.
  example: []
  syntax:
    content: public void EndRead()
    content.vb: Public Sub EndRead()
  overload: SuperOffice.CRM.Documents.PhysicalDocument.EndRead*
  implements:
  - SuperOffice.IO.IStreamProvider.EndRead
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  id: CreateDefaultDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CreateDefaultDocumentTemplateLanguage(IDocumentTemplateInfo, string)
  nameWithType: PhysicalDocument.CreateDefaultDocumentTemplateLanguage(IDocumentTemplateInfo, string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Create a new template language alternative based on the existing template
  example: []
  syntax:
    content: public static void CreateDefaultDocumentTemplateLanguage(IDocumentTemplateInfo docInfo, string languageCode)
    parameters:
    - id: docInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: ''
    - id: languageCode
      type: System.String
      description: ''
    content.vb: Public Shared Sub CreateDefaultDocumentTemplateLanguage(docInfo As IDocumentTemplateInfo, languageCode As String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateLanguage*
  nameWithType.vb: PhysicalDocument.CreateDefaultDocumentTemplateLanguage(IDocumentTemplateInfo, String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo, String)
  name.vb: CreateDefaultDocumentTemplateLanguage(IDocumentTemplateInfo, String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  id: DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: DeleteDocumentTemplateLanguage(IDocumentTemplateInfo, string)
  nameWithType: PhysicalDocument.DeleteDocumentTemplateLanguage(IDocumentTemplateInfo, string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Deletes the document template language.
  example: []
  syntax:
    content: public static void DeleteDocumentTemplateLanguage(IDocumentTemplateInfo templateInfo, string languageCode)
    parameters:
    - id: templateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: Information about the template. The fields id and external reference must be filled out
    - id: languageCode
      type: System.String
      description: The language code ('en-US, 'nb-NO', etc). Field cannot be empty.
    content.vb: Public Shared Sub DeleteDocumentTemplateLanguage(templateInfo As IDocumentTemplateInfo, languageCode As String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentTemplateLanguage*
  nameWithType.vb: PhysicalDocument.DeleteDocumentTemplateLanguage(IDocumentTemplateInfo, String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentTemplateLanguage(SuperOffice.CRM.IDocumentTemplateInfo, String)
  name.vb: DeleteDocumentTemplateLanguage(IDocumentTemplateInfo, String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SetDocumentTemplateFromDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo,SuperOffice.CRM.IDocumentTemplateInfo)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.SetDocumentTemplateFromDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo,SuperOffice.CRM.IDocumentTemplateInfo)
  id: SetDocumentTemplateFromDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo,SuperOffice.CRM.IDocumentTemplateInfo)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: SetDocumentTemplateFromDocumentTemplate(IDocumentTemplateInfo, IDocumentTemplateInfo)
  nameWithType: PhysicalDocument.SetDocumentTemplateFromDocumentTemplate(IDocumentTemplateInfo, IDocumentTemplateInfo)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SetDocumentTemplateFromDocumentTemplate(SuperOffice.CRM.IDocumentTemplateInfo, SuperOffice.CRM.IDocumentTemplateInfo)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static TemplateInfo SetDocumentTemplateFromDocumentTemplate(IDocumentTemplateInfo sourceTemplateInfo, IDocumentTemplateInfo destTemplateInfo)
    parameters:
    - id: sourceTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
    - id: destTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
    return:
      type: SuperOffice.CRM.Documents.TemplateInfo
    content.vb: Public Shared Function SetDocumentTemplateFromDocumentTemplate(sourceTemplateInfo As IDocumentTemplateInfo, destTemplateInfo As IDocumentTemplateInfo) As TemplateInfo
  overload: SuperOffice.CRM.Documents.PhysicalDocument.SetDocumentTemplateFromDocumentTemplate*
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateFilenameForNewTemplate(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.CreateFilenameForNewTemplate(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  id: CreateFilenameForNewTemplate(SuperOffice.CRM.IDocumentTemplateInfo,System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: CreateFilenameForNewTemplate(IDocumentTemplateInfo, string)
  nameWithType: PhysicalDocument.CreateFilenameForNewTemplate(IDocumentTemplateInfo, string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateFilenameForNewTemplate(SuperOffice.CRM.IDocumentTemplateInfo, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: >-
    Calculates a new name for a template based on the properties from an existing template.

    Should only be used when copying existing templates.
  example: []
  syntax:
    content: public static string CreateFilenameForNewTemplate(IDocumentTemplateInfo sourceTemplateInfo, string newTemplateName)
    parameters:
    - id: sourceTemplateInfo
      type: SuperOffice.CRM.IDocumentTemplateInfo
      description: ''
    - id: newTemplateName
      type: System.String
      description: ''
    return:
      type: System.String
      description: newer null
    content.vb: Public Shared Function CreateFilenameForNewTemplate(sourceTemplateInfo As IDocumentTemplateInfo, newTemplateName As String) As String
  overload: SuperOffice.CRM.Documents.PhysicalDocument.CreateFilenameForNewTemplate*
  nameWithType.vb: PhysicalDocument.CreateFilenameForNewTemplate(IDocumentTemplateInfo, String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.CreateFilenameForNewTemplate(SuperOffice.CRM.IDocumentTemplateInfo, String)
  name.vb: CreateFilenameForNewTemplate(IDocumentTemplateInfo, String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDefaultDocumentPluginId
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDefaultDocumentPluginId
  id: GetDefaultDocumentPluginId
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetDefaultDocumentPluginId()
  nameWithType: PhysicalDocument.GetDefaultDocumentPluginId()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDefaultDocumentPluginId()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Get the default document plugin id
  example: []
  syntax:
    content: public static int GetDefaultDocumentPluginId()
    return:
      type: System.Int32
      description: ''
    content.vb: Public Shared Function GetDefaultDocumentPluginId() As Integer
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetDefaultDocumentPluginId*
- uid: SuperOffice.CRM.Documents.PhysicalDocument.AssociateRename(System.String,System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.AssociateRename(System.String,System.String)
  id: AssociateRename(System.String,System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: AssociateRename(string, string)
  nameWithType: PhysicalDocument.AssociateRename(string, string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.AssociateRename(string, string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Invokes document plugins that implements the <xref href="SuperOffice.Plugins.CRM.Documents.IAssociateRename" data-throw-if-not-resolved="false"></xref> interface.
  example: []
  syntax:
    content: public static void AssociateRename(string oldName, string newName)
    parameters:
    - id: oldName
      type: System.String
      description: ''
    - id: newName
      type: System.String
      description: ''
    content.vb: Public Shared Sub AssociateRename(oldName As String, newName As String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.AssociateRename*
  nameWithType.vb: PhysicalDocument.AssociateRename(String, String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.AssociateRename(String, String)
  name.vb: AssociateRename(String, String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.IsNameValid(System.String)
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.IsNameValid(System.String)
  id: IsNameValid(System.String)
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: IsNameValid(string)
  nameWithType: PhysicalDocument.IsNameValid(string)
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.IsNameValid(string)
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static bool IsNameValid(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsNameValid(name As String) As Boolean
  overload: SuperOffice.CRM.Documents.PhysicalDocument.IsNameValid*
  nameWithType.vb: PhysicalDocument.IsNameValid(String)
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.IsNameValid(String)
  name.vb: IsNameValid(String)
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetAllDocPlugins
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetAllDocPlugins
  id: GetAllDocPlugins
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: GetAllDocPlugins()
  nameWithType: PhysicalDocument.GetAllDocPlugins()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetAllDocPlugins()
  type: Method
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  syntax:
    content: public static Dictionary<int, string> GetAllDocPlugins()
    return:
      type: System.Collections.Generic.Dictionary{System.Int32,System.String}
    content.vb: Public Shared Function GetAllDocPlugins() As Dictionary(Of Integer, String)
  overload: SuperOffice.CRM.Documents.PhysicalDocument.GetAllDocPlugins*
- uid: SuperOffice.CRM.Documents.PhysicalDocument.DocumentInfo
  commentId: P:SuperOffice.CRM.Documents.PhysicalDocument.DocumentInfo
  id: DocumentInfo
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: DocumentInfo
  nameWithType: PhysicalDocument.DocumentInfo
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.DocumentInfo
  type: Property
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Document Info object - created by this class from documentId if needed
  example: []
  syntax:
    content: public IDocumentInfo DocumentInfo { get; }
    parameters: []
    return:
      type: SuperOffice.CRM.IDocumentInfo
    content.vb: Public ReadOnly Property DocumentInfo As IDocumentInfo
  overload: SuperOffice.CRM.Documents.PhysicalDocument.DocumentInfo*
- uid: SuperOffice.CRM.Documents.PhysicalDocument.DocumentId
  commentId: P:SuperOffice.CRM.Documents.PhysicalDocument.DocumentId
  id: DocumentId
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: DocumentId
  nameWithType: PhysicalDocument.DocumentId
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.DocumentId
  type: Property
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: ID of document row this physical document is related to
  example: []
  syntax:
    content: public int DocumentId { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property DocumentId As Integer
  overload: SuperOffice.CRM.Documents.PhysicalDocument.DocumentId*
- uid: SuperOffice.CRM.Documents.PhysicalDocument.ExternalReference
  commentId: P:SuperOffice.CRM.Documents.PhysicalDocument.ExternalReference
  id: ExternalReference
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: ExternalReference
  nameWithType: PhysicalDocument.ExternalReference
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.ExternalReference
  type: Property
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: External reference for this document
  example: []
  syntax:
    content: public string ExternalReference { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ExternalReference As String
  overload: SuperOffice.CRM.Documents.PhysicalDocument.ExternalReference*
- uid: SuperOffice.CRM.Documents.PhysicalDocument.ArchiveProvider
  commentId: P:SuperOffice.CRM.Documents.PhysicalDocument.ArchiveProvider
  id: ArchiveProvider
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: ArchiveProvider
  nameWithType: PhysicalDocument.ArchiveProvider
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.ArchiveProvider
  type: Property
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: The numeric plugin ID of the plugin responsible for this physical document
  example: []
  syntax:
    content: public int ArchiveProvider { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ArchiveProvider As Integer
  overload: SuperOffice.CRM.Documents.PhysicalDocument.ArchiveProvider*
- uid: SuperOffice.CRM.Documents.PhysicalDocument.Length
  commentId: P:SuperOffice.CRM.Documents.PhysicalDocument.Length
  id: Length
  parent: SuperOffice.CRM.Documents.PhysicalDocument
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: PhysicalDocument.Length
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.Length
  type: Property
  assemblies:
  - SoDataBase
  namespace: SuperOffice.CRM.Documents
  summary: Length (in bytes) of the document.
  example: []
  syntax:
    content: public long Length { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property Length As Long
  overload: SuperOffice.CRM.Documents.PhysicalDocument.Length*
  implements:
  - SuperOffice.IO.IStreamProvider.Length
references:
- uid: SuperOffice.CRM.Documents
  commentId: N:SuperOffice.CRM.Documents
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.CRM.Documents
  nameWithType: SuperOffice.CRM.Documents
  fullName: SuperOffice.CRM.Documents
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Documents
    name: Documents
    isExternal: true
    href: SuperOffice.CRM.Documents.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Documents
    name: Documents
    isExternal: true
    href: SuperOffice.CRM.Documents.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: SuperOffice.IO.IStreamProvider
  commentId: T:SuperOffice.IO.IStreamProvider
  parent: SuperOffice.IO
  isExternal: true
  href: SuperOffice.IO.IStreamProvider.html
  name: IStreamProvider
  nameWithType: IStreamProvider
  fullName: SuperOffice.IO.IStreamProvider
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<PhysicalDocument, To>(PhysicalDocument)
  nameWithType: EnumUtil.MapEnums<PhysicalDocument, To>(PhysicalDocument)
  fullName: EnumUtil.MapEnums<SuperOffice.CRM.Documents.PhysicalDocument, To>(SuperOffice.CRM.Documents.PhysicalDocument)
  nameWithType.vb: EnumUtil.MapEnums(Of PhysicalDocument, To)(PhysicalDocument)
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.CRM.Documents.PhysicalDocument, To)(SuperOffice.CRM.Documents.PhysicalDocument)
  name.vb: MapEnums(Of PhysicalDocument, To)(PhysicalDocument)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(SuperOffice.CRM.Documents.PhysicalDocument)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.CRM.Documents.PhysicalDocument
    name: PhysicalDocument
    isExternal: true
    href: SuperOffice.CRM.Documents.PhysicalDocument.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.CRM.Documents.PhysicalDocument
    name: PhysicalDocument
    isExternal: true
    href: SuperOffice.CRM.Documents.PhysicalDocument.html
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(SuperOffice.CRM.Documents.PhysicalDocument)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Documents.PhysicalDocument
    name: PhysicalDocument
    isExternal: true
    href: SuperOffice.CRM.Documents.PhysicalDocument.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.CRM.Documents.PhysicalDocument
    name: PhysicalDocument
    isExternal: true
    href: SuperOffice.CRM.Documents.PhysicalDocument.html
  - name: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<PhysicalDocument, To>(PhysicalDocument)
  nameWithType: Converters.MapEnums<PhysicalDocument, To>(PhysicalDocument)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.CRM.Documents.PhysicalDocument, To>(SuperOffice.CRM.Documents.PhysicalDocument)
  nameWithType.vb: Converters.MapEnums(Of PhysicalDocument, To)(PhysicalDocument)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.CRM.Documents.PhysicalDocument, To)(SuperOffice.CRM.Documents.PhysicalDocument)
  name.vb: MapEnums(Of PhysicalDocument, To)(PhysicalDocument)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.CRM.Documents.PhysicalDocument)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - uid: SuperOffice.CRM.Documents.PhysicalDocument
    name: PhysicalDocument
    isExternal: true
    href: SuperOffice.CRM.Documents.PhysicalDocument.html
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - uid: SuperOffice.CRM.Documents.PhysicalDocument
    name: PhysicalDocument
    isExternal: true
    href: SuperOffice.CRM.Documents.PhysicalDocument.html
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(SuperOffice.CRM.Documents.PhysicalDocument)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - uid: SuperOffice.CRM.Documents.PhysicalDocument
    name: PhysicalDocument
    isExternal: true
    href: SuperOffice.CRM.Documents.PhysicalDocument.html
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - uid: SuperOffice.CRM.Documents.PhysicalDocument
    name: PhysicalDocument
    isExternal: true
    href: SuperOffice.CRM.Documents.PhysicalDocument.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.IO
  commentId: N:SuperOffice.IO
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.IO
  nameWithType: SuperOffice.IO
  fullName: SuperOffice.IO
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.IO
    name: IO
    isExternal: true
    href: SuperOffice.IO.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.IO
    name: IO
    isExternal: true
    href: SuperOffice.IO.html
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: EnumUtil.html#EnumUtil_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  href: EnumUtil.html
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: <
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: '>'
  - name: (
  - name: From
  - name: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.Converters.html#SuperOffice_ErpSync_ConnectorWS_Converters_MapEnums__2___0_
  - name: (
  - name: Of
  - name: " "
  - name: From
  - name: ','
  - name: " "
  - name: To
  - name: )
  - name: (
  - name: From
  - name: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.ErpSync.ConnectorWS.Converters.html
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.ErpSync
    name: ErpSync
    isExternal: true
    href: SuperOffice.ErpSync.html
  - name: .
  - uid: SuperOffice.ErpSync.ConnectorWS
    name: ConnectorWS
    isExternal: true
    href: SuperOffice.ErpSync.ConnectorWS.html
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocument*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDocument
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetDocument_System_Int32_
  name: GetDocument
  nameWithType: PhysicalDocument.GetDocument
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocument
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: SuperOffice.CRM.Documents.PhysicalDocument
  commentId: T:SuperOffice.CRM.Documents.PhysicalDocument
  parent: SuperOffice.CRM.Documents
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html
  name: PhysicalDocument
  nameWithType: PhysicalDocument
  fullName: SuperOffice.CRM.Documents.PhysicalDocument
- uid: SuperOffice.CRM.IDocumentInfo
  commentId: T:SuperOffice.CRM.IDocumentInfo
  parent: SuperOffice.CRM
  isExternal: true
  href: SuperOffice.CRM.IDocumentInfo.html
  name: IDocumentInfo
  nameWithType: IDocumentInfo
  fullName: SuperOffice.CRM.IDocumentInfo
- uid: SuperOffice.CRM
  commentId: N:SuperOffice.CRM
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.CRM
  nameWithType: SuperOffice.CRM
  fullName: SuperOffice.CRM
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmpty*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmpty
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_CreateNewEmpty_SuperOffice_CRM_IDocumentInfo_System_String__System_String___System_String_System_String___
  name: CreateNewEmpty
  nameWithType: PhysicalDocument.CreateNewEmpty
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmpty
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRef*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRef
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_CreateNewEmptyByRef_SuperOffice_CRM_IDocumentInfo__System_String__System_String___System_String_System_String___
  name: CreateNewEmptyByRef
  nameWithType: PhysicalDocument.CreateNewEmptyByRef
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewEmptyByRef
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplate*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplate
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_CreateNewFromTemplate_SuperOffice_CRM_IDocumentInfo_System_String__System_String___System_String_System_String___System_String_
  name: CreateNewFromTemplate
  nameWithType: PhysicalDocument.CreateNewFromTemplate
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplate
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTags*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTags
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_CreateNewFromTemplateWithTags_SuperOffice_CRM_IDocumentInfo_System_String__System_String___System_String_System_String___SuperOffice_IO_TagContainer_System_String_
  name: CreateNewFromTemplateWithTags
  nameWithType: PhysicalDocument.CreateNewFromTemplateWithTags
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTags
- uid: SuperOffice.IO.TagContainer
  commentId: T:SuperOffice.IO.TagContainer
  parent: SuperOffice.IO
  isExternal: true
  href: SuperOffice.IO.TagContainer.html
  name: TagContainer
  nameWithType: TagContainer
  fullName: SuperOffice.IO.TagContainer
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SuggestFilename*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.SuggestFilename
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_SuggestFilename
  name: SuggestFilename
  nameWithType: PhysicalDocument.SuggestFilename
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SuggestFilename
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStream*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStream
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_SaveDocumentFromStream_SuperOffice_CRM_IDocumentInfo_System_String___System_IO_Stream_
  name: SaveDocumentFromStream
  nameWithType: PhysicalDocument.SaveDocumentFromStream
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentFromStream
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.stream
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: SuperOffice.CRM.ReturnInfo
  commentId: T:SuperOffice.CRM.ReturnInfo
  parent: SuperOffice.CRM
  isExternal: true
  href: SuperOffice.CRM.ReturnInfo.html
  name: ReturnInfo
  nameWithType: ReturnInfo
  fullName: SuperOffice.CRM.ReturnInfo
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_LoadDocumentStream_SuperOffice_CRM_IDocumentInfo_System_String_
  name: LoadDocumentStream
  nameWithType: PhysicalDocument.LoadDocumentStream
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentStream
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCode*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCode
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetDatabaseLanguageCode
  name: GetDatabaseLanguageCode
  nameWithType: PhysicalDocument.GetDatabaseLanguageCode
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCode
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCulture*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCulture
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetDatabaseLanguageCulture
  name: GetDatabaseLanguageCulture
  nameWithType: PhysicalDocument.GetDatabaseLanguageCulture
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDatabaseLanguageCulture
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.globalization.cultureinfo
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Globalization
    name: Globalization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Globalization
    name: Globalization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization
- uid: SuperOffice.Exceptions.SoIllegalOperationException
  commentId: T:SuperOffice.Exceptions.SoIllegalOperationException
  isExternal: true
  href: SuperOffice.Exceptions.SoIllegalOperationException.html
  name: SoIllegalOperationException
  nameWithType: SoIllegalOperationException
  fullName: SuperOffice.Exceptions.SoIllegalOperationException
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateLanguages*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateLanguages
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetTemplateLanguages_SuperOffice_CRM_IDocumentTemplateInfo_
  name: GetTemplateLanguages
  nameWithType: PhysicalDocument.GetTemplateLanguages
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateLanguages
- uid: SuperOffice.CRM.IDocumentTemplateInfo
  commentId: T:SuperOffice.CRM.IDocumentTemplateInfo
  parent: SuperOffice.CRM
  isExternal: true
  href: SuperOffice.CRM.IDocumentTemplateInfo.html
  name: IDocumentTemplateInfo
  nameWithType: IDocumentTemplateInfo
  fullName: SuperOffice.CRM.IDocumentTemplateInfo
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetDocumentUrl
  name: GetDocumentUrl
  nameWithType: PhysicalDocument.GetDocumentUrl
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentUrl
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocument*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocument
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_DeleteDocument_System_String___
  name: DeleteDocument
  nameWithType: PhysicalDocument.DeleteDocument
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocument
- uid: SuperOffice.CRM.Documents.PhysicalDocument.RenameDocument*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.RenameDocument
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_RenameDocument_System_String_
  name: RenameDocument
  nameWithType: PhysicalDocument.RenameDocument
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.RenameDocument
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentIdFromPath*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentIdFromPath
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetDocumentIdFromPath_System_String_
  name: GetDocumentIdFromPath
  nameWithType: PhysicalDocument.GetDocumentIdFromPath
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentIdFromPath
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetPluginCapabilities*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetPluginCapabilities
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetPluginCapabilities_System_Int32_
  name: GetPluginCapabilities
  nameWithType: PhysicalDocument.GetPluginCapabilities
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetPluginCapabilities
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, string>
  nameWithType: Dictionary<string, string>
  fullName: System.Collections.Generic.Dictionary<string, string>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of String, String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_LoadDocumentTemplateStream_System_Int32_System_String_
  name: LoadDocumentTemplateStream
  nameWithType: PhysicalDocument.LoadDocumentTemplateStream
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadDocumentTemplateStream
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsStream*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsStream
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_CreateNewFromTemplateWithTagsAsStream_System_Int32_System_String_SuperOffice_IO_TagContainer_
  name: CreateNewFromTemplateWithTagsAsStream
  nameWithType: PhysicalDocument.CreateNewFromTemplateWithTagsAsStream
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateNewFromTemplateWithTagsAsStream
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentTemplateStream*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentTemplateStream
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_SaveDocumentTemplateStream_System_Int32_System_IO_Stream_System_String_System_Int32_System_String_
  name: SaveDocumentTemplateStream
  nameWithType: PhysicalDocument.SaveDocumentTemplateStream
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SaveDocumentTemplateStream
- uid: SuperOffice.CRM.Documents.TemplateInfo
  commentId: T:SuperOffice.CRM.Documents.TemplateInfo
  parent: SuperOffice.CRM.Documents
  isExternal: true
  href: SuperOffice.CRM.Documents.TemplateInfo.html
  name: TemplateInfo
  nameWithType: TemplateInfo
  fullName: SuperOffice.CRM.Documents.TemplateInfo
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateExtension*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateExtension
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetTemplateExtension_System_Int32_
  name: GetTemplateExtension
  nameWithType: PhysicalDocument.GetTemplateExtension
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateExtension
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateId*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateId
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetTemplateId_System_String_
  name: GetTemplateId
  nameWithType: PhysicalDocument.GetTemplateId
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetTemplateId
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTypesForDocumentTemplates*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTypesForDocumentTemplates
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetDocumentTypesForDocumentTemplates_System_Int32_
  name: GetDocumentTypesForDocumentTemplates
  nameWithType: PhysicalDocument.GetDocumentTypesForDocumentTemplates
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTypesForDocumentTemplates
- uid: System.Collections.Generic.Dictionary{System.Int32,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.Int32,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<int, string>
  nameWithType: Dictionary<int, string>
  fullName: System.Collections.Generic.Dictionary<int, string>
  nameWithType.vb: Dictionary(Of Integer, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of Integer, String)
  name.vb: Dictionary(Of Integer, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplate*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplate
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_CreateDefaultDocumentTemplate_System_Int32_System_Int32_
  name: CreateDefaultDocumentTemplate
  nameWithType: PhysicalDocument.CreateDefaultDocumentTemplate
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplate
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateProperties*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateProperties
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetDocumentTemplateProperties_System_Int32_System_String___
  name: GetDocumentTemplateProperties
  nameWithType: PhysicalDocument.GetDocumentTemplateProperties
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateProperties
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateUrl*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateUrl
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetDocumentTemplateUrl_System_Int32_System_Boolean_System_String_
  name: GetDocumentTemplateUrl
  nameWithType: PhysicalDocument.GetDocumentTemplateUrl
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentTemplateUrl
- uid: SuperOffice.CRM.Documents.Constants.Properties
  commentId: T:SuperOffice.CRM.Documents.Constants.Properties
  isExternal: true
  href: SuperOffice.CRM.Documents.Constants.html
  name: Constants.Properties
  nameWithType: Constants.Properties
  fullName: SuperOffice.CRM.Documents.Constants.Properties
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.Constants
    name: Constants
    isExternal: true
    href: SuperOffice.CRM.Documents.Constants.html
  - name: .
  - uid: SuperOffice.CRM.Documents.Constants.Properties
    name: Properties
    isExternal: true
    href: SuperOffice.CRM.Documents.Constants.Properties.html
  spec.vb:
  - uid: SuperOffice.CRM.Documents.Constants
    name: Constants
    isExternal: true
    href: SuperOffice.CRM.Documents.Constants.html
  - name: .
  - uid: SuperOffice.CRM.Documents.Constants.Properties
    name: Properties
    isExternal: true
    href: SuperOffice.CRM.Documents.Constants.Properties.html
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_LoadMetaData
  name: LoadMetaData()
  nameWithType: PhysicalDocument.LoadMetaData()
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData()
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData
    name: LoadMetaData
    isExternal: true
    href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_LoadMetaData
  - name: (
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData
    name: LoadMetaData
    isExternal: true
    href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_LoadMetaData
  - name: (
  - name: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(System.String[])
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_SaveMetaData_System_String___
  name: SaveMetaData(string[])
  nameWithType: PhysicalDocument.SaveMetaData(string[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(string[])
  nameWithType.vb: PhysicalDocument.SaveMetaData(String())
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(String())
  name.vb: SaveMetaData(String())
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(System.String[])
    name: SaveMetaData
    isExternal: true
    href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_SaveMetaData_System_String___
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData(System.String[])
    name: SaveMetaData
    isExternal: true
    href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_SaveMetaData_System_String___
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentProperties*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentProperties
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetDocumentProperties_System_String___
  name: GetDocumentProperties
  nameWithType: PhysicalDocument.GetDocumentProperties
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentProperties
- uid: SuperOffice.CRM.Documents.CommandInfo
  commentId: T:SuperOffice.CRM.Documents.CommandInfo
  isExternal: true
  href: SuperOffice.CRM.Documents.CommandInfo.html
  name: CommandInfo
  nameWithType: CommandInfo
  fullName: SuperOffice.CRM.Documents.CommandInfo
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetDocumentCommands_System_String___
  name: GetDocumentCommands
  nameWithType: PhysicalDocument.GetDocumentCommands
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands
- uid: SuperOffice.CRM.Documents.CommandInfo[]
  isExternal: true
  href: SuperOffice.CRM.Documents.CommandInfo.html
  name: CommandInfo[]
  nameWithType: CommandInfo[]
  fullName: SuperOffice.CRM.Documents.CommandInfo[]
  nameWithType.vb: CommandInfo()
  fullName.vb: SuperOffice.CRM.Documents.CommandInfo()
  name.vb: CommandInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.CommandInfo
    name: CommandInfo
    isExternal: true
    href: SuperOffice.CRM.Documents.CommandInfo.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.CRM.Documents.CommandInfo
    name: CommandInfo
    isExternal: true
    href: SuperOffice.CRM.Documents.CommandInfo.html
  - name: (
  - name: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(System.String[])
  commentId: M:SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(System.String[])
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetDocumentCommands_System_String___
  name: GetDocumentCommands(params string[])
  nameWithType: PhysicalDocument.GetDocumentCommands(params string[])
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(params string[])
  nameWithType.vb: PhysicalDocument.GetDocumentCommands(ParamArray String())
  fullName.vb: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(ParamArray String())
  name.vb: GetDocumentCommands(ParamArray String())
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(System.String[])
    name: GetDocumentCommands
    isExternal: true
    href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetDocumentCommands_System_String___
  - name: (
  - name: params
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDocumentCommands(System.String[])
    name: GetDocumentCommands
    isExternal: true
    href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetDocumentCommands_System_String___
  - name: (
  - name: ParamArray
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
  - name: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_ExecuteDocumentCommand_System_String_System_String___System_String_System_String___
  name: ExecuteDocumentCommand
  nameWithType: PhysicalDocument.ExecuteDocumentCommand
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.ExecuteDocumentCommand
- uid: SuperOffice.CRM.Globalization.CultureDataFormatter
  commentId: T:SuperOffice.CRM.Globalization.CultureDataFormatter
  isExternal: true
  href: SuperOffice.CRM.Globalization.CultureDataFormatter.html
  name: CultureDataFormatter
  nameWithType: CultureDataFormatter
  fullName: SuperOffice.CRM.Globalization.CultureDataFormatter
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_LoadMetaData
  name: LoadMetaData
  nameWithType: PhysicalDocument.LoadMetaData
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadMetaData
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetVersionList_SuperOffice_CRM_IDocumentInfo_
  name: GetVersionList(IDocumentInfo)
  nameWithType: IDocumentPlugin2.GetVersionList(IDocumentInfo)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
    name: GetVersionList
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetVersionList_SuperOffice_CRM_IDocumentInfo_
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.GetVersionList(SuperOffice.CRM.IDocumentInfo)
    name: GetVersionList
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_GetVersionList_SuperOffice_CRM_IDocumentInfo_
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.LoadVersionInfo*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.LoadVersionInfo
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_LoadVersionInfo_System_String_
  name: LoadVersionInfo
  nameWithType: PhysicalDocument.LoadVersionInfo
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.LoadVersionInfo
- uid: SuperOffice.CRM.Documents.VersionInfo
  commentId: T:SuperOffice.CRM.Documents.VersionInfo
  parent: SuperOffice.CRM.Documents
  isExternal: true
  href: SuperOffice.CRM.Documents.VersionInfo.html
  name: VersionInfo
  nameWithType: VersionInfo
  fullName: SuperOffice.CRM.Documents.VersionInfo
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2
  commentId: T:SuperOffice.CRM.Documents.IDocumentPlugin2
  parent: SuperOffice.CRM.Documents
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html
  name: IDocumentPlugin2
  nameWithType: IDocumentPlugin2
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2
- uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  commentId: M:SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  parent: SuperOffice.CRM.Documents.IDocumentPlugin2
  isExternal: true
  href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_LoadMetaData_SuperOffice_CRM_IDocumentInfo_
  name: LoadMetaData(IDocumentInfo)
  nameWithType: IDocumentPlugin2.LoadMetaData(IDocumentInfo)
  fullName: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
    name: LoadMetaData
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_LoadMetaData_SuperOffice_CRM_IDocumentInfo_
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: )
  spec.vb:
  - uid: SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData(SuperOffice.CRM.IDocumentInfo)
    name: LoadMetaData
    isExternal: true
    href: SuperOffice.CRM.Documents.IDocumentPlugin2.html#SuperOffice_CRM_Documents_IDocumentPlugin2_LoadMetaData_SuperOffice_CRM_IDocumentInfo_
  - name: (
  - uid: SuperOffice.CRM.IDocumentInfo
    name: IDocumentInfo
    isExternal: true
    href: SuperOffice.CRM.IDocumentInfo.html
  - name: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_SaveMetaData_System_String___
  name: SaveMetaData
  nameWithType: PhysicalDocument.SaveMetaData
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SaveMetaData
- uid: SuperOffice.CRM.Documents.PhysicalDocument.Exists*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.Exists
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_Exists
  name: Exists
  nameWithType: PhysicalDocument.Exists
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.Exists
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetLength*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetLength
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetLength_System_String_
  name: GetLength
  nameWithType: PhysicalDocument.GetLength
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetLength
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetCheckoutState*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetCheckoutState
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetCheckoutState
  name: GetCheckoutState
  nameWithType: PhysicalDocument.GetCheckoutState
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetCheckoutState
- uid: SuperOffice.CRM.Documents.CheckoutInfo
  commentId: T:SuperOffice.CRM.Documents.CheckoutInfo
  parent: SuperOffice.CRM.Documents
  isExternal: true
  href: SuperOffice.CRM.Documents.CheckoutInfo.html
  name: CheckoutInfo
  nameWithType: CheckoutInfo
  fullName: SuperOffice.CRM.Documents.CheckoutInfo
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocument*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocument
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_CheckoutDocument_System_String___
  name: CheckoutDocument
  nameWithType: PhysicalDocument.CheckoutDocument
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CheckoutDocument
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocument*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocument
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_CheckinDocument_System_String___System_String_System_String___
  name: CheckinDocument
  nameWithType: PhysicalDocument.CheckinDocument
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CheckinDocument
- uid: SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocument*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocument
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_UndoCheckoutDocument_System_String___
  name: UndoCheckoutDocument
  nameWithType: PhysicalDocument.UndoCheckoutDocument
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.UndoCheckoutDocument
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetVersionList*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetVersionList
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetVersionList
  name: GetVersionList
  nameWithType: PhysicalDocument.GetVersionList
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetVersionList
- uid: SuperOffice.CRM.Documents.VersionInfo[]
  isExternal: true
  href: SuperOffice.CRM.Documents.VersionInfo.html
  name: VersionInfo[]
  nameWithType: VersionInfo[]
  fullName: SuperOffice.CRM.Documents.VersionInfo[]
  nameWithType.vb: VersionInfo()
  fullName.vb: SuperOffice.CRM.Documents.VersionInfo()
  name.vb: VersionInfo()
  spec.csharp:
  - uid: SuperOffice.CRM.Documents.VersionInfo
    name: VersionInfo
    isExternal: true
    href: SuperOffice.CRM.Documents.VersionInfo.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.CRM.Documents.VersionInfo
    name: VersionInfo
    isExternal: true
    href: SuperOffice.CRM.Documents.VersionInfo.html
  - name: (
  - name: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetPlugin*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetPlugin
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetPlugin_System_Int32_
  name: GetPlugin
  nameWithType: PhysicalDocument.GetPlugin
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetPlugin
- uid: SuperOffice.IO.IStreamProvider.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  commentId: M:SuperOffice.IO.IStreamProvider.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: SuperOffice.IO.IStreamProvider
  isExternal: true
  href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_Write_System_Int64_System_Byte___System_Int32_System_Int32_
  name: Write(long, byte[], int, int)
  nameWithType: IStreamProvider.Write(long, byte[], int, int)
  fullName: SuperOffice.IO.IStreamProvider.Write(long, byte[], int, int)
  nameWithType.vb: IStreamProvider.Write(Long, Byte(), Integer, Integer)
  fullName.vb: SuperOffice.IO.IStreamProvider.Write(Long, Byte(), Integer, Integer)
  name.vb: Write(Long, Byte(), Integer, Integer)
  spec.csharp:
  - uid: SuperOffice.IO.IStreamProvider.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
    name: Write
    isExternal: true
    href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_Write_System_Int64_System_Byte___System_Int32_System_Int32_
  - name: (
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.IStreamProvider.Write(System.Int64,System.Byte[],System.Int32,System.Int32)
    name: Write
    isExternal: true
    href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_Write_System_Int64_System_Byte___System_Int32_System_Int32_
  - name: (
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: SuperOffice.IO.IStreamProvider.EndWrite
  commentId: M:SuperOffice.IO.IStreamProvider.EndWrite
  parent: SuperOffice.IO.IStreamProvider
  isExternal: true
  href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_EndWrite
  name: EndWrite()
  nameWithType: IStreamProvider.EndWrite()
  fullName: SuperOffice.IO.IStreamProvider.EndWrite()
  spec.csharp:
  - uid: SuperOffice.IO.IStreamProvider.EndWrite
    name: EndWrite
    isExternal: true
    href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_EndWrite
  - name: (
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.IStreamProvider.EndWrite
    name: EndWrite
    isExternal: true
    href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_EndWrite
  - name: (
  - name: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.BeginWrite*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.BeginWrite
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_BeginWrite
  name: BeginWrite
  nameWithType: PhysicalDocument.BeginWrite
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.BeginWrite
- uid: SuperOffice.IO.IStreamProvider.BeginWrite
  commentId: M:SuperOffice.IO.IStreamProvider.BeginWrite
  parent: SuperOffice.IO.IStreamProvider
  isExternal: true
  href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_BeginWrite
  name: BeginWrite()
  nameWithType: IStreamProvider.BeginWrite()
  fullName: SuperOffice.IO.IStreamProvider.BeginWrite()
  spec.csharp:
  - uid: SuperOffice.IO.IStreamProvider.BeginWrite
    name: BeginWrite
    isExternal: true
    href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_BeginWrite
  - name: (
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.IStreamProvider.BeginWrite
    name: BeginWrite
    isExternal: true
    href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_BeginWrite
  - name: (
  - name: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.Write*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.Write
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_Write_System_Int64_System_Byte___System_Int32_System_Int32_
  name: Write
  nameWithType: PhysicalDocument.Write
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.Write
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.EndWrite*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.EndWrite
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_EndWrite
  name: EndWrite
  nameWithType: PhysicalDocument.EndWrite
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.EndWrite
- uid: SuperOffice.IO.IStreamProvider.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  commentId: M:SuperOffice.IO.IStreamProvider.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: SuperOffice.IO.IStreamProvider
  isExternal: true
  href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_Read_System_Int64_System_Byte___System_Int32_System_Int32_
  name: Read(long, byte[], int, int)
  nameWithType: IStreamProvider.Read(long, byte[], int, int)
  fullName: SuperOffice.IO.IStreamProvider.Read(long, byte[], int, int)
  nameWithType.vb: IStreamProvider.Read(Long, Byte(), Integer, Integer)
  fullName.vb: SuperOffice.IO.IStreamProvider.Read(Long, Byte(), Integer, Integer)
  name.vb: Read(Long, Byte(), Integer, Integer)
  spec.csharp:
  - uid: SuperOffice.IO.IStreamProvider.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
    name: Read
    isExternal: true
    href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_Read_System_Int64_System_Byte___System_Int32_System_Int32_
  - name: (
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.IStreamProvider.Read(System.Int64,System.Byte[],System.Int32,System.Int32)
    name: Read
    isExternal: true
    href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_Read_System_Int64_System_Byte___System_Int32_System_Int32_
  - name: (
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: ','
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: SuperOffice.IO.IStreamProvider.EndRead
  commentId: M:SuperOffice.IO.IStreamProvider.EndRead
  parent: SuperOffice.IO.IStreamProvider
  isExternal: true
  href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_EndRead
  name: EndRead()
  nameWithType: IStreamProvider.EndRead()
  fullName: SuperOffice.IO.IStreamProvider.EndRead()
  spec.csharp:
  - uid: SuperOffice.IO.IStreamProvider.EndRead
    name: EndRead
    isExternal: true
    href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_EndRead
  - name: (
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.IStreamProvider.EndRead
    name: EndRead
    isExternal: true
    href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_EndRead
  - name: (
  - name: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.BeginRead*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.BeginRead
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_BeginRead
  name: BeginRead
  nameWithType: PhysicalDocument.BeginRead
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.BeginRead
- uid: SuperOffice.IO.IStreamProvider.BeginRead
  commentId: M:SuperOffice.IO.IStreamProvider.BeginRead
  parent: SuperOffice.IO.IStreamProvider
  isExternal: true
  href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_BeginRead
  name: BeginRead()
  nameWithType: IStreamProvider.BeginRead()
  fullName: SuperOffice.IO.IStreamProvider.BeginRead()
  spec.csharp:
  - uid: SuperOffice.IO.IStreamProvider.BeginRead
    name: BeginRead
    isExternal: true
    href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_BeginRead
  - name: (
  - name: )
  spec.vb:
  - uid: SuperOffice.IO.IStreamProvider.BeginRead
    name: BeginRead
    isExternal: true
    href: SuperOffice.IO.IStreamProvider.html#SuperOffice_IO_IStreamProvider_BeginRead
  - name: (
  - name: )
- uid: SuperOffice.CRM.Documents.PhysicalDocument.Read*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.Read
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_Read_System_Int64_System_Byte___System_Int32_System_Int32_
  name: Read
  nameWithType: PhysicalDocument.Read
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.Read
- uid: SuperOffice.CRM.Documents.PhysicalDocument.EndRead*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.EndRead
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_EndRead
  name: EndRead
  nameWithType: PhysicalDocument.EndRead
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.EndRead
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateLanguage*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateLanguage
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_CreateDefaultDocumentTemplateLanguage_SuperOffice_CRM_IDocumentTemplateInfo_System_String_
  name: CreateDefaultDocumentTemplateLanguage
  nameWithType: PhysicalDocument.CreateDefaultDocumentTemplateLanguage
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateDefaultDocumentTemplateLanguage
- uid: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentTemplateLanguage*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentTemplateLanguage
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_DeleteDocumentTemplateLanguage_SuperOffice_CRM_IDocumentTemplateInfo_System_String_
  name: DeleteDocumentTemplateLanguage
  nameWithType: PhysicalDocument.DeleteDocumentTemplateLanguage
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.DeleteDocumentTemplateLanguage
- uid: SuperOffice.CRM.Documents.PhysicalDocument.SetDocumentTemplateFromDocumentTemplate*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.SetDocumentTemplateFromDocumentTemplate
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_SetDocumentTemplateFromDocumentTemplate_SuperOffice_CRM_IDocumentTemplateInfo_SuperOffice_CRM_IDocumentTemplateInfo_
  name: SetDocumentTemplateFromDocumentTemplate
  nameWithType: PhysicalDocument.SetDocumentTemplateFromDocumentTemplate
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.SetDocumentTemplateFromDocumentTemplate
- uid: SuperOffice.CRM.Documents.PhysicalDocument.CreateFilenameForNewTemplate*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.CreateFilenameForNewTemplate
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_CreateFilenameForNewTemplate_SuperOffice_CRM_IDocumentTemplateInfo_System_String_
  name: CreateFilenameForNewTemplate
  nameWithType: PhysicalDocument.CreateFilenameForNewTemplate
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.CreateFilenameForNewTemplate
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetDefaultDocumentPluginId*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetDefaultDocumentPluginId
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetDefaultDocumentPluginId
  name: GetDefaultDocumentPluginId
  nameWithType: PhysicalDocument.GetDefaultDocumentPluginId
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetDefaultDocumentPluginId
- uid: SuperOffice.Plugins.CRM.Documents.IAssociateRename
  commentId: T:SuperOffice.Plugins.CRM.Documents.IAssociateRename
  parent: SuperOffice.Plugins.CRM.Documents
  isExternal: true
  href: SuperOffice.Plugins.CRM.Documents.IAssociateRename.html
  name: IAssociateRename
  nameWithType: IAssociateRename
  fullName: SuperOffice.Plugins.CRM.Documents.IAssociateRename
- uid: SuperOffice.CRM.Documents.PhysicalDocument.AssociateRename*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.AssociateRename
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_AssociateRename_System_String_System_String_
  name: AssociateRename
  nameWithType: PhysicalDocument.AssociateRename
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.AssociateRename
- uid: SuperOffice.Plugins.CRM.Documents
  commentId: N:SuperOffice.Plugins.CRM.Documents
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.Plugins.CRM.Documents
  nameWithType: SuperOffice.Plugins.CRM.Documents
  fullName: SuperOffice.Plugins.CRM.Documents
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Plugins
    name: Plugins
    isExternal: true
    href: SuperOffice.Plugins.html
  - name: .
  - uid: SuperOffice.Plugins.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.Plugins.CRM.html
  - name: .
  - uid: SuperOffice.Plugins.CRM.Documents
    name: Documents
    isExternal: true
    href: SuperOffice.Plugins.CRM.Documents.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.Plugins
    name: Plugins
    isExternal: true
    href: SuperOffice.Plugins.html
  - name: .
  - uid: SuperOffice.Plugins.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.Plugins.CRM.html
  - name: .
  - uid: SuperOffice.Plugins.CRM.Documents
    name: Documents
    isExternal: true
    href: SuperOffice.Plugins.CRM.Documents.html
- uid: SuperOffice.CRM.Documents.PhysicalDocument.IsNameValid*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.IsNameValid
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_IsNameValid_System_String_
  name: IsNameValid
  nameWithType: PhysicalDocument.IsNameValid
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.IsNameValid
- uid: SuperOffice.CRM.Documents.PhysicalDocument.GetAllDocPlugins*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.GetAllDocPlugins
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_GetAllDocPlugins
  name: GetAllDocPlugins
  nameWithType: PhysicalDocument.GetAllDocPlugins
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.GetAllDocPlugins
- uid: SuperOffice.CRM.Documents.PhysicalDocument.DocumentInfo*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.DocumentInfo
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_DocumentInfo
  name: DocumentInfo
  nameWithType: PhysicalDocument.DocumentInfo
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.DocumentInfo
- uid: SuperOffice.CRM.Documents.PhysicalDocument.DocumentId*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.DocumentId
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_DocumentId
  name: DocumentId
  nameWithType: PhysicalDocument.DocumentId
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.DocumentId
- uid: SuperOffice.CRM.Documents.PhysicalDocument.ExternalReference*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.ExternalReference
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_ExternalReference
  name: ExternalReference
  nameWithType: PhysicalDocument.ExternalReference
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.ExternalReference
- uid: SuperOffice.CRM.Documents.PhysicalDocument.ArchiveProvider*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.ArchiveProvider
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_ArchiveProvider
  name: ArchiveProvider
  nameWithType: PhysicalDocument.ArchiveProvider
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.ArchiveProvider
- uid: SuperOffice.CRM.Documents.PhysicalDocument.Length*
  commentId: Overload:SuperOffice.CRM.Documents.PhysicalDocument.Length
  isExternal: true
  href: SuperOffice.CRM.Documents.PhysicalDocument.html#SuperOffice_CRM_Documents_PhysicalDocument_Length
  name: Length
  nameWithType: PhysicalDocument.Length
  fullName: SuperOffice.CRM.Documents.PhysicalDocument.Length
- uid: SuperOffice.IO.IStreamProvider.Length
  commentId: P:SuperOffice.IO.IStreamProvider.Length
  parent: SuperOffice.IO.IStreamProvider
  isExternal: true
  name: Length
  nameWithType: IStreamProvider.Length
  fullName: SuperOffice.IO.IStreamProvider.Length
