### YamlMime:ManagedReference
items:
- uid: SuperOffice.CRM.Services.IContactAgent
  commentId: T:SuperOffice.CRM.Services.IContactAgent
  id: IContactAgent
  parent: SuperOffice.CRM.Services
  children:
  - SuperOffice.CRM.Services.IContactAgent.AddPerson(System.Int32,SuperOffice.CRM.Services.PersonEntity)
  - SuperOffice.CRM.Services.IContactAgent.ChangeCountry(SuperOffice.CRM.Services.ContactEntity,System.Int32)
  - SuperOffice.CRM.Services.IContactAgent.Copy(System.Int32,System.String,System.String,System.Boolean)
  - SuperOffice.CRM.Services.IContactAgent.CreateDefaultContactEntity
  - SuperOffice.CRM.Services.IContactAgent.CreateDefaultPreviewContact
  - SuperOffice.CRM.Services.IContactAgent.CreateNewEntry(SuperOffice.CRM.Services.DuplicateEntry)
  - SuperOffice.CRM.Services.IContactAgent.DeleteContactEntity(System.Int32)
  - SuperOffice.CRM.Services.IContactAgent.DeleteExpired
  - SuperOffice.CRM.Services.IContactAgent.GetAddress(System.Int32)
  - SuperOffice.CRM.Services.IContactAgent.GetAddressByCountry(System.Int32,System.Int32)
  - SuperOffice.CRM.Services.IContactAgent.GetContact(System.Int32)
  - SuperOffice.CRM.Services.IContactAgent.GetContactEntity(System.Int32)
  - SuperOffice.CRM.Services.IContactAgent.GetContactList(System.Int32[])
  - SuperOffice.CRM.Services.IContactAgent.GetContactSummary(System.Int32,System.Int32)
  - SuperOffice.CRM.Services.IContactAgent.GetContactWithPersons(System.Int32)
  - SuperOffice.CRM.Services.IContactAgent.GetDomainDuplicates(System.String)
  - SuperOffice.CRM.Services.IContactAgent.GetDuplicateRules
  - SuperOffice.CRM.Services.IContactAgent.GetDuplicates(System.String)
  - SuperOffice.CRM.Services.IContactAgent.GetMyActiveContacts(System.DateTime,System.Int32[],SuperOffice.CRM.Services.Util.ContactAction)
  - SuperOffice.CRM.Services.IContactAgent.GetMyBizCard
  - SuperOffice.CRM.Services.IContactAgent.GetMyContact
  - SuperOffice.CRM.Services.IContactAgent.GetMyContacts
  - SuperOffice.CRM.Services.IContactAgent.GetMyRecentContacts(SuperOffice.CRM.Services.Util.ContactSourceType)
  - SuperOffice.CRM.Services.IContactAgent.GetNameDepartmentDuplicates(System.String,System.String)
  - SuperOffice.CRM.Services.IContactAgent.GetPersons(System.Int32)
  - SuperOffice.CRM.Services.IContactAgent.GetPreviewContact(System.Int32)
  - SuperOffice.CRM.Services.IContactAgent.GetQuoteVersionAddresses(System.Int32)
  - SuperOffice.CRM.Services.IContactAgent.IsNumberValid(System.Int32,System.String)
  - SuperOffice.CRM.Services.IContactAgent.Merge(System.Int32,System.Int32,System.Boolean,System.Boolean)
  - SuperOffice.CRM.Services.IContactAgent.SaveContactEntity(SuperOffice.CRM.Services.ContactEntity)
  - SuperOffice.CRM.Services.IContactAgent.SaveQuoteVersionAddress(System.Int32,SuperOffice.CRM.Services.Address,SuperOffice.Data.AddressType,System.Int32)
  - SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatus(SuperOffice.CRM.Services.DuplicateRule[])
  - SuperOffice.CRM.Services.IContactAgent.Undelete(System.Int32)
  - SuperOffice.CRM.Services.IContactAgent.ValidateContactEntity(SuperOffice.CRM.Services.ContactEntity)
  langs:
  - csharp
  - vb
  name: IContactAgent
  nameWithType: IContactAgent
  fullName: SuperOffice.CRM.Services.IContactAgent
  type: Interface
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: >-
    Interface for the Contact Agent

    Contact (company) data services.
  example:
  - >-
    <pre><code class="lang-csharp">using SuperOffice;

    using SuperOffice.CRM.Services;


    using (SoSession mySession = SoSession.Authenticate("user", "pass"))

    {
       using (ContactAgent agent = new ContactAgent())
       {
          // call methods on agent here...
       }
    }</code></pre>
  syntax:
    content: >-
      [Agent("Contact Agent", "Interface for the Contact Agent. Contact (company) data services.")]

      public interface IContactAgent : IAgent
    content.vb: >-
      <Agent("Contact Agent", "Interface for the Contact Agent. Contact (company) data services.")>

      Public Interface IContactAgent Inherits IAgent
  attributes:
  - type: SuperOffice.CRM.Services.Reflection.AgentAttribute
    ctor: SuperOffice.CRM.Services.Reflection.AgentAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Contact Agent
    - type: System.String
      value: Interface for the Contact Agent. Contact (company) data services.
- uid: SuperOffice.CRM.Services.IContactAgent.CreateDefaultContactEntity
  commentId: M:SuperOffice.CRM.Services.IContactAgent.CreateDefaultContactEntity
  id: CreateDefaultContactEntity
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultContactEntity()
  nameWithType: IContactAgent.CreateDefaultContactEntity()
  fullName: SuperOffice.CRM.Services.IContactAgent.CreateDefaultContactEntity()
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: >-
    Loading default values into a new ContactEntity.

    NetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance
  example: []
  syntax:
    content: ContactEntity CreateDefaultContactEntity()
    return:
      type: SuperOffice.CRM.Services.ContactEntity
      description: New ContactEntity with default values
    content.vb: Function CreateDefaultContactEntity() As ContactEntity
  overload: SuperOffice.CRM.Services.IContactAgent.CreateDefaultContactEntity*
- uid: SuperOffice.CRM.Services.IContactAgent.SaveContactEntity(SuperOffice.CRM.Services.ContactEntity)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.SaveContactEntity(SuperOffice.CRM.Services.ContactEntity)
  id: SaveContactEntity(SuperOffice.CRM.Services.ContactEntity)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: SaveContactEntity(ContactEntity)
  nameWithType: IContactAgent.SaveContactEntity(ContactEntity)
  fullName: SuperOffice.CRM.Services.IContactAgent.SaveContactEntity(SuperOffice.CRM.Services.ContactEntity)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Updates the existing ContactEntity or creates a new ContactEntity if the id parameter is empty
  example: []
  syntax:
    content: ContactEntity SaveContactEntity(ContactEntity contactEntity)
    parameters:
    - id: contactEntity
      type: SuperOffice.CRM.Services.ContactEntity
      description: The ContactEntity that is saved.
    return:
      type: SuperOffice.CRM.Services.ContactEntity
      description: New or updated ContactEntity
    content.vb: Function SaveContactEntity(contactEntity As ContactEntity) As ContactEntity
  overload: SuperOffice.CRM.Services.IContactAgent.SaveContactEntity*
- uid: SuperOffice.CRM.Services.IContactAgent.DeleteContactEntity(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.DeleteContactEntity(System.Int32)
  id: DeleteContactEntity(System.Int32)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: DeleteContactEntity(int)
  nameWithType: IContactAgent.DeleteContactEntity(int)
  fullName: SuperOffice.CRM.Services.IContactAgent.DeleteContactEntity(int)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Deletes the ContactEntity
  example: []
  syntax:
    content: void DeleteContactEntity(int contactEntityId)
    parameters:
    - id: contactEntityId
      type: System.Int32
      description: The identity of the ContactEntity
    content.vb: Sub DeleteContactEntity(contactEntityId As Integer)
  overload: SuperOffice.CRM.Services.IContactAgent.DeleteContactEntity*
  nameWithType.vb: IContactAgent.DeleteContactEntity(Integer)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.DeleteContactEntity(Integer)
  name.vb: DeleteContactEntity(Integer)
- uid: SuperOffice.CRM.Services.IContactAgent.CreateDefaultPreviewContact
  commentId: M:SuperOffice.CRM.Services.IContactAgent.CreateDefaultPreviewContact
  id: CreateDefaultPreviewContact
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: CreateDefaultPreviewContact()
  nameWithType: IContactAgent.CreateDefaultPreviewContact()
  fullName: SuperOffice.CRM.Services.IContactAgent.CreateDefaultPreviewContact()
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: >-
    Loading default values into a new PreviewContact.

    NetServer calculates default values (e.g. Country) on the entity, which is required when creating/storing a new instance
  example: []
  syntax:
    content: PreviewContact CreateDefaultPreviewContact()
    return:
      type: SuperOffice.CRM.Services.PreviewContact
      description: New PreviewContact with default values
    content.vb: Function CreateDefaultPreviewContact() As PreviewContact
  overload: SuperOffice.CRM.Services.IContactAgent.CreateDefaultPreviewContact*
- uid: SuperOffice.CRM.Services.IContactAgent.GetContact(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetContact(System.Int32)
  id: GetContact(System.Int32)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetContact(int)
  nameWithType: IContactAgent.GetContact(int)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContact(int)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Gets a Contact object.
  example: []
  syntax:
    content: Contact GetContact(int contactId)
    parameters:
    - id: contactId
      type: System.Int32
      description: The identifier of the Contact object
    return:
      type: SuperOffice.CRM.Services.Contact
      description: Contact
    content.vb: Function GetContact(contactId As Integer) As Contact
  overload: SuperOffice.CRM.Services.IContactAgent.GetContact*
  nameWithType.vb: IContactAgent.GetContact(Integer)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.GetContact(Integer)
  name.vb: GetContact(Integer)
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyActiveContacts(System.DateTime,System.Int32[],SuperOffice.CRM.Services.Util.ContactAction)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetMyActiveContacts(System.DateTime,System.Int32[],SuperOffice.CRM.Services.Util.ContactAction)
  id: GetMyActiveContacts(System.DateTime,System.Int32[],SuperOffice.CRM.Services.Util.ContactAction)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetMyActiveContacts(DateTime, int[], ContactAction)
  nameWithType: IContactAgent.GetMyActiveContacts(DateTime, int[], ContactAction)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyActiveContacts(System.DateTime, int[], SuperOffice.CRM.Services.Util.ContactAction)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Returns the contacts where there has been activity since activityStartTime. If activityStartTime is larger than the current date, all contacts with activity since last log-out are returned. The result set can be filtered by category and action type.
  example: []
  syntax:
    content: ContactActivity[] GetMyActiveContacts(DateTime activityStartTime, int[] contactCategories, ContactAction actionType)
    parameters:
    - id: activityStartTime
      type: System.DateTime
      description: The start time of the activities. If the start time is set to a future date; activites since the user last logged out are returned.
    - id: contactCategories
      type: System.Int32[]
      description: Integer array of categories to filter on. If the array is empty contacts from all categories will be selected.
    - id: actionType
      type: SuperOffice.CRM.Services.Util.ContactAction
      description: The type of action that has occured. E.g. updates, deletes, new appointments, etc.
    return:
      type: SuperOffice.CRM.Services.ContactActivity[]
      description: Array of contacts where there have been activity in the period.
    content.vb: Function GetMyActiveContacts(activityStartTime As Date, contactCategories As Integer(), actionType As ContactAction) As ContactActivity()
  overload: SuperOffice.CRM.Services.IContactAgent.GetMyActiveContacts*
  nameWithType.vb: IContactAgent.GetMyActiveContacts(Date, Integer(), ContactAction)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.GetMyActiveContacts(Date, Integer(), SuperOffice.CRM.Services.Util.ContactAction)
  name.vb: GetMyActiveContacts(Date, Integer(), ContactAction)
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactEntity(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetContactEntity(System.Int32)
  id: GetContactEntity(System.Int32)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetContactEntity(int)
  nameWithType: IContactAgent.GetContactEntity(int)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactEntity(int)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Gets a ContactEntity object.
  example: []
  syntax:
    content: ContactEntity GetContactEntity(int contactEntityId)
    parameters:
    - id: contactEntityId
      type: System.Int32
      description: The identifier of the ContactEntity object
    return:
      type: SuperOffice.CRM.Services.ContactEntity
      description: ContactEntity
    content.vb: Function GetContactEntity(contactEntityId As Integer) As ContactEntity
  overload: SuperOffice.CRM.Services.IContactAgent.GetContactEntity*
  nameWithType.vb: IContactAgent.GetContactEntity(Integer)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.GetContactEntity(Integer)
  name.vb: GetContactEntity(Integer)
- uid: SuperOffice.CRM.Services.IContactAgent.Undelete(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.Undelete(System.Int32)
  id: Undelete(System.Int32)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: Undelete(int)
  nameWithType: IContactAgent.Undelete(int)
  fullName: SuperOffice.CRM.Services.IContactAgent.Undelete(int)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: This entity supports Soft Delete. Call this method to Undelete a previously soft-deleted record
  example: []
  syntax:
    content: void Undelete(int id)
    parameters:
    - id: id
      type: System.Int32
      description: The primary key of the entity to undelete
    content.vb: Sub Undelete(id As Integer)
  overload: SuperOffice.CRM.Services.IContactAgent.Undelete*
  nameWithType.vb: IContactAgent.Undelete(Integer)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.Undelete(Integer)
  name.vb: Undelete(Integer)
- uid: SuperOffice.CRM.Services.IContactAgent.GetPersons(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetPersons(System.Int32)
  id: GetPersons(System.Int32)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetPersons(int)
  nameWithType: IContactAgent.GetPersons(int)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetPersons(int)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Returns an array of all the contact persons for the company card.
  example: []
  syntax:
    content: Person[] GetPersons(int contactId)
    parameters:
    - id: contactId
      type: System.Int32
      description: ''
    return:
      type: SuperOffice.CRM.Services.Person[]
      description: Array of Persons
    content.vb: Function GetPersons(contactId As Integer) As Person()
  overload: SuperOffice.CRM.Services.IContactAgent.GetPersons*
  nameWithType.vb: IContactAgent.GetPersons(Integer)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.GetPersons(Integer)
  name.vb: GetPersons(Integer)
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactWithPersons(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetContactWithPersons(System.Int32)
  id: GetContactWithPersons(System.Int32)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetContactWithPersons(int)
  nameWithType: IContactAgent.GetContactWithPersons(int)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactWithPersons(int)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Returns the contact with all the contact persons belonging to the contact
  example: []
  syntax:
    content: ContactEntity GetContactWithPersons(int contactId)
    parameters:
    - id: contactId
      type: System.Int32
      description: The id of the contact.
    return:
      type: SuperOffice.CRM.Services.ContactEntity
      description: ContactEntity with all data and persons.
    content.vb: Function GetContactWithPersons(contactId As Integer) As ContactEntity
  overload: SuperOffice.CRM.Services.IContactAgent.GetContactWithPersons*
  nameWithType.vb: IContactAgent.GetContactWithPersons(Integer)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.GetContactWithPersons(Integer)
  name.vb: GetContactWithPersons(Integer)
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyContact
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetMyContact
  id: GetMyContact
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetMyContact()
  nameWithType: IContactAgent.GetMyContact()
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyContact()
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Gets the contact belonging to the currently logged on user.
  example: []
  syntax:
    content: ContactEntity GetMyContact()
    return:
      type: SuperOffice.CRM.Services.ContactEntity
      description: The Contact
    content.vb: Function GetMyContact() As ContactEntity
  overload: SuperOffice.CRM.Services.IContactAgent.GetMyContact*
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyBizCard
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetMyBizCard
  id: GetMyBizCard
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetMyBizCard()
  nameWithType: IContactAgent.GetMyBizCard()
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyBizCard()
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Returns all data needed to display the logged on person's business card. That is company, person, and company interest data.
  example: []
  syntax:
    content: ContactEntity GetMyBizCard()
    return:
      type: SuperOffice.CRM.Services.ContactEntity
      description: The contact object with persons and interests
    content.vb: Function GetMyBizCard() As ContactEntity
  overload: SuperOffice.CRM.Services.IContactAgent.GetMyBizCard*
- uid: SuperOffice.CRM.Services.IContactAgent.ChangeCountry(SuperOffice.CRM.Services.ContactEntity,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.ChangeCountry(SuperOffice.CRM.Services.ContactEntity,System.Int32)
  id: ChangeCountry(SuperOffice.CRM.Services.ContactEntity,System.Int32)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: ChangeCountry(ContactEntity, int)
  nameWithType: IContactAgent.ChangeCountry(ContactEntity, int)
  fullName: SuperOffice.CRM.Services.IContactAgent.ChangeCountry(SuperOffice.CRM.Services.ContactEntity, int)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Change country regenerates the default values and localized information such as phone number and address format
  example: []
  syntax:
    content: ContactEntity ChangeCountry(ContactEntity contactEntity, int toCountryId)
    parameters:
    - id: contactEntity
      type: SuperOffice.CRM.Services.ContactEntity
      description: ''
    - id: toCountryId
      type: System.Int32
      description: The country to switch to
    return:
      type: SuperOffice.CRM.Services.ContactEntity
      description: ''
    content.vb: Function ChangeCountry(contactEntity As ContactEntity, toCountryId As Integer) As ContactEntity
  overload: SuperOffice.CRM.Services.IContactAgent.ChangeCountry*
  nameWithType.vb: IContactAgent.ChangeCountry(ContactEntity, Integer)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.ChangeCountry(SuperOffice.CRM.Services.ContactEntity, Integer)
  name.vb: ChangeCountry(ContactEntity, Integer)
- uid: SuperOffice.CRM.Services.IContactAgent.GetAddress(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetAddress(System.Int32)
  id: GetAddress(System.Int32)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetAddress(int)
  nameWithType: IContactAgent.GetAddress(int)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetAddress(int)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Gets the contact's localized address.
  example: []
  syntax:
    content: Address GetAddress(int contactId)
    parameters:
    - id: contactId
      type: System.Int32
      description: The contact id
    return:
      type: SuperOffice.CRM.Services.Address
      description: The address as LocalizedField[][].
    content.vb: Function GetAddress(contactId As Integer) As Address
  overload: SuperOffice.CRM.Services.IContactAgent.GetAddress*
  nameWithType.vb: IContactAgent.GetAddress(Integer)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.GetAddress(Integer)
  name.vb: GetAddress(Integer)
- uid: SuperOffice.CRM.Services.IContactAgent.GetAddressByCountry(System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetAddressByCountry(System.Int32,System.Int32)
  id: GetAddressByCountry(System.Int32,System.Int32)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetAddressByCountry(int, int)
  nameWithType: IContactAgent.GetAddressByCountry(int, int)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetAddressByCountry(int, int)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Gets the contact's localized address.
  example: []
  syntax:
    content: Address GetAddressByCountry(int contactId, int countryId)
    parameters:
    - id: contactId
      type: System.Int32
      description: The contact id
    - id: countryId
      type: System.Int32
      description: ''
    return:
      type: SuperOffice.CRM.Services.Address
      description: The address as LocalizedField[][].
    content.vb: Function GetAddressByCountry(contactId As Integer, countryId As Integer) As Address
  overload: SuperOffice.CRM.Services.IContactAgent.GetAddressByCountry*
  nameWithType.vb: IContactAgent.GetAddressByCountry(Integer, Integer)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.GetAddressByCountry(Integer, Integer)
  name.vb: GetAddressByCountry(Integer, Integer)
- uid: SuperOffice.CRM.Services.IContactAgent.AddPerson(System.Int32,SuperOffice.CRM.Services.PersonEntity)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.AddPerson(System.Int32,SuperOffice.CRM.Services.PersonEntity)
  id: AddPerson(System.Int32,SuperOffice.CRM.Services.PersonEntity)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: AddPerson(int, PersonEntity)
  nameWithType: IContactAgent.AddPerson(int, PersonEntity)
  fullName: SuperOffice.CRM.Services.IContactAgent.AddPerson(int, SuperOffice.CRM.Services.PersonEntity)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Add a person to the given contact
  example: []
  syntax:
    content: PersonEntity AddPerson(int contactId, PersonEntity newPersonEntity)
    parameters:
    - id: contactId
      type: System.Int32
      description: Contact to add person to
    - id: newPersonEntity
      type: SuperOffice.CRM.Services.PersonEntity
      description: Person object to add
    return:
      type: SuperOffice.CRM.Services.PersonEntity
      description: Updated person object
    content.vb: Function AddPerson(contactId As Integer, newPersonEntity As PersonEntity) As PersonEntity
  overload: SuperOffice.CRM.Services.IContactAgent.AddPerson*
  nameWithType.vb: IContactAgent.AddPerson(Integer, PersonEntity)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.AddPerson(Integer, SuperOffice.CRM.Services.PersonEntity)
  name.vb: AddPerson(Integer, PersonEntity)
- uid: SuperOffice.CRM.Services.IContactAgent.GetDuplicates(System.String)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetDuplicates(System.String)
  id: GetDuplicates(System.String)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetDuplicates(string)
  nameWithType: IContactAgent.GetDuplicates(string)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetDuplicates(string)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get duplicates (exact or similar in the database) based on the name
  example: []
  syntax:
    content: DuplicateEntry[] GetDuplicates(string name)
    parameters:
    - id: name
      type: System.String
      description: Name used for lookup
    return:
      type: SuperOffice.CRM.Services.DuplicateEntry[]
      description: Any records matching the specified name
    content.vb: Function GetDuplicates(name As String) As DuplicateEntry()
  overload: SuperOffice.CRM.Services.IContactAgent.GetDuplicates*
  nameWithType.vb: IContactAgent.GetDuplicates(String)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.GetDuplicates(String)
  name.vb: GetDuplicates(String)
- uid: SuperOffice.CRM.Services.IContactAgent.CreateNewEntry(SuperOffice.CRM.Services.DuplicateEntry)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.CreateNewEntry(SuperOffice.CRM.Services.DuplicateEntry)
  id: CreateNewEntry(SuperOffice.CRM.Services.DuplicateEntry)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: CreateNewEntry(DuplicateEntry)
  nameWithType: IContactAgent.CreateNewEntry(DuplicateEntry)
  fullName: SuperOffice.CRM.Services.IContactAgent.CreateNewEntry(SuperOffice.CRM.Services.DuplicateEntry)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Creates a new contact based on external duplicate
  example: []
  syntax:
    content: int CreateNewEntry(DuplicateEntry duplicate)
    parameters:
    - id: duplicate
      type: SuperOffice.CRM.Services.DuplicateEntry
      description: The duplicate to create a new entry based upon
    return:
      type: System.Int32
      description: The database identity of the newly created entry
    content.vb: Function CreateNewEntry(duplicate As DuplicateEntry) As Integer
  overload: SuperOffice.CRM.Services.IContactAgent.CreateNewEntry*
- uid: SuperOffice.CRM.Services.IContactAgent.GetDuplicateRules
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetDuplicateRules
  id: GetDuplicateRules
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetDuplicateRules()
  nameWithType: IContactAgent.GetDuplicateRules()
  fullName: SuperOffice.CRM.Services.IContactAgent.GetDuplicateRules()
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Retrieve all available duplicate rules for contact
  example: []
  syntax:
    content: DuplicateRule[] GetDuplicateRules()
    return:
      type: SuperOffice.CRM.Services.DuplicateRule[]
      description: All available duplicate rules
    content.vb: Function GetDuplicateRules() As DuplicateRule()
  overload: SuperOffice.CRM.Services.IContactAgent.GetDuplicateRules*
- uid: SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatus(SuperOffice.CRM.Services.DuplicateRule[])
  commentId: M:SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatus(SuperOffice.CRM.Services.DuplicateRule[])
  id: SetDuplicateRulesStatus(SuperOffice.CRM.Services.DuplicateRule[])
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: SetDuplicateRulesStatus(DuplicateRule[])
  nameWithType: IContactAgent.SetDuplicateRulesStatus(DuplicateRule[])
  fullName: SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatus(SuperOffice.CRM.Services.DuplicateRule[])
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Set which duplicate rules should be active or not
  example: []
  syntax:
    content: void SetDuplicateRulesStatus(DuplicateRule[] rules)
    parameters:
    - id: rules
      type: SuperOffice.CRM.Services.DuplicateRule[]
      description: Duplicate rules to update active status for
    content.vb: Sub SetDuplicateRulesStatus(rules As DuplicateRule())
  overload: SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatus*
  nameWithType.vb: IContactAgent.SetDuplicateRulesStatus(DuplicateRule())
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatus(SuperOffice.CRM.Services.DuplicateRule())
  name.vb: SetDuplicateRulesStatus(DuplicateRule())
- uid: SuperOffice.CRM.Services.IContactAgent.Merge(System.Int32,System.Int32,System.Boolean,System.Boolean)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.Merge(System.Int32,System.Int32,System.Boolean,System.Boolean)
  id: Merge(System.Int32,System.Int32,System.Boolean,System.Boolean)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: Merge(int, int, bool, bool)
  nameWithType: IContactAgent.Merge(int, int, bool, bool)
  fullName: SuperOffice.CRM.Services.IContactAgent.Merge(int, int, bool, bool)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Merge two contacts. The destination contact will remain.
  example: []
  syntax:
    content: void Merge(int sourceContactId, int destinationContactId, bool mergeIdenticalPersons, bool replaceEmptyFieldsOnDestination)
    parameters:
    - id: sourceContactId
      type: System.Int32
      description: Source contact to merge from. This contact will disappear after the merge.
    - id: destinationContactId
      type: System.Int32
      description: Destination contact to merge into
    - id: mergeIdenticalPersons
      type: System.Boolean
      description: Persons with identical names will be merged
    - id: replaceEmptyFieldsOnDestination
      type: System.Boolean
      description: If true, empty fields on destination will be replaced by values from source.
    content.vb: Sub Merge(sourceContactId As Integer, destinationContactId As Integer, mergeIdenticalPersons As Boolean, replaceEmptyFieldsOnDestination As Boolean)
  overload: SuperOffice.CRM.Services.IContactAgent.Merge*
  nameWithType.vb: IContactAgent.Merge(Integer, Integer, Boolean, Boolean)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.Merge(Integer, Integer, Boolean, Boolean)
  name.vb: Merge(Integer, Integer, Boolean, Boolean)
- uid: SuperOffice.CRM.Services.IContactAgent.Copy(System.Int32,System.String,System.String,System.Boolean)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.Copy(System.Int32,System.String,System.String,System.Boolean)
  id: Copy(System.Int32,System.String,System.String,System.Boolean)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: Copy(int, string, string, bool)
  nameWithType: IContactAgent.Copy(int, string, string, bool)
  fullName: SuperOffice.CRM.Services.IContactAgent.Copy(int, string, string, bool)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Copy a contact. Activities and related data will be ignored
  example: []
  syntax:
    content: int Copy(int sourceContactId, string destinationContactName, string destinationContactDepartment, bool copyPersons)
    parameters:
    - id: sourceContactId
      type: System.Int32
      description: The id of the contact to copy
    - id: destinationContactName
      type: System.String
      description: The name of the destination contact
    - id: destinationContactDepartment
      type: System.String
      description: The department of the destination contact
    - id: copyPersons
      type: System.Boolean
      description: If true, persons will be copied from source contact
    return:
      type: System.Int32
      description: Id of copied contact
    content.vb: Function Copy(sourceContactId As Integer, destinationContactName As String, destinationContactDepartment As String, copyPersons As Boolean) As Integer
  overload: SuperOffice.CRM.Services.IContactAgent.Copy*
  nameWithType.vb: IContactAgent.Copy(Integer, String, String, Boolean)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.Copy(Integer, String, String, Boolean)
  name.vb: Copy(Integer, String, String, Boolean)
- uid: SuperOffice.CRM.Services.IContactAgent.GetNameDepartmentDuplicates(System.String,System.String)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetNameDepartmentDuplicates(System.String,System.String)
  id: GetNameDepartmentDuplicates(System.String,System.String)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetNameDepartmentDuplicates(string, string)
  nameWithType: IContactAgent.GetNameDepartmentDuplicates(string, string)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetNameDepartmentDuplicates(string, string)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get duplicates based on the contact name and department
  example: []
  syntax:
    content: DuplicateEntry[] GetNameDepartmentDuplicates(string name, string department)
    parameters:
    - id: name
      type: System.String
      description: Name used for lookup
    - id: department
      type: System.String
      description: Department used for lookup (if any)
    return:
      type: SuperOffice.CRM.Services.DuplicateEntry[]
      description: Any records matching the specified name and department
    content.vb: Function GetNameDepartmentDuplicates(name As String, department As String) As DuplicateEntry()
  overload: SuperOffice.CRM.Services.IContactAgent.GetNameDepartmentDuplicates*
  nameWithType.vb: IContactAgent.GetNameDepartmentDuplicates(String, String)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.GetNameDepartmentDuplicates(String, String)
  name.vb: GetNameDepartmentDuplicates(String, String)
- uid: SuperOffice.CRM.Services.IContactAgent.GetDomainDuplicates(System.String)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetDomainDuplicates(System.String)
  id: GetDomainDuplicates(System.String)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetDomainDuplicates(string)
  nameWithType: IContactAgent.GetDomainDuplicates(string)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetDomainDuplicates(string)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get duplicates based on the domain
  example: []
  syntax:
    content: DuplicateEntry[] GetDomainDuplicates(string domain)
    parameters:
    - id: domain
      type: System.String
      description: Domain used for lookup
    return:
      type: SuperOffice.CRM.Services.DuplicateEntry[]
      description: Any records matching the specified domain
    content.vb: Function GetDomainDuplicates(domain As String) As DuplicateEntry()
  overload: SuperOffice.CRM.Services.IContactAgent.GetDomainDuplicates*
  nameWithType.vb: IContactAgent.GetDomainDuplicates(String)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.GetDomainDuplicates(String)
  name.vb: GetDomainDuplicates(String)
- uid: SuperOffice.CRM.Services.IContactAgent.IsNumberValid(System.Int32,System.String)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.IsNumberValid(System.Int32,System.String)
  id: IsNumberValid(System.Int32,System.String)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: IsNumberValid(int, string)
  nameWithType: IContactAgent.IsNumberValid(int, string)
  fullName: SuperOffice.CRM.Services.IContactAgent.IsNumberValid(int, string)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Checks if the number is unique or required.  The setting is configured from admin under system options.
  example: []
  syntax:
    content: bool IsNumberValid(int contactId, string number)
    parameters:
    - id: contactId
      type: System.Int32
      description: Primary key
    - id: number
      type: System.String
      description: Number field value to check.
    return:
      type: System.Boolean
      description: True if the number satisifies the configured rules for uniqueness.
    content.vb: Function IsNumberValid(contactId As Integer, number As String) As Boolean
  overload: SuperOffice.CRM.Services.IContactAgent.IsNumberValid*
  nameWithType.vb: IContactAgent.IsNumberValid(Integer, String)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.IsNumberValid(Integer, String)
  name.vb: IsNumberValid(Integer, String)
- uid: SuperOffice.CRM.Services.IContactAgent.GetQuoteVersionAddresses(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetQuoteVersionAddresses(System.Int32)
  id: GetQuoteVersionAddresses(System.Int32)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetQuoteVersionAddresses(int)
  nameWithType: IContactAgent.GetQuoteVersionAddresses(int)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetQuoteVersionAddresses(int)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get the associated billing and invoice quote version addresses. These addresses might be address on the contact, or a custom address.
  example: []
  syntax:
    content: Address[] GetQuoteVersionAddresses(int quoteVersionId)
    parameters:
    - id: quoteVersionId
      type: System.Int32
      description: The version to get the addresses for.
    return:
      type: SuperOffice.CRM.Services.Address[]
      description: The quote version addresses. Invoice and billing address, in that order.
    content.vb: Function GetQuoteVersionAddresses(quoteVersionId As Integer) As Address()
  overload: SuperOffice.CRM.Services.IContactAgent.GetQuoteVersionAddresses*
  nameWithType.vb: IContactAgent.GetQuoteVersionAddresses(Integer)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.GetQuoteVersionAddresses(Integer)
  name.vb: GetQuoteVersionAddresses(Integer)
- uid: SuperOffice.CRM.Services.IContactAgent.SaveQuoteVersionAddress(System.Int32,SuperOffice.CRM.Services.Address,SuperOffice.Data.AddressType,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.SaveQuoteVersionAddress(System.Int32,SuperOffice.CRM.Services.Address,SuperOffice.Data.AddressType,System.Int32)
  id: SaveQuoteVersionAddress(System.Int32,SuperOffice.CRM.Services.Address,SuperOffice.Data.AddressType,System.Int32)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: SaveQuoteVersionAddress(int, Address, AddressType, int)
  nameWithType: IContactAgent.SaveQuoteVersionAddress(int, Address, AddressType, int)
  fullName: SuperOffice.CRM.Services.IContactAgent.SaveQuoteVersionAddress(int, SuperOffice.CRM.Services.Address, SuperOffice.Data.AddressType, int)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Save a custom quote version address.
  example: []
  syntax:
    content: Address SaveQuoteVersionAddress(int quoteVersionId, Address address, AddressType addressType, int countryId)
    parameters:
    - id: quoteVersionId
      type: System.Int32
      description: The version to save the address on.
    - id: address
      type: SuperOffice.CRM.Services.Address
      description: The address to save on the quote version.
    - id: addressType
      type: SuperOffice.Data.AddressType
      description: Should be either QuoteBillingAddress or QuoteShippingAddress
    - id: countryId
      type: System.Int32
      description: The country for the custom address
    return:
      type: SuperOffice.CRM.Services.Address
      description: The saved addresses.
    content.vb: Function SaveQuoteVersionAddress(quoteVersionId As Integer, address As Address, addressType As AddressType, countryId As Integer) As Address
  overload: SuperOffice.CRM.Services.IContactAgent.SaveQuoteVersionAddress*
  nameWithType.vb: IContactAgent.SaveQuoteVersionAddress(Integer, Address, AddressType, Integer)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.SaveQuoteVersionAddress(Integer, SuperOffice.CRM.Services.Address, SuperOffice.Data.AddressType, Integer)
  name.vb: SaveQuoteVersionAddress(Integer, Address, AddressType, Integer)
- uid: SuperOffice.CRM.Services.IContactAgent.DeleteExpired
  commentId: M:SuperOffice.CRM.Services.IContactAgent.DeleteExpired
  id: DeleteExpired
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: DeleteExpired()
  nameWithType: IContactAgent.DeleteExpired()
  fullName: SuperOffice.CRM.Services.IContactAgent.DeleteExpired()
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Trigger deletion of contacts (companies) that has been (soft) deleted and have timed out the expiry period (the SoftDeleteRetention preference).
  example: []
  syntax:
    content: void DeleteExpired()
    content.vb: Sub DeleteExpired()
  overload: SuperOffice.CRM.Services.IContactAgent.DeleteExpired*
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactSummary(System.Int32,System.Int32)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetContactSummary(System.Int32,System.Int32)
  id: GetContactSummary(System.Int32,System.Int32)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetContactSummary(int, int)
  nameWithType: IContactAgent.GetContactSummary(int, int)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactSummary(int, int)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get summary of contact and its recent activity.
  example: []
  syntax:
    content: ContactSummary GetContactSummary(int contactId, int limit)
    parameters:
    - id: contactId
      type: System.Int32
      description: The contact id to summarize.
    - id: limit
      type: System.Int32
      description: Max number of items to include in summary lists.
    return:
      type: SuperOffice.CRM.Services.ContactSummary
      description: Summary of contact, with recent requests, sales, follow-ups, chats.
    content.vb: Function GetContactSummary(contactId As Integer, limit As Integer) As ContactSummary
  overload: SuperOffice.CRM.Services.IContactAgent.GetContactSummary*
  nameWithType.vb: IContactAgent.GetContactSummary(Integer, Integer)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.GetContactSummary(Integer, Integer)
  name.vb: GetContactSummary(Integer, Integer)
- uid: SuperOffice.CRM.Services.IContactAgent.ValidateContactEntity(SuperOffice.CRM.Services.ContactEntity)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.ValidateContactEntity(SuperOffice.CRM.Services.ContactEntity)
  id: ValidateContactEntity(SuperOffice.CRM.Services.ContactEntity)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: ValidateContactEntity(ContactEntity)
  nameWithType: IContactAgent.ValidateContactEntity(ContactEntity)
  fullName: SuperOffice.CRM.Services.IContactAgent.ValidateContactEntity(SuperOffice.CRM.Services.ContactEntity)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Check that entity is ready for saving, return error messages by field.
  example: []
  syntax:
    content: StringDictionary ValidateContactEntity(ContactEntity contactEntity)
    parameters:
    - id: contactEntity
      type: SuperOffice.CRM.Services.ContactEntity
      description: Entity to be checked for errors.
    return:
      type: SuperOffice.CRM.Services.StringDictionary
      description: Error messages tagged by field.
    content.vb: Function ValidateContactEntity(contactEntity As ContactEntity) As StringDictionary
  overload: SuperOffice.CRM.Services.IContactAgent.ValidateContactEntity*
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactList(System.Int32[])
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetContactList(System.Int32[])
  id: GetContactList(System.Int32[])
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetContactList(int[])
  nameWithType: IContactAgent.GetContactList(int[])
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactList(int[])
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Gets an array of Contact objects.
  example: []
  syntax:
    content: Contact[] GetContactList(int[] contactIds)
    parameters:
    - id: contactIds
      type: System.Int32[]
      description: The identifiers of the Contact object
    return:
      type: SuperOffice.CRM.Services.Contact[]
      description: Array of Contact objects
    content.vb: Function GetContactList(contactIds As Integer()) As Contact()
  overload: SuperOffice.CRM.Services.IContactAgent.GetContactList*
  nameWithType.vb: IContactAgent.GetContactList(Integer())
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.GetContactList(Integer())
  name.vb: GetContactList(Integer())
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyContacts
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetMyContacts
  id: GetMyContacts
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetMyContacts()
  nameWithType: IContactAgent.GetMyContacts()
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyContacts()
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Getting the contacts where the user currently logged in is set as contact owner.
  example: []
  syntax:
    content: Contact[] GetMyContacts()
    return:
      type: SuperOffice.CRM.Services.Contact[]
      description: Array of contacts
    content.vb: Function GetMyContacts() As Contact()
  overload: SuperOffice.CRM.Services.IContactAgent.GetMyContacts*
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyRecentContacts(SuperOffice.CRM.Services.Util.ContactSourceType)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetMyRecentContacts(SuperOffice.CRM.Services.Util.ContactSourceType)
  id: GetMyRecentContacts(SuperOffice.CRM.Services.Util.ContactSourceType)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetMyRecentContacts(ContactSourceType)
  nameWithType: IContactAgent.GetMyRecentContacts(ContactSourceType)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyRecentContacts(SuperOffice.CRM.Services.Util.ContactSourceType)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Method that returns a set of initial contacts. This could be the contacts in a favorites selection, the history list, the diary, or from all sources. If retrieved from the diary it will get appointments for the current and the next day.
  example: []
  syntax:
    content: Contact[] GetMyRecentContacts(ContactSourceType sourceType)
    parameters:
    - id: sourceType
      type: SuperOffice.CRM.Services.Util.ContactSourceType
      description: The source where the contacts are retrieved from (Favorites, History, Diary)
    return:
      type: SuperOffice.CRM.Services.Contact[]
      description: Arrayof contacts
    content.vb: Function GetMyRecentContacts(sourceType As ContactSourceType) As Contact()
  overload: SuperOffice.CRM.Services.IContactAgent.GetMyRecentContacts*
- uid: SuperOffice.CRM.Services.IContactAgent.GetPreviewContact(System.Int32)
  commentId: M:SuperOffice.CRM.Services.IContactAgent.GetPreviewContact(System.Int32)
  id: GetPreviewContact(System.Int32)
  parent: SuperOffice.CRM.Services.IContactAgent
  langs:
  - csharp
  - vb
  name: GetPreviewContact(int)
  nameWithType: IContactAgent.GetPreviewContact(int)
  fullName: SuperOffice.CRM.Services.IContactAgent.GetPreviewContact(int)
  type: Method
  assemblies:
  - SuperOffice.Services
  namespace: SuperOffice.CRM.Services
  summary: Get a contact from its ID
  example: []
  syntax:
    content: PreviewContact GetPreviewContact(int contactId)
    parameters:
    - id: contactId
      type: System.Int32
      description: Contact ID
    return:
      type: SuperOffice.CRM.Services.PreviewContact
      description: Contact minimal contact suitable for preview
    content.vb: Function GetPreviewContact(contactId As Integer) As PreviewContact
  overload: SuperOffice.CRM.Services.IContactAgent.GetPreviewContact*
  nameWithType.vb: IContactAgent.GetPreviewContact(Integer)
  fullName.vb: SuperOffice.CRM.Services.IContactAgent.GetPreviewContact(Integer)
  name.vb: GetPreviewContact(Integer)
references:
- uid: SuperOffice.CRM.Services
  commentId: N:SuperOffice.CRM.Services
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.CRM.Services
  nameWithType: SuperOffice.CRM.Services
  fullName: SuperOffice.CRM.Services
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Services
    name: Services
    isExternal: true
    href: SuperOffice.CRM.Services.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Services
    name: Services
    isExternal: true
    href: SuperOffice.CRM.Services.html
- uid: SuperOffice.CRM.Services.IContactAgent.CreateDefaultContactEntity*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.CreateDefaultContactEntity
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_CreateDefaultContactEntity
  name: CreateDefaultContactEntity
  nameWithType: IContactAgent.CreateDefaultContactEntity
  fullName: SuperOffice.CRM.Services.IContactAgent.CreateDefaultContactEntity
- uid: SuperOffice.CRM.Services.ContactEntity
  commentId: T:SuperOffice.CRM.Services.ContactEntity
  parent: SuperOffice.CRM.Services
  isExternal: true
  href: SuperOffice.CRM.Services.ContactEntity.html
  name: ContactEntity
  nameWithType: ContactEntity
  fullName: SuperOffice.CRM.Services.ContactEntity
- uid: SuperOffice.CRM.Services.IContactAgent.SaveContactEntity*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.SaveContactEntity
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_SaveContactEntity_SuperOffice_CRM_Services_ContactEntity_
  name: SaveContactEntity
  nameWithType: IContactAgent.SaveContactEntity
  fullName: SuperOffice.CRM.Services.IContactAgent.SaveContactEntity
- uid: SuperOffice.CRM.Services.IContactAgent.DeleteContactEntity*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.DeleteContactEntity
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_DeleteContactEntity_System_Int32_
  name: DeleteContactEntity
  nameWithType: IContactAgent.DeleteContactEntity
  fullName: SuperOffice.CRM.Services.IContactAgent.DeleteContactEntity
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: SuperOffice.CRM.Services.IContactAgent.CreateDefaultPreviewContact*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.CreateDefaultPreviewContact
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_CreateDefaultPreviewContact
  name: CreateDefaultPreviewContact
  nameWithType: IContactAgent.CreateDefaultPreviewContact
  fullName: SuperOffice.CRM.Services.IContactAgent.CreateDefaultPreviewContact
- uid: SuperOffice.CRM.Services.PreviewContact
  commentId: T:SuperOffice.CRM.Services.PreviewContact
  parent: SuperOffice.CRM.Services
  isExternal: true
  href: SuperOffice.CRM.Services.PreviewContact.html
  name: PreviewContact
  nameWithType: PreviewContact
  fullName: SuperOffice.CRM.Services.PreviewContact
- uid: SuperOffice.CRM.Services.IContactAgent.GetContact*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetContact
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetContact_System_Int32_
  name: GetContact
  nameWithType: IContactAgent.GetContact
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContact
- uid: SuperOffice.CRM.Services.Contact
  commentId: T:SuperOffice.CRM.Services.Contact
  parent: SuperOffice.CRM.Services
  isExternal: true
  href: SuperOffice.CRM.Services.Contact.html
  name: Contact
  nameWithType: Contact
  fullName: SuperOffice.CRM.Services.Contact
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyActiveContacts*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetMyActiveContacts
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetMyActiveContacts_System_DateTime_System_Int32___SuperOffice_CRM_Services_Util_ContactAction_
  name: GetMyActiveContacts
  nameWithType: IContactAgent.GetMyActiveContacts
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyActiveContacts
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
  nameWithType.vb: Date
  fullName.vb: Date
  name.vb: Date
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: SuperOffice.CRM.Services.Util.ContactAction
  commentId: T:SuperOffice.CRM.Services.Util.ContactAction
  parent: SuperOffice.CRM.Services.Util
  isExternal: true
  href: SuperOffice.CRM.Services.Util.ContactAction.html
  name: ContactAction
  nameWithType: ContactAction
  fullName: SuperOffice.CRM.Services.Util.ContactAction
- uid: SuperOffice.CRM.Services.ContactActivity[]
  isExternal: true
  href: SuperOffice.CRM.Services.ContactActivity.html
  name: ContactActivity[]
  nameWithType: ContactActivity[]
  fullName: SuperOffice.CRM.Services.ContactActivity[]
  nameWithType.vb: ContactActivity()
  fullName.vb: SuperOffice.CRM.Services.ContactActivity()
  name.vb: ContactActivity()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.ContactActivity
    name: ContactActivity
    isExternal: true
    href: SuperOffice.CRM.Services.ContactActivity.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.CRM.Services.ContactActivity
    name: ContactActivity
    isExternal: true
    href: SuperOffice.CRM.Services.ContactActivity.html
  - name: (
  - name: )
- uid: SuperOffice.CRM.Services.Util
  commentId: N:SuperOffice.CRM.Services.Util
  isExternal: true
  href: SuperOffice.html
  name: SuperOffice.CRM.Services.Util
  nameWithType: SuperOffice.CRM.Services.Util
  fullName: SuperOffice.CRM.Services.Util
  spec.csharp:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Services
    name: Services
    isExternal: true
    href: SuperOffice.CRM.Services.html
  - name: .
  - uid: SuperOffice.CRM.Services.Util
    name: Util
    isExternal: true
    href: SuperOffice.CRM.Services.Util.html
  spec.vb:
  - uid: SuperOffice
    name: SuperOffice
    isExternal: true
    href: SuperOffice.html
  - name: .
  - uid: SuperOffice.CRM
    name: CRM
    isExternal: true
    href: SuperOffice.CRM.html
  - name: .
  - uid: SuperOffice.CRM.Services
    name: Services
    isExternal: true
    href: SuperOffice.CRM.Services.html
  - name: .
  - uid: SuperOffice.CRM.Services.Util
    name: Util
    isExternal: true
    href: SuperOffice.CRM.Services.Util.html
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactEntity*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetContactEntity
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetContactEntity_System_Int32_
  name: GetContactEntity
  nameWithType: IContactAgent.GetContactEntity
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactEntity
- uid: SuperOffice.CRM.Services.IContactAgent.Undelete*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.Undelete
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_Undelete_System_Int32_
  name: Undelete
  nameWithType: IContactAgent.Undelete
  fullName: SuperOffice.CRM.Services.IContactAgent.Undelete
- uid: SuperOffice.CRM.Services.IContactAgent.GetPersons*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetPersons
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetPersons_System_Int32_
  name: GetPersons
  nameWithType: IContactAgent.GetPersons
  fullName: SuperOffice.CRM.Services.IContactAgent.GetPersons
- uid: SuperOffice.CRM.Services.Person[]
  isExternal: true
  href: SuperOffice.CRM.Services.Person.html
  name: Person[]
  nameWithType: Person[]
  fullName: SuperOffice.CRM.Services.Person[]
  nameWithType.vb: Person()
  fullName.vb: SuperOffice.CRM.Services.Person()
  name.vb: Person()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.Person
    name: Person
    isExternal: true
    href: SuperOffice.CRM.Services.Person.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.CRM.Services.Person
    name: Person
    isExternal: true
    href: SuperOffice.CRM.Services.Person.html
  - name: (
  - name: )
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactWithPersons*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetContactWithPersons
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetContactWithPersons_System_Int32_
  name: GetContactWithPersons
  nameWithType: IContactAgent.GetContactWithPersons
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactWithPersons
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyContact*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetMyContact
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetMyContact
  name: GetMyContact
  nameWithType: IContactAgent.GetMyContact
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyContact
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyBizCard*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetMyBizCard
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetMyBizCard
  name: GetMyBizCard
  nameWithType: IContactAgent.GetMyBizCard
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyBizCard
- uid: SuperOffice.CRM.Services.IContactAgent.ChangeCountry*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.ChangeCountry
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_ChangeCountry_SuperOffice_CRM_Services_ContactEntity_System_Int32_
  name: ChangeCountry
  nameWithType: IContactAgent.ChangeCountry
  fullName: SuperOffice.CRM.Services.IContactAgent.ChangeCountry
- uid: SuperOffice.CRM.Services.IContactAgent.GetAddress*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetAddress
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetAddress_System_Int32_
  name: GetAddress
  nameWithType: IContactAgent.GetAddress
  fullName: SuperOffice.CRM.Services.IContactAgent.GetAddress
- uid: SuperOffice.CRM.Services.Address
  commentId: T:SuperOffice.CRM.Services.Address
  parent: SuperOffice.CRM.Services
  isExternal: true
  href: SuperOffice.CRM.Services.Address.html
  name: Address
  nameWithType: Address
  fullName: SuperOffice.CRM.Services.Address
- uid: SuperOffice.CRM.Services.IContactAgent.GetAddressByCountry*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetAddressByCountry
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetAddressByCountry_System_Int32_System_Int32_
  name: GetAddressByCountry
  nameWithType: IContactAgent.GetAddressByCountry
  fullName: SuperOffice.CRM.Services.IContactAgent.GetAddressByCountry
- uid: SuperOffice.CRM.Services.IContactAgent.AddPerson*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.AddPerson
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_AddPerson_System_Int32_SuperOffice_CRM_Services_PersonEntity_
  name: AddPerson
  nameWithType: IContactAgent.AddPerson
  fullName: SuperOffice.CRM.Services.IContactAgent.AddPerson
- uid: SuperOffice.CRM.Services.PersonEntity
  commentId: T:SuperOffice.CRM.Services.PersonEntity
  parent: SuperOffice.CRM.Services
  isExternal: true
  href: SuperOffice.CRM.Services.PersonEntity.html
  name: PersonEntity
  nameWithType: PersonEntity
  fullName: SuperOffice.CRM.Services.PersonEntity
- uid: SuperOffice.CRM.Services.IContactAgent.GetDuplicates*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetDuplicates
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetDuplicates_System_String_
  name: GetDuplicates
  nameWithType: IContactAgent.GetDuplicates
  fullName: SuperOffice.CRM.Services.IContactAgent.GetDuplicates
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: SuperOffice.CRM.Services.DuplicateEntry[]
  isExternal: true
  href: SuperOffice.CRM.Services.DuplicateEntry.html
  name: DuplicateEntry[]
  nameWithType: DuplicateEntry[]
  fullName: SuperOffice.CRM.Services.DuplicateEntry[]
  nameWithType.vb: DuplicateEntry()
  fullName.vb: SuperOffice.CRM.Services.DuplicateEntry()
  name.vb: DuplicateEntry()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.DuplicateEntry
    name: DuplicateEntry
    isExternal: true
    href: SuperOffice.CRM.Services.DuplicateEntry.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.CRM.Services.DuplicateEntry
    name: DuplicateEntry
    isExternal: true
    href: SuperOffice.CRM.Services.DuplicateEntry.html
  - name: (
  - name: )
- uid: SuperOffice.CRM.Services.IContactAgent.CreateNewEntry*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.CreateNewEntry
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_CreateNewEntry_SuperOffice_CRM_Services_DuplicateEntry_
  name: CreateNewEntry
  nameWithType: IContactAgent.CreateNewEntry
  fullName: SuperOffice.CRM.Services.IContactAgent.CreateNewEntry
- uid: SuperOffice.CRM.Services.DuplicateEntry
  commentId: T:SuperOffice.CRM.Services.DuplicateEntry
  parent: SuperOffice.CRM.Services
  isExternal: true
  href: SuperOffice.CRM.Services.DuplicateEntry.html
  name: DuplicateEntry
  nameWithType: DuplicateEntry
  fullName: SuperOffice.CRM.Services.DuplicateEntry
- uid: SuperOffice.CRM.Services.IContactAgent.GetDuplicateRules*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetDuplicateRules
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetDuplicateRules
  name: GetDuplicateRules
  nameWithType: IContactAgent.GetDuplicateRules
  fullName: SuperOffice.CRM.Services.IContactAgent.GetDuplicateRules
- uid: SuperOffice.CRM.Services.DuplicateRule[]
  isExternal: true
  href: SuperOffice.CRM.Services.DuplicateRule.html
  name: DuplicateRule[]
  nameWithType: DuplicateRule[]
  fullName: SuperOffice.CRM.Services.DuplicateRule[]
  nameWithType.vb: DuplicateRule()
  fullName.vb: SuperOffice.CRM.Services.DuplicateRule()
  name.vb: DuplicateRule()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.DuplicateRule
    name: DuplicateRule
    isExternal: true
    href: SuperOffice.CRM.Services.DuplicateRule.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.CRM.Services.DuplicateRule
    name: DuplicateRule
    isExternal: true
    href: SuperOffice.CRM.Services.DuplicateRule.html
  - name: (
  - name: )
- uid: SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatus*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatus
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_SetDuplicateRulesStatus_SuperOffice_CRM_Services_DuplicateRule___
  name: SetDuplicateRulesStatus
  nameWithType: IContactAgent.SetDuplicateRulesStatus
  fullName: SuperOffice.CRM.Services.IContactAgent.SetDuplicateRulesStatus
- uid: SuperOffice.CRM.Services.IContactAgent.Merge*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.Merge
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_Merge_System_Int32_System_Int32_System_Boolean_System_Boolean_
  name: Merge
  nameWithType: IContactAgent.Merge
  fullName: SuperOffice.CRM.Services.IContactAgent.Merge
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: SuperOffice.CRM.Services.IContactAgent.Copy*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.Copy
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_Copy_System_Int32_System_String_System_String_System_Boolean_
  name: Copy
  nameWithType: IContactAgent.Copy
  fullName: SuperOffice.CRM.Services.IContactAgent.Copy
- uid: SuperOffice.CRM.Services.IContactAgent.GetNameDepartmentDuplicates*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetNameDepartmentDuplicates
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetNameDepartmentDuplicates_System_String_System_String_
  name: GetNameDepartmentDuplicates
  nameWithType: IContactAgent.GetNameDepartmentDuplicates
  fullName: SuperOffice.CRM.Services.IContactAgent.GetNameDepartmentDuplicates
- uid: SuperOffice.CRM.Services.IContactAgent.GetDomainDuplicates*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetDomainDuplicates
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetDomainDuplicates_System_String_
  name: GetDomainDuplicates
  nameWithType: IContactAgent.GetDomainDuplicates
  fullName: SuperOffice.CRM.Services.IContactAgent.GetDomainDuplicates
- uid: SuperOffice.CRM.Services.IContactAgent.IsNumberValid*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.IsNumberValid
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_IsNumberValid_System_Int32_System_String_
  name: IsNumberValid
  nameWithType: IContactAgent.IsNumberValid
  fullName: SuperOffice.CRM.Services.IContactAgent.IsNumberValid
- uid: SuperOffice.CRM.Services.IContactAgent.GetQuoteVersionAddresses*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetQuoteVersionAddresses
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetQuoteVersionAddresses_System_Int32_
  name: GetQuoteVersionAddresses
  nameWithType: IContactAgent.GetQuoteVersionAddresses
  fullName: SuperOffice.CRM.Services.IContactAgent.GetQuoteVersionAddresses
- uid: SuperOffice.CRM.Services.Address[]
  isExternal: true
  href: SuperOffice.CRM.Services.Address.html
  name: Address[]
  nameWithType: Address[]
  fullName: SuperOffice.CRM.Services.Address[]
  nameWithType.vb: Address()
  fullName.vb: SuperOffice.CRM.Services.Address()
  name.vb: Address()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.Address
    name: Address
    isExternal: true
    href: SuperOffice.CRM.Services.Address.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.CRM.Services.Address
    name: Address
    isExternal: true
    href: SuperOffice.CRM.Services.Address.html
  - name: (
  - name: )
- uid: SuperOffice.CRM.Services.IContactAgent.SaveQuoteVersionAddress*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.SaveQuoteVersionAddress
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_SaveQuoteVersionAddress_System_Int32_SuperOffice_CRM_Services_Address_SuperOffice_Data_AddressType_System_Int32_
  name: SaveQuoteVersionAddress
  nameWithType: IContactAgent.SaveQuoteVersionAddress
  fullName: SuperOffice.CRM.Services.IContactAgent.SaveQuoteVersionAddress
- uid: SuperOffice.Data.AddressType
  isExternal: true
  name: AddressType
  nameWithType: AddressType
  fullName: SuperOffice.Data.AddressType
- uid: SuperOffice.CRM.Services.IContactAgent.DeleteExpired*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.DeleteExpired
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_DeleteExpired
  name: DeleteExpired
  nameWithType: IContactAgent.DeleteExpired
  fullName: SuperOffice.CRM.Services.IContactAgent.DeleteExpired
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactSummary*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetContactSummary
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetContactSummary_System_Int32_System_Int32_
  name: GetContactSummary
  nameWithType: IContactAgent.GetContactSummary
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactSummary
- uid: SuperOffice.CRM.Services.ContactSummary
  commentId: T:SuperOffice.CRM.Services.ContactSummary
  parent: SuperOffice.CRM.Services
  isExternal: true
  href: SuperOffice.CRM.Services.ContactSummary.html
  name: ContactSummary
  nameWithType: ContactSummary
  fullName: SuperOffice.CRM.Services.ContactSummary
- uid: SuperOffice.CRM.Services.IContactAgent.ValidateContactEntity*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.ValidateContactEntity
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_ValidateContactEntity_SuperOffice_CRM_Services_ContactEntity_
  name: ValidateContactEntity
  nameWithType: IContactAgent.ValidateContactEntity
  fullName: SuperOffice.CRM.Services.IContactAgent.ValidateContactEntity
- uid: SuperOffice.CRM.Services.StringDictionary
  isExternal: true
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: SuperOffice.CRM.Services.StringDictionary
- uid: SuperOffice.CRM.Services.IContactAgent.GetContactList*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetContactList
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetContactList_System_Int32___
  name: GetContactList
  nameWithType: IContactAgent.GetContactList
  fullName: SuperOffice.CRM.Services.IContactAgent.GetContactList
- uid: SuperOffice.CRM.Services.Contact[]
  isExternal: true
  href: SuperOffice.CRM.Services.Contact.html
  name: Contact[]
  nameWithType: Contact[]
  fullName: SuperOffice.CRM.Services.Contact[]
  nameWithType.vb: Contact()
  fullName.vb: SuperOffice.CRM.Services.Contact()
  name.vb: Contact()
  spec.csharp:
  - uid: SuperOffice.CRM.Services.Contact
    name: Contact
    isExternal: true
    href: SuperOffice.CRM.Services.Contact.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: SuperOffice.CRM.Services.Contact
    name: Contact
    isExternal: true
    href: SuperOffice.CRM.Services.Contact.html
  - name: (
  - name: )
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyContacts*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetMyContacts
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetMyContacts
  name: GetMyContacts
  nameWithType: IContactAgent.GetMyContacts
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyContacts
- uid: SuperOffice.CRM.Services.IContactAgent.GetMyRecentContacts*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetMyRecentContacts
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetMyRecentContacts_SuperOffice_CRM_Services_Util_ContactSourceType_
  name: GetMyRecentContacts
  nameWithType: IContactAgent.GetMyRecentContacts
  fullName: SuperOffice.CRM.Services.IContactAgent.GetMyRecentContacts
- uid: SuperOffice.CRM.Services.Util.ContactSourceType
  commentId: T:SuperOffice.CRM.Services.Util.ContactSourceType
  parent: SuperOffice.CRM.Services.Util
  isExternal: true
  href: SuperOffice.CRM.Services.Util.ContactSourceType.html
  name: ContactSourceType
  nameWithType: ContactSourceType
  fullName: SuperOffice.CRM.Services.Util.ContactSourceType
- uid: SuperOffice.CRM.Services.IContactAgent.GetPreviewContact*
  commentId: Overload:SuperOffice.CRM.Services.IContactAgent.GetPreviewContact
  isExternal: true
  href: SuperOffice.CRM.Services.IContactAgent.html#SuperOffice_CRM_Services_IContactAgent_GetPreviewContact_System_Int32_
  name: GetPreviewContact
  nameWithType: IContactAgent.GetPreviewContact
  fullName: SuperOffice.CRM.Services.IContactAgent.GetPreviewContact
